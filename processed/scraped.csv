,fname,text
0,experienceleague.adobe.com docs experience platform edge data collection track links.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge data collection track links.html?lang=en.txt.  Track links Links can be set manually or tracked automatically. Manual tracking is done by adding the details under the web.webInteraction part of the schema. There are three required variables: web.webInteraction.name web.webInteraction.type web.webInteraction.linkClicks.value alloy(""sendEvent"", { ""xdm"": {  ""web"": {  ""webInteraction"": {   ""linkClicks"": {    ""value"": 1   },   ""name"": ""My Custom Link"", // Name that shows up in the custom links report   ""URL"": ""https://myurl.com"", // The URL of the link   ""type"": ""other"" // values: other, download, exit  }  } } }); The link type can be one of three values: other: A custom link download: A download link exit: An exit link These values are automatically mapped into Adobe Analytics if configured to do so. Automatic link tracking By default, the Web SDK captures, labels, and records clicks on qualifying link tags. Clicks are captured with a capture click event listener that is attached to the document. Automatic link tracking can be disabled by configuring the Web SDK. clickCollectionEnabled: false What tags qualify for link-tracking? Automatic link tracking is done for anchor A and AREA tags. However, these tags aren’t considered for link tracking if they have an attached onclick handler. How are links labeled? Links are labeled as a download link if the anchor tag includes a download attribute or if the link ends with a popular file extension. The download link qualifier can be configured with a regular expression: downloadLinkQualifier: ""\\.(exe|zip|wav|mp3|mov|mpg|avi|wmv|pdf|doc|docx|xls|xlsx|ppt|pptx)$"" Links are labeled as an exit link if the link target domain differs from the current window.location.hostname. Links that do not qualify as a download or exit link are labeled as “other.” How can link-tracking values be filtered? The data collected with automatic link tracking can be inspected and filtered by providing an onBeforeEventSend callback function. Filtering link tracking data can be useful when preparing data for Analytics reporting. Automatic link tracking captures both the link name and link URL. In Analytics reports, the link name takes priority over link URL. If you wish to report the link URL, the link name needs to be removed. The following example shows an onBeforeEventSend function that removes the link name for download links: alloy(""configure"", { onBeforeEventSend: function(options) {  if (options  && options.xdm  && options.xdm.web  && options.xdm.web.webInteraction) {   if (options.xdm.web.webInteraction.type === ""download"") {   options.xdm.web.webInteraction.name = undefined;   }  } } });  Business.Adobe.com resources   "
1,experienceleague.adobe.com docs experience platform edge fundamentals interacting with multiple properties.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals interacting with multiple properties.html?lang=en.txt.  Interact with multiple properties There are certain cases where you might want to interact with two different properties on the same page. These cases include: Companies that have been acquired and are working on integrating their websites together Data-sharing relationships between multiple companies Customers who are testing new Adobe Solutions and don’t want to disrupt their existing implementation The SDK allows you to create a separate instance for each property by adding another name to the array in the base code. The following example provides two names, mycustomname1 and mycustomname2. <script> !function(n,o){o.forEach(function(o){n[o]||((n.__alloyNS=n.__alloyNS|| []).push(o),n[o]=function(){var u=arguments;return new Promise( function(i,l){n[o].q.push([i,l,u])})},n[o].q=[])})} (window,[""mycustomname1"", ""mycustomname2""]); </script> <script src=""alloy.js"" async></script> As a result, the script creates two instances of the SDK. The global function for interacting with the first instance is named mycustomname1 and the global function for interacting with the second instance is named mycustomname2. By creating two separate instances, each can be configured for a different property. Any communication or data persistence that occurs due to interacting with mycustomname1 is kept isolated from mycustomname2. Following the above example, you can execute commands using each of the instances, as follows: mycustomname1(""configure"", { ""edgeConfigId"": ""ebebf826-a01f-4458-8cec-ef61de241c93"", ""orgId"": ""ADB3LETTERSANDNUMBERS@AdobeOrg"" }); mycustomname1(""sendEvent"", { ""data"": {  ""key"": ""value"" } }); mycustomname2(""configure"", { ""edgeConfigId"": ""f46e981f-fd03-4bdd-a9d9-73ce4447f870"", ""orgId"": ""ADB3NUMBERSANDLETTERS2@AdobeOrg"" }); mycustomname2(""sendEvent"", { ""data"": {  ""key"": ""value"" } }); Be sure to execute the configure command for each instance before executing other commands on the same instance. Limitations To avoid conflicts with cookies, only one instance of Adobe Experience Platform Web SDK within a page can have a particular edgeConfigId. Similarly, only one instance of Adobe Experience Platform Web SDK can have a particular orgId. Business.Adobe.com resources  Multichannel Communication Content Management System Email Deliverability Third Party Data Analytics Display Advertising "
2,experienceleague.adobe.com docs experience platform edge consent iab tcf with launch.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge consent iab tcf with launch.html?lang=en.txt.  Integrate IAB TCF 2.0 support using tags and the Platform Web SDK extension Adobe Experience Platform Web SDK supports the Interactive Advertising Bureau Transparency & Consent Framework, version 2.0 (IAB TCF 2.0). This guide shows you how to set up a tag property for sending IAB TCF 2.0 consent information to Adobe using the Adobe Experience Platform Web SDK tag extension. If you do not wish to use tags, please refer to the guide on using IAB TCF 2.0 without tags. Getting started In order to use IAB TCF 2.0 with tags and the Platform Web SDK extension, you need to have an XDM schema and dataset available. Additionally, this guide requires you to have a working understanding of Adobe Experience Platform Web SDK. For a quick refresher, please read the Adobe Experience Platform Web SDK overview and the Frequently asked questions documentation. Setting default consent Within the extension configuration, there is a setting for default consent. This controls the behavior of customers who do not have a consent cookie. If you want to queue Experience Events for customers who do not have a consent cookie, set this to pending. If you want to discard Experience Events for customers who do not have a consent cookie, set this to out. You can also use a data element to dynamically set the default consent value. For more information on how to configure default consent, refer to the default consent section in the SDK configuration guide. Updating Profile with consent information To call the setConsent action when your customers consent preferences have changed, you need to create a new tag rule. Start by adding a new event and choose the Core extension’s “Custom Code” event type. Use the following code sample for your new event: // Wait for window.__tcfapi to be defined, then trigger when the customer has completed their consent and preferences. function addEventListener() { if (window.__tcfapi) {  window.__tcfapi(""addEventListener"", 2, function (tcData, success) {  if (success && tcData.eventStatus === ""useractioncomplete"") {   // save the tcData.tcString in a data element   _satellite.setVar(""IAB TCF Consent String"", tcData.tcString);   _satellite.setVar(""IAB TCF Consent GDPR"", tcData.gdprApplies);   trigger();  }  }); } else {  // window.__tcfapi wasn't defined. Check again in 100 milliseconds  setTimeout(addEventListener, 100); } } addEventListener(); This custom code does two things: Sets two data elements, one with the consent string and one with the gdprApplies flag. This is useful later when filling out the “Set Consent” action. Triggers the rule when the consent preferences have changed. The “Set Consent” action should be used whenever consent preferences have changed. Add a “Set Consent” action in the extension and fill out the form as follows: Standard: “IAB TCF” Version: “2.0” Value: “%IAB TCF Consent String%” GDPR Applies: “%IAB TCF Consent GDPR%”  IMPORTANT You cannot choose these data elements using the data element selector because they were created through custom code. You must type in the data element name with the percent signs. This code updates your customer’s profile with their new consent preferences whenever they change. Additionally, the server returns a cookie value, which could prevent Adobe Experience Platform Web SDK from recording Experience Events. Creating an XDM data element for Experience Events The consent string should be included in the XDM Experience Event. To do this, use the XDM Object data element. Start by creating a new XDM Object data element, or alternatively, use one you already created for sending events. If you have added the Experience Event Privacy schema field group to your schema, you should have a consentStrings key in the XDM object. Select consentStrings. Choose Provide individual items and select Add Item. Expand the consentString heading, and expand the first item, then fill in the following values: consentStandard: IAB TCF consentStandardVersion: 2.0 consentStringValue: %IAB TCF Consent String% gdprApplies: %IAB TCF Consent GDPR% IMPORTANT You cannot choose these data elements using the data element selector because they were created through custom code. You must type in the data element name with the percent signs. Sending an initial Experience Event with IAB TCF 2.0 consent information If the initial Experience Event on the page is triggered with a page load event, the consent string might not have loaded yet. This rule is intended to replace your current page load event. To make sure the consent information is loaded first, create a new rule and add the following code as a custom code event: // Wait for window.__tcfapi to be defined, then trigger when there is a consent string function addEventListener() { if (window.__tcfapi) {  window.__tcfapi(""addEventListener"", 2, function (tcData, success) {  if (success && (tcData.eventStatus === ""useractioncomplete"" || tcData.eventStatus === ""tcloaded"")) {   // save the tcData.tcString in a data element   _satellite.setVar(""IAB TCF Consent String"", tcData.tcString);   _satellite.setVar(""IAB TCF GDPR Applies"", tcData.gdprApplies);   trigger();  }  }); } else {  // window.__tcfapi wasn""t defined. Check again in 100 milliseconds  setTimeout(addEventListener, 100); } } addEventListener(); This code is identical to the previous custom code, except that both useractioncomplete and tcloaded events are handled. The previous custom code only triggers when the customer chooses their preferences for the first time. This code also triggers when the customer has already chosen their preferences. For example, on the second page load. Add a “Send Event” action from the Platform Web SDK extension. Within the XDM field, choose the XDM data element you created in the previous section. Sending other events with IAB TCF 2.0 consent information When events are triggered after the initial Experience Event, the two data elements are still defined and can be used to send the IAB consent information. Use the same XDM data element to send future events. IAB TCF 2.0 information is included. Next steps Now that you have learned how to use IAB TCF 2.0 with the Platform Web SDK extension, you can also choose to integrate with other Adobe solutions such as Adobe Analytics or Adobe Real-Time Customer Data Platform. See the IAB Transparency & Consent Framework 2.0 overview for more information. Business.Adobe.com resources   "
3,experienceleague.adobe.com docs experience platform edge home.html.txt,"experienceleague.adobe.com docs experience platform edge home.html.txt.  Adobe Experience Platform Web SDK overview Adobe Experience Platform Web SDK is a client-side JavaScript library that allows customers of Adobe Experience Cloud to interact with the various services in the Experience Cloud through the Adobe Experience Platform Edge Network. In addition to the JavaScript library, there is a tag extension to help with your Web SDK configurations. For a step by step guide to setting up the Web SDK with tags and sending data to the solutions please see our Implement Adobe Experience Cloud with Web SDK tutorial. IMPORTANT This product is constantly evolving and growing to support more and more use cases. To keep up with the latest and see what we currently support, see the supported use cases page. Adobe Experience Edge Adobe Experience Platform Web SDK is part of the collection that makes up the Adobe Experience Edge. Experience Edge consists of the following technologies: Adobe Experience Platform Web SDK: A JavaScript SDK and tag extension to dramatically simplify deploying Adobe technologies. Adobe Experience Platform Mobile SDK: An extension to the v5 mobile SDK to allow customers to use the new deployment methodology Adobe Experience Platform Edge Network: A global distributed network of servers that enable a new methodology of deploying Adobe products The Adobe Experience Edge is a new framework for low-latency data collection, pluggable computing and rapid data activation across all addressable channels. Adobe Experience Edge provides a single consolidated SDK for every channel (JavaScript, Mobile, Server-side), which sends data to a common Adobe domain (adobedc.net) and receives a single payload back for data and experience delivery. On the server-side, a unified edge gateway and a common platform services framework makes it easy to plug-in and deploy new capabilities into this real-time computing environment. This architecture: Decreases customer time to value Ends the need for “point” integrations Improves performance compared to the old libraries Decreases costs Increases the speed of innovation Creates sustained competitive advantages for Adobe customers A single consolidated edge system allows customers to manage their advertising, marketing or personalization campaigns across all channels as an integrated experience. It allows Adobe to deliver services with lower total cost of ownership for customers. It also helps increase the speed of product innovation by making the real-time edge pluggable and allowing Adobe and its customers to more rapidly add new capabilities and customer-defined logic to that real time system. Video overview The following video gives an overview of the Adobe Experience Platform Web SDK and Adobe Experience Platform Edge Network. Your browser does not support the iframe element. Libraries replaced by the Web SDK The Web SDK is not just a wrapper around existing libraries. It is a completely new library, written from the ground up to incorporate functionalities of existing libraries. Its purpose is to end challenges with tags having to fire in the right order, inconsistency with library versioning challenges, and better dependency management. It is a new way to implement the Experience Cloud and it is open source. The Web SDK replaces the following SDKs: Visitor.js AppMeasurement.js AT.js DIL.js In addition to a new library, there is a new endpoint that streamlines the HTTP requests to Adobe solutions. Before, Visitor.js sent a blocking call to the visitor ID service, then AT.js sent a call to Adobe Target, DIL.js sent a call to Adobe Audience Manager, and finally AppMeasurement.js sent a call to Adobe Analytics. This new library and endpoint can retrieve an ID, fetch a Target experience, send data to Audience Manager, and pass the data to Adobe Experience Platform in a single call. The following video demonstrates Adobe Experience Platform Web SDK and Adobe Experience Platform Edge Network in action. The video example uses a single call to Adobe which sends data to Experience Platform, Analytics, Audience Manager, and Target. Your browser does not support the iframe element. Migrating from existing libraries to Web SDK To simplify your migration from any of the existing libraries to Web SDK, Adobe offers a streamlined upgrade path, allowing you to migrate each individual page of your website to Web SDK, without the need of migrating your entire website at once. This means you can use Web SDK on a page and leave the existing libraries on the other pages, until you can migrate them as well. at.js to Web SDK migration considerations Before migrating pages that use at.js to Web SDK, make sure to enable the following Web SDK configuration options. This ensures the visitor profile is kept while navigating from pages with at.js to pages using Web SDK. idMigrationEnabled targetMigrationEnabled IMPORTANT The following Target features are not supported when migrating from at.js to Web SDK: Redirect offers CNAME and cross-domain support After migrating from at.js to Web SDK, you should remove the targetMigrationEnabled option from your configuration. Business.Adobe.com resources  Advertising Revenue Email Marketing Second Party Data Device Graph Data Explorer Tv Advertising "
4,experienceleague.adobe.com docs experience platform edge resources.html?lang=en.txt,experienceleague.adobe.com docs experience platform edge resources.html?lang=en.txt.  Useful articles Solving Implementation Pain Points with Adobe Experience Platform Web SDK and Edge Network Boosting Website Performance with Adobe Experience Platform Web SDK and Edge Network Guide to implementing Adobe Experience Platform Web SDK using Tags  Business.Adobe.com resources   
5,experienceleague.adobe.com docs experience platform edge personalization adobe target using mbox 3rdpartyid.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target using mbox 3rdpartyid.html?lang=en.txt.  What is mbox3rdPartyId The mbox3rdPartyId in Adobe Target is your company’s visitor ID, such as the membership ID for your company’s loyalty program. When a visitor logs in to a company’s site, the company typically creates an ID that is tied to the visitor’s account, loyalty card, membership number, or other applicable identifiers for that company. Learn more How to use mbox3rdPartyId with the Web SDK Step 1: Configure the Target Third Party ID Namespace Configure the Target Third Party ID Namespace in your Datastream, using the ID Namespace you want to use as an mbox 3rd party ID. Learn more about ID namespaces Step 2: Send the mbox3rdpartyId to Target Send the mbox3rdpartyId to Target in the sendEvent command, using the ID namespace that you configured in Step 1. Learn more about sending IDs alloy(""sendEvent"", { xdm: {  ""identityMap"": {  ""ID_NAMESPACE"": [ // Replace `ID_NAMESPACE` with the namespace you have configured in Step 1.   {   ""id"": ""1234"",   ""authenticatedState"": ""authenticated""   }  ]  } } });  Business.Adobe.com resources   "
6,experienceleague.adobe.com docs experience platform edge personalization adobe target accessing response tokens.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target accessing response tokens.html?lang=en.txt.  Accessing response tokens Personalization content returned from Adobe Target includes response tokens, which are details about the activity, offer, experience, user profile, geo information, and more. These details can be shared with third-party tools or used for debugging. Response tokens can be configured in the Adobe Target user interface. To access any personalization content, provide a callback function when sending an event. This callback will be called after the SDK receives a successful response from the server. Your callback will be provided a result object, which may contain a propositions property containing any returned personalization content. Below is an example of providing a callback function. alloy(""sendEvent"", {  renderDecisions: true,  xdm: {} }).then(function(result) {  if (result.propositions) {  // Manually render propositions  } }); In this example, result.propositions, if it exists, is an array containing personalization propositions related to the event. Please see Rendering personalization content for more information on the content of result.propositions. Assume you want to gather all activity names from all propositions that were automatically rendered by the web SDK and push them into a single array. You could then send the single array to a third party. In this case: Extract propositions from the result object. Loop through each proposition. Determine if the SDK rendered the proposition. If so, loop through each item in the proposition. Retrieve the activity name from the meta property, which is an object containing response tokens. Push the activity name into an array. Send the activity names to a third party. Your code would look as follows: alloy(""sendEvent"", {  renderDecisions: true,  xdm: {} }).then(function(result) {  var activityNames = [];  propositions.forEach(function(proposition) {  if (proposition.renderAttempted) {   proposition.items.forEach(function(item) {   if (item.meta) {    // item.meta contains the response tokens.    var activityName = item.meta[""activity.name""];    // Ignore duplicates    if (activityNames.indexOf(activityName) === -1) {    activityNames.push(activityName);    }   }   });  }  });  // Now that activity names are in an array,  // you can send them to a third party or use  // them in some other way. });  Business.Adobe.com resources   "
7,experienceleague.adobe.com docs experience platform edge fundamentals debugging.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals debugging.html?lang=en.txt.  Debugging When debugging is enabled, the SDK outputs messages to the browser console that can be helpful in debugging your implementation and understanding how the SDK is behaving. Debugging is disabled by default, but can be toggled on in four different ways: configure command setDebug command query string parameter Toggling on Enable Debugging in Adobe Experience Platform Debugger. Adobe Experience Platform is a powerful tool that examines your webpages and helps you debug implementation issues with your Experience Cloud products. Adobe Experience Platform Debugger is available as both a Chrome and Firefox extension. Debugging can be enabled from the configuration tab of the AEP Web SDK section. Toggling debugging with the Configure command When configuring the SDK using the configure command, enable debugging by setting the debugEnabled option to true. alloy(""configure"", { ""edgeConfigId"": ""ebebf826-a01f-4458-8cec-ef61de241c93"", ""orgId"":""ADB3LETTERSANDNUMBERS@AdobeOrg"", ""debugEnabled"": true }); TIP This enables debugging for all users of the webpage rather than only your personal browser. Toggling debugging with the Debug command Toggle debugging with a separate debug command as follows: alloy(""setDebug"", { ""enabled"": true }); If you prefer not to change code on your webpage or don’t want logging messages to be produced for all users of your website, this is particularly useful because you can run the debug command within your browser’s JavaScript console at any time. Toggling debugging with a query string parameter Toggle debugging by setting an alloy_debug query string parameter to true or false as follows: http://example.com/?alloy_debug=true Similar to the debug command, if you prefer not to change code on your webpage or don’t want logging messages to be produced for all users of your website, this is particularly useful because you can set the query string parameter when loading the webpage within your browser. Priority and duration When debugging is set through the debug command or query string parameter, it overrides any debug option set in the configure command. In these two cases, debugging also remains toggled on for the duration of the session. In other words, if you enable debugging using the debug command or query string parameter, it stays enabled until one of the following: The end of your session You run the debug command You set the query string parameter again Retrieving library information It’s often helpful to access some of the details behind the library you have loaded onto your website. To do this, execute the getLibraryInfo command as follows: alloy(""getLibraryInfo"").then(function(result) { console.log(result.libraryInfo.version); console.log(result.libraryInfo.commands); console.log(result.libraryInfo.configs); }); Currently, the provided libraryInfo object contains the following properties: version: This is the version of the loaded library. For example, if the version of the library being loaded were 1.0.0, the value would be 1.0.0. When the library is run inside the tag extension (named “AEP Web SDK”), the version is the library version and the tag extension version joined with a “+” sign. For example, if the version of the library were 1.0.0, and the version of the tag extension were 1.2.0, the value would be 1.0.0+1.2.0. commands: These are all of the available commands supported by the loaded library. configs: These are all of the current configs in the loaded library.  Business.Adobe.com resources  Subscription Revenue Lookalike Modeling Web Analytics Analytics Search Marketing Management Enterprise Search Tools "
8,experienceleague.adobe.com docs experience platform edge fundamentals configuring a csp.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals configuring a csp.html?lang=en.txt.  Configuring a CSP A Content Security Policy (CSP) is used to restrict the resources a browser is allowed to use. The CSP can also limit the functionality of script and style resources. Adobe Experience Platform Web SDK does not require a CSP, but adding one can reduce the attack surface to prevent against malicious attacks. The CSP needs to reflect how Platform Web SDK is deployed and configured. The following CSP shows what changes may be necessary for the SDK to function properly. Additional CSP settings will likely be required, depending on your specific environment. Content security policy example The following examples show how to configure a CSP. Allow access to the edge domain default-src 'self'; connect-src 'self' EDGE-DOMAIN In the above example, EDGE-DOMAIN should be replaced with the first-party domain. The first-party domain is configured for the edgeDomain setting. If no first-party domain has been configured, EDGE-DOMAIN should be replaced with *.adobedc.net. If visitor migration is turned on using idMigrationEnabled, the connect-src directive also needs to include *.demdex.net. Use NONCE to allow inline script and style elements Platform Web SDK can modify page content and must be approved to create inline script and style tags. To accomplish this, Adobe recommends using a nonce for the default-src CSP directive. A nonce is a server-generated cryptographically strong random token that is generated once per each unique page view. default-src 'nonce-SERVER-GENERATED-NONCE' In addition the CSP nonce needs to be added as an attribute to the Platform Web SDK base code script tag. Platform Web SDK will then use that nonce when adding inline script or style tags to the page: <script nonce=""SERVER-GENERATED-NONCE""> !function(n,o){o.forEach(function(o){n[o]||((n.__alloyNS=n.__alloyNS|| []).push(o),n[o]=function(){var u=arguments;return new Promise( function(i,l){n[o].q.push([i,l,u])})},n[o].q=[])})} (window,[""alloy""]); </script> If a nonce is not used, the other option is to add unsafe-inline to the script-src and style-src CSP directives: script-src 'unsafe-inline' style-src 'unsafe-inline' NOTE Adobe does not recommend specifying unsafe-inline because it allows for any script to run on the page, which limits the benefits of the CSP.  Business.Adobe.com resources   "
9,experienceleague.adobe.com docs experience platform edge identity overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge identity overview.html?lang=en.txt.  Identity data in the Platform Web SDK The Adobe Experience Platform Web SDK leverages Adobe Experience Cloud IDs (ECIDs) to track visitor behavior. Using ECIDs, you can ensure that each device has a unique identifier that can persist across multiple sessions, tying all the hits that occur during and across web sessions to a specific device. This document provides an overview of how to manage ECIDs using the Platform Web SDK. Tracking ECIDs using the SDK The Platform Web SDK assigns and tracks ECIDs through the use of cookies, with multiple available methods for configuring how these cookies are generated. When a new user arrives on your website, Adobe Experience Cloud Identity Service attempts to set a device identification cookie for that user. For first-time visitors, an ECID is generated and returned in the first response from the Adobe Experience Platform Edge Network. For repeat visitors, the ECID is retrieved from the kndctr_{YOUR-ORG-ID}_AdobeOrg_identity cookie and added to the payload by the Edge Network. Once the cookie containing the ECID has been set, each subsequent request generated by the Web SDK will include an encoded ECID in the kndctr_{YOUR-ORG-ID}_AdobeOrg_identity cookie. When using cookies for device identification, you have two options to interact with the Edge Network: Send data directly to the Edge Network domain adobedc.net. This method is referred to as third-party data collection. Create a CNAME on your own domain that points to adobedc.net. This method is referred to as first-party data collection. As explained in the sections below, the data collection method that you choose to use has a direct impact on cookie lifetime across browsers. Third-party data collection Third-party data collection involves sending data directly to the Edge Network domain adobedc.net. In recent years, web browsers have becoming increasingly restrictive in their handling of cookies set by third parties. Some browsers block third-party cookies by default. If you use third-party cookies to identify site visitors, the lifetime of those cookies is almost always shorter than what would be otherwise available using first-party cookies instead. In some cases, a third-party cookie will expire in as little as seven days. Additionally, when third-party data collection is used, some ad blockers restrict traffic to Adobe data collection endpoints altogether. First-party data collection First-party data collection involves setting cookies through a CNAME on your own domain that points to adobedc.net. While browsers have long treated cookies set by CNAME endpoints in a similar manner to those set by site-owned endpoints, recent changes implemented by browsers have created a distinction in how CNAME cookies are handled. While there are no browsers that currently block first-party CNAME cookies by default, some browsers restrict the lifetime of cookies set using a CNAME to just seven days. Effects of cookie lifespans on Adobe Experience Cloud applications Regardless of whether you choose first-party or third-party data collection, the length of time a cookie can persist has a direct impact on visitor counts in Adobe Analytics and Customer Journey Analytics. Additionally, end users may experience inconsistent personalization experiences when Adobe Target or Offer Decisioning is used on the site. For example, consider a situation where you have created a personalization experience that will promote any item to the home page if a user has viewed it three times over the last seven days. If an end user visits three times in a week and then does not return to the site for seven days, that use could be considered a new user when they return to the site because their cookies may have been deleted by a browser policy (depending on the browser they were using when they visited the site). If this occurs, your Analytics tool will treat the visitor as a new user even though they visited the site just a little over seven days ago. Additionally, any effort to personalize the experience for the user will begin again. First-party device IDs To account for the effects of cookie lifespans as outlined above, you can opt to set and manage your own device identifiers instead. See the guide on first-party device IDs for more information. Retrieving the ECID and region for the current user To retrieve the unique ECID for the current visitor, use the getIdentity command. For first-time visitors who don’t have an ECID yet, this command generates a new ECID. getIdentity also returns the region ID for the visitor. NOTE This method is typically used with custom solutions that require reading the Experience Cloud ID or need a location hint for Adobe Audience Manager. It is not used by a standard implementation. alloy(""getIdentity"") .then(function(result) {  // The command succeeded.  console.log(""ECID:"", result.identity.ECID);  console.log(""RegionId:"", result.edge.regionId); }) .catch(function(error) {  // The command failed.  // ""error"" will be an error object with additional information. }); Using identityMap Using an XDM identityMap field, you can identify a device/user using multiple identities, set their authentication state, and decide which identifier is considered the primary one. If no identifier has been set as primary, the primary defaults to be the ECID. identityMap fields are updated using the sentEvent command. alloy(""sendEvent"", { xdm: {  ""identityMap"": {  ""ID_NAMESPACE"": [ // Notice how each namespace can contain multiple identifiers.   {   ""id"": ""1234"",   ""authenticatedState"": ""ambiguous"",   ""primary"": true   }  ]  } } }); Each property within identityMap represents identities belonging to a particular identity namespace. The property name should be the identity namespace symbol, which you can find listed in the Adobe Experience Platform user interface under “Identities”. The property value should be an array of identities pertaining to that identity namespace. IMPORTANT The namespace ID passed in the identityMap is case sensitive. Make sure to use the correct namespace ID to avoid incomplete data collection. Each identity object in the identities array contains the following properties: Property Data type Description  id String (Required) The ID that you want to set for the given namespace. authenticationState String (Required) The authentication state of the ID. Possible values are ambiguous, authenticated, and loggedOut. primary Boolean Determines whether this identity should be used as a primary fragment in the profile. By default, the ECID is set as the primary identifier for the user. If omitted, this value defaults to false. Using the identityMap field to identify devices or users leads to the same result as using the setCustomerIDs method from the ID Service API. See the ID Service API documentation for more details. Migrating from Visitor API to ECID When migrating from using Visitor API, you can also migrate existing AMCV cookies. To enable ECID migration, set the idMigrationEnabled parameter in the configuration. ID migration enables the following use cases: When some pages of a domain are using Visitor API and other pages are using this SDK. To support this case, the SDK reads existing AMCV cookies and writes a new cookie with the existing ECID. Additionally, the SDK writes AMCV cookies so that if the ECID is obtained first on a page instrumented with the SDK, subsequent pages that are instrumented with Visitor API have the same ECID. When Adobe Experience Platform Web SDK is set up on a page that also has Visitor API. To support this case, if the AMCV cookie is not set, the SDK looks for Visitor API on the page and calls it to get the ECID. When the entire site is using Adobe Experience Platform Web SDK and does not have Visitor API, it is useful to migrate the ECIDs so that the return visitor information is retained. After the SDK is deployed with idMigrationEnabled for a period of time so that most of the visitor cookies are migrated, the setting can be turned off. Updating traits for migration When XDM formatted data is sent into Audience Manager this data will need to be converted into signals when migrating. Your traits will need to be updated to reflect the new keys that XDM provides. This process is made easier by using the BAAAM tool that Audience Manager has created. Use in event forwarding If you currently have event forwarding enabled and are using appmeasurement.js and visitor.js, you can keep the event-forwarding feature enabled and this won’t cause any issues. On the back end, Adobe fetches any AAM segments and adds them to the call to Analytics. If the call to Analytics contains those segments, Analytics won’t call Audience Manager to forward any data, so there isn’t any double data collection. There is also no need for Location Hint when using the Web SDK because the same segmentation endpoints are called in the backend. Business.Adobe.com resources   "
10,experienceleague.adobe.com docs experience platform edge extension action types.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge extension action types.html?lang=en.txt.  Action types After you configure the Adobe Experience Platform Web SDK tag extension, configure your action types. This page describes the available action types. Send Event Sends an event to Adobe Experience Platform so that Adobe Experience Platform can collect the data you send and act on that information. Select an instance (if you have more than one). Any data that you want to send can be sent in the XDM Data field. Use a JSON object that conforms to the structure of your XDM schema. This object can either be created on your page or through a Custom Code Data Element. There are a few other fields in the Send Event action type that could also be useful depending on your implementation. Please note that these fields are all optional. Type: This field allows you specify an event type that will be recorded in you XDM schema. See the documentation for more information on the default event types. Data: Data that does not match an XDM schema can be sent using this field. This field is useful if you are trying to update an Adobe Target profile or send Target Recommendations attributes. For examples view our documentation. Dataset ID: If you need to send data to a dataset other than the one you specified in your datastream, you can specify that dataset ID here. Document will unload: If you would like to make sure that the events reach the server even if the user navigates away from the page, check the Document will unload checkbox. This allows events to reach the server but responses are ignored. Render visual personalization decisions: If you want to render personalized content on your page, check the Render visual personalization decisions checkbox. You can also specify decision scopes and/or surfaces if necessary. See the personalization documentation for more information on rendering personalized content. Set Consent After you have received consent from your user, this consent must be communicated to the Adobe Experience Platform Web SDK by using the “Set Consent” action type. Currently, two types of standards are supported: “Adobe” and “IAB TCF.” See Supporting Customer Consent Preferences. When using Adobe version 2.0, only a data element value is supported. You will need to create a data element that resolves to the consent object. In this action, you are also provided with an optional field to include an Identity Map so that identities can be synced once consent is received. Syncing is useful when the consent is configured as “Pending” or “Out” because the consent call is likely the first call to fire. Reset Event Merge ID If you would like to reset your event merge ID on your page, you can do so with this action. To reset your ID, select the Merge ID you want to reset and fire the action as needed. What’s next After you set your actions, configure your data element types. Business.Adobe.com resources   "
11,experienceleague.adobe.com docs experience platform edge datastreams data enrichment weather reference.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge datastreams data enrichment weather reference.html?lang=en.txt.  Weather data field mappings Adobe has partnered with The Weather Company to bring the additional context of United States weather to the data collected via datastreams. You can use this data for analytics, targeting and segment creation in Experience Platform. This page lists all the available fields that you can use to enrich your audience data. The fields are broken up into three different groups that align to the field groups. Current Weather: The current weather conditions of the user, based on their location. This include current temperature, percipitation, cloud coverage, and more. Forecasted Weather: The forecast includes the 1,2,3,5,7 and 10 day forecast for the user location. Triggers: Triggers are specific combinations that map to different semantic weather conditions. There are three different types of weather triggers: Relative Triggers: Semantically meaningful conditions, such as cold or rainy weather. These can differ in their definitions between various climates. Product Triggers: Conditions that would lead to the purchase of different types of products. For example: cold weather forecasts could mean that purchases of rain coats are more likely. Severe Weather Triggers: Severe weather warnings, like winter storm or hurricane warnings. Current Weather The current weather conditions of the user, based on their location. Field Description XDM path  Temperature Dew Point Celsius The temperature which air must be cooled at constant pressure to reach saturation. The Dew Point is also an indirect measure of the humidity of the air. The Dew Point will never exceed the Temperature. When the Dewpoint and Temperature are equal, clouds or fog will typically form. The closer the values of Temperature and Dew Point, the higher the relative humidity. Range - -80 to 100 (°F) or -62 to 37 (°C). Temperature in degrees Celsius weather.current.temperatureDewPoint.celsius Temperature Dew Point Fahrenheit The temperature which air must be cooled at constant pressure to reach saturation. The Dew Point is also an indirect measure of the humidity of the air. The Dew Point will never exceed the Temperature. When the Dewpoint and Temperature are equal, clouds or fog will typically form. The closer the values of Temperature and Dew Point, the higher the relative humidity. Range - -80 to 100 (°F) or -62 to 37 (°C). Temperature in degrees Fahrenheit weather.current.temperatureDewPoint.fahrenheit Precipitation Last Hour Inches Rolling hour liquid precipitation amount. The amounts presented are a rolling time through the request time (now). Precipitation in inches weather.current.precip1Hour.inches Precipitation Last Hour Millimeters Rolling hour liquid precipitation amount. The amounts presented are a rolling time through the request time (now). Precipitation in millimeters weather.current.precip1Hour.millimeters Precipitation Last 24 Hours Inches Rolling twenty four hour liquid precipitation amount. The amounts presented are a rolling time through the request time (now). Precipitation in inches weather.current.precip24Hour.inches Precipitation Last 24 Hours Millimeters Rolling twenty four hour liquid precipitation amount. The amounts presented are a rolling time through the request time (now). Precipitation in millimeters weather.current.precip24Hour.millimeters Precipitation Last 6 Hours Inches Rolling six hour liquid precipitation amount. The amounts presented are a rolling time through the request time (now). Precipitation in inches weather.current.precip6Hour.inches Precipitation Last 6 Hours Millimeters Rolling six hour liquid precipitation amount. The amounts presented are a rolling time through the request time (now). Precipitation in millimeters weather.current.precip6Hour.millimeters Pressure Change Change in pressure in the last three hours in Millibars. weather.current.pressureChange Pressure Mean Sea Level Mean sea level pressure in millibars. In other words, the average barometric pressure at sea level.Range - Millibars precise to 1/10th mb. weather.current.pressureMeanSeaLevel Relative Humidity The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.current.relativeHumidity Snow Last Hour Centimeters One hour snowfall amount. The amounts presented are a rolling time through the request time (now). Snowfall in centimeters weather.current.snow1Hour.centimeters Snow Last Hour Inches One hour snowfall amount. The amounts presented are a rolling time through the request time (now). Snowfall in inches weather.current.snow1Hour.inches Snow 24 Hour Centimeters Twenty four hour snowfall amount. The amounts presented are a rolling time through the request time (now). Snowfall in centimeters weather.current.snow24Hour.centimeters Snow 24 Hour Inches Twenty four hour snowfall amount. The amounts presented are a rolling time through the request time (now). Snowfall in inches weather.current.snow24Hour.inches Snow Last 6 Hours Centimeters One hour snowfall amount. The amounts presented are a rolling time through the request time (now). Snowfall in centimeters weather.current.snow6Hour.centimeters Snow Last 6 Hours Inches One hour snowfall amount. The amounts presented are a rolling time through the request time (now). Snowfall in inches weather.current.snow6Hour.inches Sunset Time Sunset time in UTC. weather.current.sunsetTime Temperature Celsius Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.current.temperature.celsius Temperature Fahrenheit Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.current.temperature.fahrenheit Temperature Change 24 hour Celsius Change in temperature compared to the report 24 hours ago. Temperature in degrees Celsius weather.current.temperatureChange24Hour.celsius Temperature Change 24 hour Fahrenheit Change in temperature compared to the report 24 hours ago. Temperature in degrees Fahrenheit weather.current.temperatureChange24Hour.fahrenheit Temperature Feels Like Celsius An apparent temperature. It represents what the air temperature “feels like” on exposed human skin due to the combined effect of the wind chill or heat index.When the temperature is 65°F or higher, the Feels Like value represents the computed Heat Index. When the temperature is below 65°F, the Feels Like value represents the computed Wind Chill.Range -140 to 140. Temperature in degrees Celsius weather.current.temperatureFeelsLike.celsius Temperature Feels Like Fahrenheit An apparent temperature. It represents what the air temperature “feels like” on exposed human skin due to the combined effect of the wind chill or heat index.When the temperature is 65°F or higher, the Feels Like value represents the computed Heat Index. When the temperature is below 65°F, the Feels Like value represents the computed Wind Chill.Range -140 to 140. Temperature in degrees Fahrenheit weather.current.temperatureFeelsLike.fahrenheit Temperature Max Since 7 AM Celsius The maximum temperature since 7 A.M. local time. Temperature in degrees Celsius weather.current.temperatureMaxSince7Am.celsius Temperature Max Since 7 AM Fahrenheit The maximum temperature since 7 A.M. local time. Temperature in degrees Fahrenheit weather.current.temperatureMaxSince7Am.fahrenheit Temperature Min Last 24 Hours Celsius The minimum temperature in the last 24 hours. The 24 hour period is in reference to the request time (now). Temperature in degrees Celsius weather.current.temperatureMin24Hour.celsius Temperature Min Last 24 Hours Fahrenheit The minimum temperature in the last 24 hours. The 24 hour period is in reference to the request time (now). Temperature in degrees Fahrenheit weather.current.temperatureMin24Hour.fahrenheit Wind Direction The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.current.windDirection Wind Gust Kilometers per Hour This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.current.windGust.kilometersPerHour Wind Gust Miles per Hour This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.current.windGust.milesPerHour Wind Speed Kilometers per Hour The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.current.windSpeed.kilometersPerHour Wind Speed Miles per Hour The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.current.windSpeed.milesPerHour Forecasted Weather The forecasted weather for the user, based on location, at a specific point in time. Field Description XDM path  Day 1 Forecast Calendar Day Temperature Max Celsius Weather forecast for one day. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Celsius weather.forecast.day01Forecast.calendarDayTemperatureMax.celsius Day 1 Forecast Calendar Day Temperature Max Fahrenheit Weather forecast for one day. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.calendarDayTemperatureMax.fahrenheit Day 1 Forecast Calendar Day Temperature Min Celsius Weather forecast for one day. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Celsius weather.forecast.day01Forecast.calendarDayTemperatureMin.celsius Day 1 Forecast Calendar Day Temperature Min Fahrenheit Weather forecast for one day. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.calendarDayTemperatureMin.fahrenheit Day 1 Forecast Day Cloud Cover Miles Weather forecast for one day. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day01Forecast.day.cloudCover.inches Day 1 Forecast Day Cloud Cover Kilometers Weather forecast for one day. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day01Forecast.day.cloudCover.kilometers Day 1 Forecast Day Precipitation Chance Weather forecast for one day. Weather information for a daytime period. Probability that there will be precipitation (percentage). weather.forecast.day01Forecast.day.precipChance Day 1 Forecast Day Precipitation Type Weather forecast for one day. Weather information for a daytime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day01Forecast.day.precipType Day 1 Forecast Day QPF Inches Weather forecast for one day. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day01Forecast.day.qpf.inches Day 1 Forecast Day QPF Millimeters Weather forecast for one day. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day01Forecast.day.qpf.millimeters Day 1 Forecast Day QPF Snow Centimeters Weather forecast for one day. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day01Forecast.day.qpfSnow.centimeters Day 1 Forecast Day QPF Snow Inches Weather forecast for one day. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day01Forecast.day.qpfSnow.inches Day 1 Forecast Day Relative Humidity Weather forecast for one day. Weather information for a daytime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day01Forecast.day.relativeHumidity Day 1 Forecast Day Snow Range Weather forecast for one day. Weather information for a daytime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day01Forecast.day.snowRange Day 1 Forecast Day Temperature Celsius Weather forecast for one day. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day01Forecast.day.temperature.celsius Day 1 Forecast Day Temperature Fahrenheit Weather forecast for one day. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.day.temperature.fahrenheit Day 1 Forecast Day Temperature Heat Index Celsius Weather forecast for one day. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day01Forecast.day.temperatureHeatIndex.celsius Day 1 Forecast Day Temperature Heat Index Fahrenheit Weather forecast for one day. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.day.temperatureHeatIndex.fahrenheit Day 1 Forecast Day Temperature Wind Chill Celsius Weather forecast for one day. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day01Forecast.day.temperatureWindChill.celsius Day 1 Forecast Day Temperature Wind Chill Fahrenheit Weather forecast for one day. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.day.temperatureWindChill.fahrenheit Day 1 Forecast Day Thunder Index Weather forecast for one day. Weather information for a daytime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day01Forecast.day.thunderIndex Day 1 Forecast Day UV Index Weather forecast for one day. Weather information for a daytime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day01Forecast.day.uvIndex Day 1 Forecast Day Wind Direction Weather forecast for one day. Weather information for a daytime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day01Forecast.day.windDirection Day 1 Forecast Day Wind Gust Kilometers per Hour Weather forecast for one day. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day01Forecast.day.windGust.kilometersPerHour Day 1 Forecast Day Wind Gust Miles per Hour Weather forecast for one day. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day01Forecast.day.windGust.milesPerHour Day 1 Forecast Day Wind Speed Kilometers per Hour Weather forecast for one day. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day01Forecast.day.windSpeed.kilometersPerHour Day 1 Forecast Day Wind Speed Miles per Hour Weather forecast for one day. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day01Forecast.day.windSpeed.milesPerHour Day 1 Forecast Night Cloud Cover Miles Weather forecast for one day. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day01Forecast.night.cloudCover.inches Day 1 Forecast Night Cloud Cover Kilometers Weather forecast for one day. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day01Forecast.night.cloudCover.kilometers Day 1 Forecast Night Precipitation Chance Weather forecast for one day. Weather information for a nighttime period. Probability that there will be precipitation (percentage). weather.forecast.day01Forecast.night.precipChance Day 1 Forecast Night Precipitation Type Weather forecast for one day. Weather information for a nighttime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day01Forecast.night.precipType Day 1 Forecast Night QPF Inches Weather forecast for one day. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day01Forecast.night.qpf.inches Day 1 Forecast Night QPF Millimeters Weather forecast for one day. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day01Forecast.night.qpf.millimeters Day 1 Forecast Night QPF Snow Centimeters Weather forecast for one day. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day01Forecast.night.qpfSnow.centimeters Day 1 Forecast Night QPF Snow Inches Weather forecast for one day. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day01Forecast.night.qpfSnow.inches Day 1 Forecast Night Relative Humidity Weather forecast for one day. Weather information for a nighttime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day01Forecast.night.relativeHumidity Day 1 Forecast Night Snow Range Weather forecast for one day. Weather information for a nighttime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day01Forecast.night.snowRange Day 1 Forecast Night Temperature Celsius Weather forecast for one day. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day01Forecast.night.temperature.celsius Day 1 Forecast Night Temperature Fahrenheit Weather forecast for one day. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.night.temperature.fahrenheit Day 1 Forecast Night Temperature Heat Index Celsius Weather forecast for one day. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day01Forecast.night.temperatureHeatIndex.celsius Day 1 Forecast Night Temperature Heat Index Fahrenheit Weather forecast for one day. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.night.temperatureHeatIndex.fahrenheit Day 1 Forecast Night Temperature Wind Chill Celsius Weather forecast for one day. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day01Forecast.night.temperatureWindChill.celsius Day 1 Forecast Night Temperature Wind Chill Fahrenheit Weather forecast for one day. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day01Forecast.night.temperatureWindChill.fahrenheit Day 1 Forecast Night Thunder Index Weather forecast for one day. Weather information for a nighttime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day01Forecast.night.thunderIndex Day 1 Forecast Night UV Index Weather forecast for one day. Weather information for a nighttime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day01Forecast.night.uvIndex Day 1 Forecast Night Wind Direction Weather forecast for one day. Weather information for a nighttime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day01Forecast.night.windDirection Day 1 Forecast Night Wind Gust Kilometers per Hour Weather forecast for one day. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day01Forecast.night.windGust.kilometersPerHour Day 1 Forecast Night Wind Gust Miles per Hour Weather forecast for one day. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day01Forecast.night.windGust.milesPerHour Day 1 Forecast Night Wind Speed Kilometers per Hour Weather forecast for one day. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day01Forecast.night.windSpeed.kilometersPerHour Day 1 Forecast Night Wind Speed Miles per Hour Weather forecast for one day. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day01Forecast.night.windSpeed.milesPerHour Day 1 Forecast QPF Inches Weather forecast for one day. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day01Forecast.qpf.inches Day 1 Forecast QPF Millimeters Weather forecast for one day. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day01Forecast.qpf.millimeters Day 1 Forecast QPF Snow Centimeters Weather forecast for one day. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day01Forecast.qpfSnow.centimeters Day 1 Forecast QPF Snow Inches Weather forecast for one day. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day01Forecast.qpfSnow.inches Day 2 Forecast Calendar Day Temperature Max Celsius Weather forecast for two days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Celsius weather.forecast.day02Forecast.calendarDayTemperatureMax.celsius Day 2 Forecast Calendar Day Temperature Max Fahrenheit Weather forecast for two days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.calendarDayTemperatureMax.fahrenheit Day 2 Forecast Calendar Day Temperature Min Celsius Weather forecast for two days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Celsius weather.forecast.day02Forecast.calendarDayTemperatureMin.celsius Day 2 Forecast Calendar Day Temperature Min Fahrenheit Weather forecast for two days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.calendarDayTemperatureMin.fahrenheit Day 2 Forecast Day Cloud Cover Miles Weather forecast for two days. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day02Forecast.day.cloudCover.inches Day 2 Forecast Day Cloud Cover Kilometers Weather forecast for two days. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day02Forecast.day.cloudCover.kilometers Day 2 Forecast Day Precipitation Chance Weather forecast for two days. Weather information for a daytime period. Probability that there will be precipitation (percentage). weather.forecast.day02Forecast.day.precipChance Day 2 Forecast Day Precipitation Type Weather forecast for two days. Weather information for a daytime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day02Forecast.day.precipType Day 2 Forecast Day QPF Inches Weather forecast for two days. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day02Forecast.day.qpf.inches Day 2 Forecast Day QPF Millimeters Weather forecast for two days. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day02Forecast.day.qpf.millimeters Day 2 Forecast Day QPF Snow Centimeters Weather forecast for two days. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day02Forecast.day.qpfSnow.centimeters Day 2 Forecast Day QPF Snow Inches Weather forecast for two days. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day02Forecast.day.qpfSnow.inches Day 2 Forecast Day Relative Humidity Weather forecast for two days. Weather information for a daytime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day02Forecast.day.relativeHumidity Day 2 Forecast Day Snow Range Weather forecast for two days. Weather information for a daytime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day02Forecast.day.snowRange Day 2 Forecast Day Temperature Celsius Weather forecast for two days. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day02Forecast.day.temperature.celsius Day 2 Forecast Day Temperature Fahrenheit Weather forecast for two days. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.day.temperature.fahrenheit Day 2 Forecast Day Temperature Heat Index Celsius Weather forecast for two days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day02Forecast.day.temperatureHeatIndex.celsius Day 2 Forecast Day Temperature Heat Index Fahrenheit Weather forecast for two days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.day.temperatureHeatIndex.fahrenheit Day 2 Forecast Day Temperature Wind Chill Celsius Weather forecast for two days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day02Forecast.day.temperatureWindChill.celsius Day 2 Forecast Day Temperature Wind Chill Fahrenheit Weather forecast for two days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.day.temperatureWindChill.fahrenheit Day 2 Forecast Day Thunder Index Weather forecast for two days. Weather information for a daytime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day02Forecast.day.thunderIndex Day 2 Forecast Day UV Index Weather forecast for two days. Weather information for a daytime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day02Forecast.day.uvIndex Day 2 Forecast Day Wind Direction Weather forecast for two days. Weather information for a daytime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day02Forecast.day.windDirection Day 2 Forecast Day Wind Gust Kilometers per Hour Weather forecast for two days. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day02Forecast.day.windGust.kilometersPerHour Day 2 Forecast Day Wind Gust Miles per Hour Weather forecast for two days. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day02Forecast.day.windGust.milesPerHour Day 2 Forecast Day Wind Speed Kilometers per Hour Weather forecast for two days. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day02Forecast.day.windSpeed.kilometersPerHour Day 2 Forecast Day Wind Speed Miles per Hour Weather forecast for two days. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day02Forecast.day.windSpeed.milesPerHour Day 2 Forecast Night Cloud Cover Miles Weather forecast for two days. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day02Forecast.night.cloudCover.inches Day 2 Forecast Night Cloud Cover Kilometers Weather forecast for two days. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day02Forecast.night.cloudCover.kilometers Day 2 Forecast Night Precipitation Chance Weather forecast for two days. Weather information for a nighttime period. Probability that there will be precipitation (percentage). weather.forecast.day02Forecast.night.precipChance Day 2 Forecast Night Precipitation Type Weather forecast for two days. Weather information for a nighttime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day02Forecast.night.precipType Day 2 Forecast Night QPF Inches Weather forecast for two days. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day02Forecast.night.qpf.inches Day 2 Forecast Night QPF Millimeters Weather forecast for two days. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day02Forecast.night.qpf.millimeters Day 2 Forecast Night QPF Snow Centimeters Weather forecast for two days. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day02Forecast.night.qpfSnow.centimeters Day 2 Forecast Night QPF Snow Inches Weather forecast for two days. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day02Forecast.night.qpfSnow.inches Day 2 Forecast Night Relative Humidity Weather forecast for two days. Weather information for a nighttime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day02Forecast.night.relativeHumidity Day 2 Forecast Night Snow Range Weather forecast for two days. Weather information for a nighttime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day02Forecast.night.snowRange Day 2 Forecast Night Temperature Celsius Weather forecast for two days. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day02Forecast.night.temperature.celsius Day 2 Forecast Night Temperature Fahrenheit Weather forecast for two days. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.night.temperature.fahrenheit Day 2 Forecast Night Temperature Heat Index Celsius Weather forecast for two days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day02Forecast.night.temperatureHeatIndex.celsius Day 2 Forecast Night Temperature Heat Index Fahrenheit Weather forecast for two days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.night.temperatureHeatIndex.fahrenheit Day 2 Forecast Night Temperature Wind Chill Celsius Weather forecast for two days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day02Forecast.night.temperatureWindChill.celsius Day 2 Forecast Night Temperature Wind Chill Fahrenheit Weather forecast for two days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day02Forecast.night.temperatureWindChill.fahrenheit Day 2 Forecast Night Thunder Index Weather forecast for two days. Weather information for a nighttime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day02Forecast.night.thunderIndex Day 2 Forecast Night UV Index Weather forecast for two days. Weather information for a nighttime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day02Forecast.night.uvIndex Day 2 Forecast Night Wind Direction Weather forecast for two days. Weather information for a nighttime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day02Forecast.night.windDirection Day 2 Forecast Night Wind Gust Kilometers per Hour Weather forecast for two days. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day02Forecast.night.windGust.kilometersPerHour Day 2 Forecast Night Wind Gust Miles per Hour Weather forecast for two days. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day02Forecast.night.windGust.milesPerHour Day 2 Forecast Night Wind Speed Kilometers per Hour Weather forecast for two days. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day02Forecast.night.windSpeed.kilometersPerHour Day 2 Forecast Night Wind Speed Miles per Hour Weather forecast for two days. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day02Forecast.night.windSpeed.milesPerHour Day 2 Forecast QPF Inches Weather forecast for two days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day02Forecast.qpf.inches Day 2 Forecast QPF Millimeters Weather forecast for two days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day02Forecast.qpf.millimeters Day 2 Forecast QPF Snow Centimeters Weather forecast for two days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day02Forecast.qpfSnow.centimeters Day 2 Forecast QPF Snow Inches Weather forecast for two days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day02Forecast.qpfSnow.inches Day 3 Forecast Calendar Day Temperature Max Celsius Weather forecast for three days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Celsius weather.forecast.day03Forecast.calendarDayTemperatureMax.celsius Day 3 Forecast Calendar Day Temperature Max Fahrenheit Weather forecast for three days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.calendarDayTemperatureMax.fahrenheit Day 3 Forecast Calendar Day Temperature Min Celsius Weather forecast for three days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Celsius weather.forecast.day03Forecast.calendarDayTemperatureMin.celsius Day 3 Forecast Calendar Day Temperature Min Fahrenheit Weather forecast for three days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.calendarDayTemperatureMin.fahrenheit Day 3 Forecast Day Cloud Cover Miles Weather forecast for three days. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day03Forecast.day.cloudCover.inches Day 3 Forecast Day Cloud Cover Kilometers Weather forecast for three days. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day03Forecast.day.cloudCover.kilometers Day 3 Forecast Day Precipitation Chance Weather forecast for three days. Weather information for a daytime period. Probability that there will be precipitation (percentage). weather.forecast.day03Forecast.day.precipChance Day 3 Forecast Day Precipitation Type Weather forecast for three days. Weather information for a daytime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day03Forecast.day.precipType Day 3 Forecast Day QPF Inches Weather forecast for three days. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day03Forecast.day.qpf.inches Day 3 Forecast Day QPF Millimeters Weather forecast for three days. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day03Forecast.day.qpf.millimeters Day 3 Forecast Day QPF Snow Centimeters Weather forecast for three days. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day03Forecast.day.qpfSnow.centimeters Day 3 Forecast Day QPF Snow Inches Weather forecast for three days. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day03Forecast.day.qpfSnow.inches Day 3 Forecast Day Relative Humidity Weather forecast for three days. Weather information for a daytime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day03Forecast.day.relativeHumidity Day 3 Forecast Day Snow Range Weather forecast for three days. Weather information for a daytime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day03Forecast.day.snowRange Day 3 Forecast Day Temperature Celsius Weather forecast for three days. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day03Forecast.day.temperature.celsius Day 3 Forecast Day Temperature Fahrenheit Weather forecast for three days. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.day.temperature.fahrenheit Day 3 Forecast Day Temperature Heat Index Celsius Weather forecast for three days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day03Forecast.day.temperatureHeatIndex.celsius Day 3 Forecast Day Temperature Heat Index Fahrenheit Weather forecast for three days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.day.temperatureHeatIndex.fahrenheit Day 3 Forecast Day Temperature Wind Chill Celsius Weather forecast for three days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day03Forecast.day.temperatureWindChill.celsius Day 3 Forecast Day Temperature Wind Chill Fahrenheit Weather forecast for three days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.day.temperatureWindChill.fahrenheit Day 3 Forecast Day Thunder Index Weather forecast for three days. Weather information for a daytime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day03Forecast.day.thunderIndex Day 3 Forecast Day UV Index Weather forecast for three days. Weather information for a daytime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day03Forecast.day.uvIndex Day 3 Forecast Day Wind Direction Weather forecast for three days. Weather information for a daytime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day03Forecast.day.windDirection Day 3 Forecast Day Wind Gust Kilometers per Hour Weather forecast for three days. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day03Forecast.day.windGust.kilometersPerHour Day 3 Forecast Day Wind Gust Miles per Hour Weather forecast for three days. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day03Forecast.day.windGust.milesPerHour Day 3 Forecast Day Wind Speed Kilometers per Hour Weather forecast for three days. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day03Forecast.day.windSpeed.kilometersPerHour Day 3 Forecast Day Wind Speed Miles per Hour Weather forecast for three days. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day03Forecast.day.windSpeed.milesPerHour Day 3 Forecast Night Cloud Cover Miles Weather forecast for three days. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day03Forecast.night.cloudCover.inches Day 3 Forecast Night Cloud Cover Kilometers Weather forecast for three days. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day03Forecast.night.cloudCover.kilometers Day 3 Forecast Night Precipitation Chance Weather forecast for three days. Weather information for a nighttime period. Probability that there will be precipitation (percentage). weather.forecast.day03Forecast.night.precipChance Day 3 Forecast Night Precipitation Type Weather forecast for three days. Weather information for a nighttime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day03Forecast.night.precipType Day 3 Forecast Night QPF Inches Weather forecast for three days. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day03Forecast.night.qpf.inches Day 3 Forecast Night QPF Millimeters Weather forecast for three days. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day03Forecast.night.qpf.millimeters Day 3 Forecast Night QPF Snow Centimeters Weather forecast for three days. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day03Forecast.night.qpfSnow.centimeters Day 3 Forecast Night QPF Snow Inches Weather forecast for three days. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day03Forecast.night.qpfSnow.inches Day 3 Forecast Night Relative Humidity Weather forecast for three days. Weather information for a nighttime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day03Forecast.night.relativeHumidity Day 3 Forecast Night Snow Range Weather forecast for three days. Weather information for a nighttime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day03Forecast.night.snowRange Day 3 Forecast Night Temperature Celsius Weather forecast for three days. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day03Forecast.night.temperature.celsius Day 3 Forecast Night Temperature Fahrenheit Weather forecast for three days. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.night.temperature.fahrenheit Day 3 Forecast Night Temperature Heat Index Celsius Weather forecast for three days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day03Forecast.night.temperatureHeatIndex.celsius Day 3 Forecast Night Temperature Heat Index Fahrenheit Weather forecast for three days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.night.temperatureHeatIndex.fahrenheit Day 3 Forecast Night Temperature Wind Chill Celsius Weather forecast for three days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day03Forecast.night.temperatureWindChill.celsius Day 3 Forecast Night Temperature Wind Chill Fahrenheit Weather forecast for three days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day03Forecast.night.temperatureWindChill.fahrenheit Day 3 Forecast Night Thunder Index Weather forecast for three days. Weather information for a nighttime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day03Forecast.night.thunderIndex Day 3 Forecast Night UV Index Weather forecast for three days. Weather information for a nighttime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day03Forecast.night.uvIndex Day 3 Forecast Night Wind Direction Weather forecast for three days. Weather information for a nighttime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day03Forecast.night.windDirection Day 3 Forecast Night Wind Gust Kilometers per Hour Weather forecast for three days. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day03Forecast.night.windGust.kilometersPerHour Day 3 Forecast Night Wind Gust Miles per Hour Weather forecast for three days. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day03Forecast.night.windGust.milesPerHour Day 3 Forecast Night Wind Speed Kilometers per Hour Weather forecast for three days. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day03Forecast.night.windSpeed.kilometersPerHour Day 3 Forecast Night Wind Speed Miles per Hour Weather forecast for three days. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day03Forecast.night.windSpeed.milesPerHour Day 3 Forecast QPF Inches Weather forecast for three days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day03Forecast.qpf.inches Day 3 Forecast QPF Millimeters Weather forecast for three days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day03Forecast.qpf.millimeters Day 3 Forecast QPF Snow Centimeters Weather forecast for three days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day03Forecast.qpfSnow.centimeters Day 3 Forecast QPF Snow Inches Weather forecast for three days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day03Forecast.qpfSnow.inches Day 5 Forecast Calendar Day Temperature Max Celsius Weather forecast for five days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Celsius weather.forecast.day05Forecast.calendarDayTemperatureMax.celsius Day 5 Forecast Calendar Day Temperature Max Fahrenheit Weather forecast for five days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.calendarDayTemperatureMax.fahrenheit Day 5 Forecast Calendar Day Temperature Min Celsius Weather forecast for five days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Celsius weather.forecast.day05Forecast.calendarDayTemperatureMin.celsius Day 5 Forecast Calendar Day Temperature Min Fahrenheit Weather forecast for five days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.calendarDayTemperatureMin.fahrenheit Day 5 Forecast Day Cloud Cover Miles Weather forecast for five days. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day05Forecast.day.cloudCover.inches Day 5 Forecast Day Cloud Cover Kilometers Weather forecast for five days. Weather information for a daytime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day05Forecast.day.cloudCover.kilometers Day 5 Forecast Day Precipitation Chance Weather forecast for five days. Weather information for a daytime period. Probability that there will be precipitation (percentage). weather.forecast.day05Forecast.day.precipChance Day 5 Forecast Day Precipitation Type Weather forecast for five days. Weather information for a daytime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day05Forecast.day.precipType Day 5 Forecast Day QPF Inches Weather forecast for five days. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day05Forecast.day.qpf.inches Day 5 Forecast Day QPF Millimeters Weather forecast for five days. Weather information for a daytime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day05Forecast.day.qpf.millimeters Day 5 Forecast Day QPF Snow Centimeters Weather forecast for five days. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day05Forecast.day.qpfSnow.centimeters Day 5 Forecast Day QPF Snow Inches Weather forecast for five days. Weather information for a daytime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day05Forecast.day.qpfSnow.inches Day 5 Forecast Day Relative Humidity Weather forecast for five days. Weather information for a daytime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day05Forecast.day.relativeHumidity Day 5 Forecast Day Snow Range Weather forecast for five days. Weather information for a daytime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day05Forecast.day.snowRange Day 5 Forecast Day Temperature Celsius Weather forecast for five days. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day05Forecast.day.temperature.celsius Day 5 Forecast Day Temperature Fahrenheit Weather forecast for five days. Weather information for a daytime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.day.temperature.fahrenheit Day 5 Forecast Day Temperature Heat Index Celsius Weather forecast for five days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day05Forecast.day.temperatureHeatIndex.celsius Day 5 Forecast Day Temperature Heat Index Fahrenheit Weather forecast for five days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.day.temperatureHeatIndex.fahrenheit Day 5 Forecast Day Temperature Wind Chill Celsius Weather forecast for five days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day05Forecast.day.temperatureWindChill.celsius Day 5 Forecast Day Temperature Wind Chill Fahrenheit Weather forecast for five days. Weather information for a daytime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.day.temperatureWindChill.fahrenheit Day 5 Forecast Day Thunder Index Weather forecast for five days. Weather information for a daytime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day05Forecast.day.thunderIndex Day 5 Forecast Day UV Index Weather forecast for five days. Weather information for a daytime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day05Forecast.day.uvIndex Day 5 Forecast Day Wind Direction Weather forecast for five days. Weather information for a daytime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day05Forecast.day.windDirection Day 5 Forecast Day Wind Gust Kilometers per Hour Weather forecast for five days. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day05Forecast.day.windGust.kilometersPerHour Day 5 Forecast Day Wind Gust Miles per Hour Weather forecast for five days. Weather information for a daytime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day05Forecast.day.windGust.milesPerHour Day 5 Forecast Day Wind Speed Kilometers per Hour Weather forecast for five days. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day05Forecast.day.windSpeed.kilometersPerHour Day 5 Forecast Day Wind Speed Miles per Hour Weather forecast for five days. Weather information for a daytime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day05Forecast.day.windSpeed.milesPerHour Day 5 Forecast Night Cloud Cover Miles Weather forecast for five days. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day05Forecast.night.cloudCover.inches Day 5 Forecast Night Cloud Cover Kilometers Weather forecast for five days. Weather information for a nighttime period. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day05Forecast.night.cloudCover.kilometers Day 5 Forecast Night Precipitation Chance Weather forecast for five days. Weather information for a nighttime period. Probability that there will be precipitation (percentage). weather.forecast.day05Forecast.night.precipChance Day 5 Forecast Night Precipitation Type Weather forecast for five days. Weather information for a nighttime period. The form of precipitation that could fall (rain, snow, sleet, etc). weather.forecast.day05Forecast.night.precipType Day 5 Forecast Night QPF Inches Weather forecast for five days. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day05Forecast.night.qpf.inches Day 5 Forecast Night QPF Millimeters Weather forecast for five days. Weather information for a nighttime period. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day05Forecast.night.qpf.millimeters Day 5 Forecast Night QPF Snow Centimeters Weather forecast for five days. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day05Forecast.night.qpfSnow.centimeters Day 5 Forecast Night QPF Snow Inches Weather forecast for five days. Weather information for a nighttime period. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day05Forecast.night.qpfSnow.inches Day 5 Forecast Night Relative Humidity Weather forecast for five days. Weather information for a nighttime period. The relative humidity of the air, which is defined as the ratio of the amount of water vapor in the air to the amount of vapor required to bring the air to saturation at a constant temperature. Relative humidity is always expressed as a percentage.Range - 0 to 100. weather.forecast.day05Forecast.night.relativeHumidity Day 5 Forecast Night Snow Range Weather forecast for five days. Weather information for a nighttime period. Bucket of potential snowfall (1-3"", 3-6"" etc). weather.forecast.day05Forecast.night.snowRange Day 5 Forecast Night Temperature Celsius Weather forecast for five days. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Celsius weather.forecast.day05Forecast.night.temperature.celsius Day 5 Forecast Night Temperature Fahrenheit Weather forecast for five days. Weather information for a nighttime period. Temperature in defined unit of measure. Range -140 to 140. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.night.temperature.fahrenheit Day 5 Forecast Night Temperature Heat Index Celsius Weather forecast for five days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Celsius weather.forecast.day05Forecast.night.temperatureHeatIndex.celsius Day 5 Forecast Night Temperature Heat Index Fahrenheit Weather forecast for five days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and humidity. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.night.temperatureHeatIndex.fahrenheit Day 5 Forecast Night Temperature Wind Chill Celsius Weather forecast for five days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Celsius weather.forecast.day05Forecast.night.temperatureWindChill.celsius Day 5 Forecast Night Temperature Wind Chill Fahrenheit Weather forecast for five days. Weather information for a nighttime period. Temperature as it would feel to a person exposed based on temperature and wind speed. Temperature in degrees Fahrenheit weather.forecast.day05Forecast.night.temperatureWindChill.fahrenheit Day 5 Forecast Night Thunder Index Weather forecast for five days. Weather information for a nighttime period. Index of the probability of thunderstorms impacting an area. 0 (no thunder to 5 (high risk of severe thunderstorms). weather.forecast.day05Forecast.night.thunderIndex Day 5 Forecast Night UV Index Weather forecast for five days. Weather information for a nighttime period. Maximum UV index for the 12 hour forecast period. weather.forecast.day05Forecast.night.uvIndex Day 5 Forecast Night Wind Direction Weather forecast for five days. Weather information for a nighttime period. The magnetic wind direction from which the wind blows expressed in degrees. The magnetic direction varies from 0 to 359 degrees, where 0° indicates the North, 90° the East, 180° the South, 270° the West, and so forth.Range - 0<=wind_dire_deg<=350, in 10 degree intervals. weather.forecast.day05Forecast.night.windDirection Day 5 Forecast Night Wind Gust Kilometers per Hour Weather forecast for five days. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in kilometers per hour weather.forecast.day05Forecast.night.windGust.kilometersPerHour Day 5 Forecast Night Wind Gust Miles per Hour Weather forecast for five days. Weather information for a nighttime period. This data field contains information about sudden and temporary variations of the average Wind Speed. The report always shows the maximum wind gust speed recorded during the observation period. It is a required display field if Wind Speed is shown. The speed of the gust can be expressed in miles per hour or kilometers per hour. Wind speed in miles per hour weather.forecast.day05Forecast.night.windGust.milesPerHour Day 5 Forecast Night Wind Speed Kilometers per Hour Weather forecast for five days. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day05Forecast.night.windSpeed.kilometersPerHour Day 5 Forecast Night Wind Speed Miles per Hour Weather forecast for five days. Weather information for a nighttime period. The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the current conditions corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day05Forecast.night.windSpeed.milesPerHour Day 5 Forecast QPF Inches Weather forecast for five days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in inches weather.forecast.day05Forecast.qpf.inches Day 5 Forecast QPF Millimeters Weather forecast for five days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 12 or 24 hour period. Measured in millimeters. Precipitation in millimeters weather.forecast.day05Forecast.qpf.millimeters Day 5 Forecast QPF Snow Centimeters Weather forecast for five days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day05Forecast.qpfSnow.centimeters Day 5 Forecast QPF Snow Inches Weather forecast for five days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day05Forecast.qpfSnow.inches Day 7 Forecast Calendar Day Temperature Max Celsius Weather forecast for seven days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Celsius weather.forecast.day07Forecast.calendarDayTemperatureMax.celsius Day 7 Forecast Calendar Day Temperature Max Fahrenheit Weather forecast for seven days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day07Forecast.calendarDayTemperatureMax.fahrenheit Day 7 Forecast Calendar Day Temperature Min Celsius Weather forecast for seven days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Celsius weather.forecast.day07Forecast.calendarDayTemperatureMin.celsius Day 7 Forecast Calendar Day Temperature Min Fahrenheit Weather forecast for seven days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day07Forecast.calendarDayTemperatureMin.fahrenheit Day 7 Forecast Cloud Cover Miles Weather forecast for seven days. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day07Forecast.cloudCover.inches Day 7 Forecast Cloud Cover Kilometers Weather forecast for seven days. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day07Forecast.cloudCover.kilometers Day 7 Forecast QPF Inches Weather forecast for seven days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 24 hour period. Precipitation in inches weather.forecast.day07Forecast.qpf.inches Day 7 Forecast QPF Millimeters Weather forecast for seven days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 24 hour period. Precipitation in millimeters weather.forecast.day07Forecast.qpf.millimeters Day 7 Forecast QPF Snow Centimeters Weather forecast for seven days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day07Forecast.qpfSnow.centimeters Day 7 Forecast QPF Snow Inches Weather forecast for seven days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day07Forecast.qpfSnow.inches Day 7 Forecast UV Index Weather forecast for seven days. Maximum UV index for the 12 hour forecast period. weather.forecast.day07Forecast.uvIndex Day 7 Forecast Wind Direction Weather forecast for seven days. Average wind direction in magnetic notation. weather.forecast.day07Forecast.windDirection Day 7 Forecast Wind Speed Kilometers per Hour Weather forecast for seven days. The forecast of the maximum sustained wind speed over the 12 hour forecast period.The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the forecast corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day07Forecast.windSpeed.kilometersPerHour Day 7 Forecast Wind Speed Miles per Hour Weather forecast for seven days. The forecast of the maximum sustained wind speed over the 12 hour forecast period.The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the forecast corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day07Forecast.windSpeed.milesPerHour Day 10 Forecast Calendar Day Temperature Max Celsius Weather forecast for ten days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Celsius weather.forecast.day10Forecast.calendarDayTemperatureMax.celsius Day 10 Forecast Calendar Day Temperature Max Fahrenheit Weather forecast for ten days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day10Forecast.calendarDayTemperatureMax.fahrenheit Day 10 Forecast Calendar Day Temperature Min Celsius Weather forecast for ten days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Celsius weather.forecast.day10Forecast.calendarDayTemperatureMin.celsius Day 10 Forecast Calendar Day Temperature Min Fahrenheit Weather forecast for ten days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day10Forecast.calendarDayTemperatureMin.fahrenheit Day 10 Forecast Cloud Cover Miles Weather forecast for ten days. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day10Forecast.cloudCover.inches Day 10 Forecast Cloud Cover Kilometers Weather forecast for ten days. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day10Forecast.cloudCover.kilometers Day 10 Forecast QPF Inches Weather forecast for ten days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 24 hour period. Precipitation in inches weather.forecast.day10Forecast.qpf.inches Day 10 Forecast QPF Millimeters Weather forecast for ten days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 24 hour period. Precipitation in millimeters weather.forecast.day10Forecast.qpf.millimeters Day 10 Forecast QPF Snow Centimeters Weather forecast for ten days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day10Forecast.qpfSnow.centimeters Day 10 Forecast QPF Snow Inches Weather forecast for ten days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day10Forecast.qpfSnow.inches Day 10 Forecast UV Index Weather forecast for ten days. Maximum UV index for the 12 hour forecast period. weather.forecast.day10Forecast.uvIndex Day 10 Forecast Wind Direction Weather forecast for ten days. Average wind direction in magnetic notation. weather.forecast.day10Forecast.windDirection Day 10 Forecast Wind Speed Kilometers per Hour Weather forecast for ten days. The forecast of the maximum sustained wind speed over the 12 hour forecast period.The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the forecast corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day10Forecast.windSpeed.kilometersPerHour Day 10 Forecast Wind Speed Miles per Hour Weather forecast for ten days. The forecast of the maximum sustained wind speed over the 12 hour forecast period.The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the forecast corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day10Forecast.windSpeed.milesPerHour Day 14 Forecast Calendar Day Temperature Max Celsius Weather forecast for fourteen days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Celsius weather.forecast.day14Forecast.calendarDayTemperatureMax.celsius Day 14 Forecast Calendar Day Temperature Max Fahrenheit Weather forecast for fourteen days. The midnight to midnight daily maximum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day14Forecast.calendarDayTemperatureMax.fahrenheit Day 14 Forecast Calendar Day Temperature Min Celsius Weather forecast for fourteen days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Celsius weather.forecast.day14Forecast.calendarDayTemperatureMin.celsius Day 14 Forecast Calendar Day Temperature Min Fahrenheit Weather forecast for fourteen days. The midnight to midnight daily minimum temperature for the given day. Temperature in degrees Fahrenheit weather.forecast.day14Forecast.calendarDayTemperatureMin.fahrenheit Day 14 Forecast Cloud Cover Miles Weather forecast for fourteen days. Daytime average cloud cover expressed as a percentage. Distance in miles. weather.forecast.day14Forecast.cloudCover.inches Day 14 Forecast Cloud Cover Kilometers Weather forecast for fourteen days. Daytime average cloud cover expressed as a percentage. Distance in kilometers. weather.forecast.day14Forecast.cloudCover.kilometers Day 14 Forecast QPF Inches Weather forecast for fourteen days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 24 hour period. Precipitation in inches weather.forecast.day14Forecast.qpf.inches Day 14 Forecast QPF Millimeters Weather forecast for fourteen days. The forecasted measurable precipitation (liquid or liquid equivalent) during the 24 hour period. Precipitation in millimeters weather.forecast.day14Forecast.qpf.millimeters Day 14 Forecast QPF Snow Centimeters Weather forecast for fourteen days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in centimeters weather.forecast.day14Forecast.qpfSnow.centimeters Day 14 Forecast QPF Snow Inches Weather forecast for fourteen days. The forecasted measurable precipitation as snow during the 12 or 24 hour forecast period. Measured in centimeters. Snowfall in inches weather.forecast.day14Forecast.qpfSnow.inches Day 14 Forecast UV Index Weather forecast for fourteen days. Maximum UV index for the 12 hour forecast period. weather.forecast.day14Forecast.uvIndex Day 14 Forecast Wind Direction Weather forecast for fourteen days. Average wind direction in magnetic notation. weather.forecast.day14Forecast.windDirection Day 14 Forecast Wind Speed Kilometers per Hour Weather forecast for fourteen days. The forecast of the maximum sustained wind speed over the 12 hour forecast period.The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the forecast corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in kilometers per hour weather.forecast.day14Forecast.windSpeed.kilometersPerHour Day 14 Forecast Wind Speed Miles per Hour Weather forecast for fourteen days. The forecast of the maximum sustained wind speed over the 12 hour forecast period.The wind is treated as a vector; hence, winds must have direction and magnitude (speed). The wind information reported in the forecast corresponds to a 10-minute average called the sustained wind speed. Sudden or brief variations in the wind speed are known as “wind gusts” and are reported in a separate data field. Wind directions are always expressed as “from whence the wind blows” meaning that a North wind blows from North to South. If you face North in a North wind the wind is at your face. Face southward and the North wind is at your back. Wind speed in miles per hour weather.forecast.day14Forecast.windSpeed.milesPerHour Triggers Triggers define semantic weather condition based on various inputs. Field Description XDM path  Product Triggers Indicates when conditions are suitable for driving sales for certain categories of products. They are mapped to integer itendities. A full list can be obtained from IBM. weather.productTriggers Relative Triggers Relative conditions based on human perception. Things like Hot or Cold. They are mapped to integer itendities. A full list can be obtained from IBM. weather.relativeTriggers Severe Weather Triggers Indicates various severe weather conditions like Hurricanes or excessive rain. weather.severeTriggers  Business.Adobe.com resources   "
12,experienceleague.adobe.com docs experience platform edge personalization adobe target web sdk atjs comparison.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target web sdk atjs comparison.html?lang=en.txt.  Comparing the at.js library to the Web SDK Overview This article provides an overview of the differences between the at.js library and the Experience Plaform Web SDK. Installing the libraries Installing at.js We allow our customers to download the library directly from Adobe Experience Cloud, Implementation tab. The at.js library is customized with settings that the customer has like: clientCode, imsOrgId, etc. Installing the Web SDK The prebuilt version is available on a CDN. You can reference the library on the CDN directly on your page, or download and host it on your own infrastructure. It is available in minified and unminified formats. The unminified version is helpful for debugging purposes. URL structure: https://cdn1.adoberesources.net/alloy/[VERSION]/alloy.min.js OR alloy.js for the non-minified version. For example: Minified: https://cdn1.adoberesources.net/alloy/2.14.0/alloy.min.js Un-minified: https://cdn1.adoberesources.net/alloy/2.14.0/alloy.js Learn more Configuring the libraries Configuring at.js At the end of every at.js file, you’ll find a section where we instantiate and pass a setting object. It is customizable, at download we populate that section with current customer settings. window.adobe.target.init(window, document, { ""clientCode"": ""demo"", ""imsOrgId"": """", ""serverDomain"": ""localhost:5000"", ""timeout"": 2000, ""globalMboxName"": ""target-global-mbox"", ""version"": ""2.0.0"", ""defaultContentHiddenStyle"": ""visibility: hidden;"", ""defaultContentVisibleStyle"": ""visibility: visible;"", ""bodyHiddenStyle"": ""body {opacity: 0 !important}"", ""bodyHidingEnabled"": true, ""deviceIdLifetime"": 63244800000, ""sessionIdLifetime"": 1860000, ""selectorsPollingTimeout"": 5000, ""visitorApiTimeout"": 2000, ""overrideMboxEdgeServer"": false, ""overrideMboxEdgeServerTimeout"": 1860000, ""optoutEnabled"": false, ""optinEnabled"": false, ""secureOnly"": false, ""supplementalDataIdParamTimeout"": 30, ""authoringScriptUrl"": ""//cdn.tt.omtrdc.net/cdn/target-vec.js"", ""urlSizeLimit"": 2048, ""endpoint"": ""/rest/v1/delivery"", ""pageLoadEnabled"": true, ""viewsEnabled"": true, ""analyticsLogging"": ""server_side"", ""serverState"": {}, ""decisioningMethod"": ""server-side"", ""legacyBrowserSupport"": false }); Learn more Configuring the Web SDK Configuration for the SDK is done with the configure command. IMPORTANT configure is always the first command called. Example: alloy(""configure"", { ""edgeConfigId"": ""ebebf826-a01f-4458-8cec-ef61de241c93"", ""orgId"":""ADB3LETTERSANDNUMBERS@AdobeOrg"" }); There are many options that can be set during configuration. All options can be found below, grouped by category. Learn more How to request and automatically render Page Load Target offers Using at.js Using at.js 2.x, if you enable the setting pageLoadEnabled, the library will trigger a call to Target Edge with execute -> pageLoad. If all the settings are set to the default values, no custom coding is necessary.Once at.js is added to the page and loaded by the browser, a Target Edge call will be executed. Using Web SDK Content created within Adobe Target’s Visual Experience Composer can be retrieved and rendered automatically by the SDK. To request and automatically render Target offers, use the sendEvent command and set the renderDecisions option to true. Doing so forces the SDK to automatically render any personalized content that’s eligible for automatic rendering. Example: alloy(""sendEvent"", { ""renderDecisions"": true, ""xdm"": {  ""commerce"": {  ""order"": {   ""purchaseID"": ""a8g784hjq1mnp3"",   ""purchaseOrderNumber"": ""VAU3123"",   ""currencyCode"": ""USD"",   ""priceTotal"": 999.98  }  } } }); Experience Platform Web SDK automatically sends a notification with the offers that were executed by the WEB SDK, this is an example of how a notification request payload looks like: { ""events"": [{  ""xdm"": {   ""_experience"": {   ""decisioning"": {    ""propositions"": [    {     ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",     ""scope"": ""cart"",     ""scopeDetails"": {     ""decisionProvider"": ""TGT"",     ""activity"": {      ""id"": ""127019""     },     ""experience"": {      ""id"": ""0""     },     ""strategies"": [      {      ""step"": ""entry"",      ""algorithmID"": ""0"",      ""trafficType"": ""0""      },      {      ""step"": ""display"",      ""algorithmID"": ""0"",      ""trafficType"": ""0""      }     ],     ""characteristics"": {      ""eventToken"": ""bKMxJ8dCR1XlPfDCx+2vSGqipfsIHvVzTQxHolz2IpSCnQ9Y9OaLL2gsdrWQTvE54PwSz67rmXWmSnkXpSSS2Q==""     }     }    }    ]   }   },   ""eventType"": ""display"",   ""web"": {   ""webPageDetails"": {    ""viewName"": ""cart"",    ""URL"": ""https://alloyio.com/personalizationSpa/cart""   },   ""webReferrer"": {    ""URL"": """"   }   },   ""device"": {   ""screenHeight"": 800,   ""screenWidth"": 1280,   ""screenOrientation"": ""landscape""   },   ""environment"": {   ""type"": ""browser"",   ""browserDetails"": {    ""viewportWidth"": 1280,    ""viewportHeight"": 284   }   },   ""placeContext"": {   ""localTime"": ""2021-12-10T15:50:34.467+02:00"",   ""localTimezoneOffset"": -120   },   ""timestamp"": ""2021-12-10T13:50:34.467Z"",   ""implementationDetails"": {   ""name"": ""https://ns.adobe.com/experience/alloy"",   ""version"": ""2.6.2"",   ""environment"": ""browser""   }  }  } ] } Learn more How to request and NOT automatically render Page Load Target offers Using at.js There are two ways we could fire a call to Target Edge that will fetch offers for page-load. Example 1: adobe.target.getOffer({ mbox: ""target-global-mbox"", success: console.log, error: console.error }); Example 2: adobe.target.getOffers({  request: {  execute: {   pageLoad: {}  } } }) .then(console.log) .catch(console.error); Learn more Using Web SDK Execute a sendEvent command with a special scope under decisionScopes: __view__. We use this scope as a signal to fetch all the page-load activities from Target and prefetch all views. The Web SDK will also try to evaluate all the VEC view based activities. Disabling view prefetching is not currently supported in the Web SDK. To access any personalization content, you may provide a callback function, which will be called after the SDK receives a successful response from the server. Your callback is provided a result object, which may contain propositions property containing any returned personalization content. Example: alloy(""sendEvent"", {  xdm: {...},  decisionScopes: [""__view__""] }).then(function(result) {  if (result.propositions) {  result.propositions.forEach(proposition => {   proposition.items.forEach(item => {   if (item.schema === HTML_SCHEMA) {    // manually apply offer    document.getElementById(""form-based-offer-container"").innerHTML =    item.data.content;    const executedPropositions = [    {     id: proposition.id,     scope: proposition.scope,     scopeDetails: proposition.scopeDetails    }    ];   // manually send the display notification event, so that Target/Analytics impressions aare increased    alloy(""sendEvent"",{    ""xdm"": {     ""eventType"": ""decisioning.propositionDisplay"",     ""_experience"": {     ""decisioning"": {      ""propositions"": executedPropositions     }     }    }    });   }   });  });  } }); Learn more How to request specific Form Based Target mboxes Using at.js You can fetch Form Based Composer activities using the getOffer function: Example 1: adobe.target.getOffer({ mbox: ""hero-banner"", success: console.log, error: console.error }); Example 2: adobe.target.getOffers({  request: {  execute: {   mboxes: [   {   index: 0,   name: ""hero-banner""   }]  } } }) .then(console.log) .catch(console.error); Learn more Using Web SDK You can fetch Form Based Composer based activities by using the sendEvent command and passing the mbox names under the decisionScopes option. The sendEvent command will return a promise that gets resolved with an object containing the requested activities / propositions: This is how the propositions array looks like: [ {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""hero-banner"",  ""scopeDetails"": {  ""decisionProvider"": ""TGT"",  ""activity"": {   ""id"": ""434689""  },  ""experience"": {   ""id"": ""0""  },  ""strategies"": [   {   ""algorithmID"": ""0"",   ""trafficType"": ""0""   }  ],  ""characteristics"": {   ""eventToken"": ""2lTS5KA6gj4JuSjOdhqUhGqipfsIHvVzTQxHolz2IpTMromRrB5ztP5VMxjHbs7c6qPG9UF4rvQTJZniWgqbOw==""  }  },  ""items"": [  {   ""id"": ""1184844"",   ""schema"": ""https://ns.adobe.com/personalization/html-content-item"",   ""meta"": {   ""geo.state"": ""bucuresti"",   ""activity.id"": ""434689"",   ""experience.id"": ""0"",   ""activity.name"": ""a4t test form based activity"",   ""offer.id"": ""1184844"",   ""profile.tntId"": ""04608610399599289452943468926942466370-pybgfJ""   },   ""data"": {   ""id"": ""1184844"",   ""format"": ""text/html"",   ""content"": ""<div> analytics impressions </div>""   }  }  ] }, {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""hero-banner"",  ""scopeDetails"": {  ""decisionProvider"": ""TGT"",  ""activity"": {   ""id"": ""434689""  },  ""characteristics"": {   ""eventToken"": ""E0gb6q1+WyFW3FMbbQJmrg==""  }  },  ""items"": [  {   ""id"": ""434689"",   ""schema"": ""https://ns.adobe.com/personalization/measurement"",   ""data"": {   ""type"": ""click"",   ""format"": ""application/vnd.adobe.target.metric""   }  }  ] } ] Example: alloy(""sendEvent"", { xdm: { ...}, decisionScopes: [""hero-banner""] }).then(function (result) { var propositions = result.propositions; if (propositions) {  // Find the discount proposition, if it exists.  for (var i = 0; i < propositions.length; i++) {  var proposition = propositions[i];  for (var j = 0; j < proposition.items; j++) {   var item = proposition.items[j];   if (item.schema === HTML_SCHEMA) {   // apply offer   document.getElementById(""form-based-offer-container"").innerHTML =    item.data.content;   const executedPropositions = [    {    id: proposition.id,    scope: proposition.scope,    scopeDetails: proposition.scopeDetails    }   ];   alloy(""sendEvent"", {    ""xdm"": {    ""eventType"": ""decisioning.propositionDisplay"",    ""_experience"": {     ""decisioning"": {     ""propositions"": executedPropositions     }    }    }   });   }  }  } } }); Learn more How to apply the Target activities Using at.js You can apply the Target activities using the applyOffers function: adobe.target.applyOffer(options) Example: adobe.target.getOffers({...}) .then(response => adobe.target.applyOffers({ response: response })) .then(() => console.log(""Success"")) .catch(error => console.log(""Error"", error)); Learn more about the applyOffers command from the dedicated documentation. Using Web SDK You can apply the Target activities using the applyPropositions command. Example: alloy(""applyPropositions"", {  propositions: [...] }); Learn more about the applyPropositions command from the dedicated documentation. How to track events Using at.js You can track events by using the trackEvent function or using sendNotifications. This function fires a request to report user actions, such as clicks and conversions. It does not deliver activities in the response. Example 1 adobe.target.trackEvent({  ""type"": ""click"",  ""mbox"": ""some-mbox"" }); Example 2 adobe.target.sendNotifications({  request: {  notifications: [{   ...,   mbox: {    name: ""some-mbox""   },   type: ""click"",   ...  }]  } }); Learn more Using Web SDK You can track events and user actions by calling the sendEvent command, populating the _experience.decisioning.propositions XDM fieldgroup, and setting the eventType to one of 2 values: decisioning.propositionDisplay: Signals the rendering of the Target activity. decisioning.propositionInteract: Signals a user interaction with the activity, like a mouse click. The _experience.decisioning.propositions XDM fieldgroup is an array of objects. The properties of each object are derived from the result.propositions that gets returned in the sendEvent command: { id, scope, scopeDetails } Example 1 - Track a decisioning.propositionDisplay event after rendering an activity alloy(""sendEvent"", { xdm: {}, decisionScopes: ['discount'] }).then(function(result) { var propositions = result.propositions; var discountProposition; if (propositions) {  // Find the discount proposition, if it exists.  for (var i = 0; i < propositions.length; i++) {  var proposition = propositions[i];  if (proposition.scope === ""discount"") {   discountProposition = proposition;   break;  }  } } if (discountProposition) {  // Find the item from proposition that should be rendered.  // Rather than assuming there a single item that has HTML  // content, find the first item whose schema indicates  // it contains HTML content.  for (var j = 0; j < discountProposition.items.length; j++) {  var discountPropositionItem = discountProposition.items[i];  if (discountPropositionItem.schema === ""https://ns.adobe.com/personalization/html-content-item"") {   var discountHtml = discountPropositionItem.data.content;   // Render the content   var dailySpecialElement = document.getElementById(""daily-special"");   dailySpecialElement.innerHTML = discountHtml;   // For this example, we assume there is only a single place to update in the HTML.   break;  }  }  // Send a ""decisioning.propositionDisplay"" event signaling that the proposition has been rendered.  alloy(""sendEvent"", {  xdm: {   eventType: ""decisioning.propositionDisplay"",   _experience: {   decisioning: {    propositions: [    {     id: discountProposition.id,     scope: discountProposition.scope,     scopeDetails: discountProposition.scopeDetails    }    ]   }   }  }  }); } }); Example 2 - Track a decisioning.propositionInteract event after a click metric occurs alloy(""sendEvent"", { xdm: { ...}, decisionScopes: [""hero-banner""] }).then(function (result) { var propositions = result.propositions; if (propositions) {  // Find the discount proposition, if it exists.  for (var i = 0; i < propositions.length; i++) {  var proposition = propositions[i];  for (var j = 0; j < proposition.items; j++) {   var item = proposition.items[j];   if (item.schema === ""https://ns.adobe.com/personalization/measurement"") {   // add metric to the DOM element   const button = document.getElementById(""form-based-click-metric"");   button.addEventListener(""click"", event => {    const executedPropositions = [    {     id: proposition.id,     scope: proposition.scope,     scopeDetails: proposition.scopeDetails    }    ];    // send the click track event    alloy(""sendEvent"", {    ""xdm"": {     ""eventType"": ""decisioning.propositionInteract"",     ""_experience"": {     ""decisioning"": {      ""propositions"": executedPropositions     }     }    }    });   });   }  }  } } }); Learn more How to trigger a view change in a Single Page Application Using at.js Use the adobe.target.triggerView function. This function can be called whenever a new page is loaded or when a component on a page is re-rendered. adobe.target.triggerView() should be implemented for single page applications (SPAs) in order to use the Visual Experience Composer (VEC) to create A/B Tests and Experience Targeting (XT) activities. If adobe.target.triggerView() is not implemented on the site, the VEC cannot be utilized for SPA. Example adobe.target.triggerView(""homeView"") Learn more Using Web SDK In order to trigger or signal a single page application View Change, set the web.webPageDetails.viewName property under the xdm option of the sendEvent command. The Web SDK will check the view cache, if there are offers for the viewName specified in sendEvent it will execute them and send a display notification event. Example alloy(""sendEvent"", { renderDecisions: true, xdm:{  web:{  webPageDetails:{   viewName: ""homeView""  }  } } }); Learn more How to leverage Response Tokens Personalization content returned from Adobe Target includes response tokens, which are details about the activity, offer, experience, user profile, geo information, and more. These details can be shared with third-party tools or used for debugging. Response tokens can be configured in the Adobe Target user interface. Using at.js Use at.js custom events to listen for the Target response and read the response tokens. Example document.addEventListener(adobe.target.event.REQUEST_SUCCEEDED, function(e) { console.log(""Request succeeded"", e.detail); }); Learn more Using Web SDK IMPORTANT Ensure that you are using Platform Web SDK version 2.6.0 or later. The Response Tokens are returned as part of the propositions that are exposed in the result of the sendEvent command. Each proposition contains an array of items, and each item will have a meta object populated with Response Tokens if they are enabled in the Target admin UI. Learn more Example alloy(""sendEvent"", {  renderDecisions: true,  xdm: {} }).then(function(result) {  if (result.propositions) {  // Format of result.propositions:  /*   [    {     ""id"": """",     ""scope"": """",     ""items"": [      {       ""id"": """",       ""schema"": """",       ""data"": {},       ""meta"": { // RESPONSE TOKENS        ""activity.name"": ...,        ""offer.id"": ...,        ""profile.activeActivities"": ...       }      }     ],     ""scopeDetails"": {}     ""renderAttempted"": false    }   ]  */  } }); Learn more How to manage flicker Using at.js Using at.js you can manage flicker by setting bodyHidingEnabled: true so that at.js is the one that would take care of pre-hiding the personalized containers before it fetches and applies the DOM changes. The page sections that contains personalized content can be pre-hidden by overriding at.js bodyHiddenStyle. By default bodyHiddenStyle hides the whole HTML body. Both settings can be overridden using window.targetGlobalSettings. window.targetGlobalSettings should be placed before loading at.js. Using Web SDK Using Web SDK the customer can set up their pre-hiding style in the configure command, like in the example bellow: alloy(""configure"", { edgeConfigId: ""configurationId"", orgId: ""orgId@AdobeOrg"", debugEnabled: true, prehidingStyle: ""body { opacity: 0 !important }"" }); When loading the Web SDK async we recommend that the following snippet is injected in the page before Web SDK is injected: <script> !function(e,a,n,t){ if (a) return; var i=e.head;if(i){ var o=e.createElement(""style""); o.id=""alloy-prehiding"",o.innerText=n,i.appendChild(o), setTimeout(function(){o.parentNode&&o.parentNode.removeChild(o)},t)}} (document, document.location.href.indexOf(""adobe_authoring_enabled"") !== -1, ""body { opacity: 0 !important }"", 3000); </script> How is A4T being handled Using at.js There are 2 types of A4T logging that are supported using at.js: Analytics Client Side Logging Analytics Server Side Logging Analytics Client Side Logging Example 1: Using Target Global Setting Analytics Client Side Logging can be enabled by setting analyticsLogging: client_side in the at.js settings or by overriding the window.targetglobalSettings object. When this option is set up, the format of the payload that is returned looks like the following: { ""analytics"": {  ""payload"": {  ""pe"": ""tnt"",  ""tnta"": ""167169:0:0|0|100,167169:0:0|2|100,167169:0:0|1|100""  } } } The payload can then be forwarded to Analytics via the Data Insertion API. Example 2: Configuring it in every getOffers function: adobe.target.getOffers({  request: {   experienceCloud: {   analytics: {    logging: ""client_side""   }   },   prefetch: {   mboxes: [{    index: 0,    name: ""a1-serverside-xt""   }]   }  }  })  .then(console.log) This is how the response payload looks like: { ""prefetch"": {  ""mboxes"": [{  ""index"": 0,  ""name"": ""a1-serverside-xt"",  ""options"": [{   ""content"": ""<img src=\""http://s7d2.scene7.com/is/image/TargetAdobeTargetMobile/L4242-xt-usa?tm=1490025518668&fit=constrain&hei=491&wid=980&fmt=png-alpha\""/>"",   ""type"": ""html"",   ""eventToken"": ""n/K05qdH0MxsiyH4gX05/2qipfsIHvVzTQxHolz2IpSCnQ9Y9OaLL2gsdrWQTvE54PwSz67rmXWmSnkXpSSS2Q=="",   ""responseTokens"": {   ""profile.memberlevel"": ""0"",   ""geo.city"": ""bucharest"",   ""activity.id"": ""167169"",   ""experience.name"": ""USA Experience"",   ""geo.country"": ""romania""   }  }],  ""analytics"": {   ""payload"": {   ""pe"": ""tnt"",   ""tnta"": ""167169:0:0|0|100,167169:0:0|2|100,167169:0:0|1|100""   }  }  }] } } The Analytics payload (tnta token) should be included in the Analytics hit using Data Insertion API. Analytics Server Side Logging Analytics Server Side Logging can be enabled by setting analyticsLogging: server_side in the at.js settings or by overriding the window.targetglobalSettings object. Then the data flows as following: Learn More Using Web SDK Web SDK also supports: Analytics Client Side logging Analytics Server Side logging Analytics Client Side Logging Analytics Client Side Logging is enabled when Adobe Analytics is disabled for that DataStream configuration. The customer has access to the Analytics token (tnta) that needs to be shared with Analytics using Data Insertion API in by chaining the sendEvent command and iterate through the resulting propositions array. Example alloy(""sendEvent"", {  ""renderDecisions"": true,  ""xdm"": {  ""web"": {   ""webPageDetails"": {   ""name"": ""Home Page""   }  }  } } ).then(function (results) { var analyticsPayloads = new Set(); for (var i = 0; i < results.propositions.length; i++) {  var proposition = results.propositions[i];  var renderAttempted = proposition.renderAttempted;  if (renderAttempted === true) {  var analyticsPayload = getAnalyticsPayload(proposition);  if (analyticsPayload !== undefined) {   analyticsPayloads.add(analyticsPayload);  }  } } var analyticsPayloadsToken = concatenateAnalyticsPayloads(analyticsPayloads); // send the page view Analytics hit with collected Analytics payload using Data Insertion API }); Here is a diagram to show how data flows when Analytics Client Side is enabled: Analytics Server Side Logging Analytics Server Side Logging is enabled when Analytics is enabled for that DataStream configuration. When Server Side Analytics Logging is enabled the A4T payload that needs to be shared with Analytics so that the Analytics reporting show correct impressions and conversions is shared at the Experience Edge level, so that the customer doesn’t have to do any additional processing. Here is how data flows into our systems when Server Side Analytics Logging is enabled: How to set Target Global Settings Using at.js You can override settings in the at.js library using window.targetGlobalSettings, rather than configuring the settings in the Target Standard/Premium UI or by using REST APIs. The override should be defined before at.js is loaded or in Administration > Implementation > Edit at.js Settings > Code Settings > Library Header. Example: window.targetGlobalSettings = { timeout: 200, // using custom timeout visitorApiTimeout: 500, // using custom API timeout enabled: document.location.href.indexOf('https://www.adobe.com') >= 0 // enabled ONLY on adobe.com }; Learn more Using Web SDK This feature is not supported in Web SDK. How to update Target Profile attributes Using at.js Example 1 adobe.target.getOffer({ mbox: ""target-global-mbox"", params: {  ""profile.name"": ""test"",  ""profile.gender"": ""female"" }, success: console.log, error: console.error }); Example 2 adobe.target.getOffers({  request: {  execute: {   pageLoad: {   profileParameters: {    name: ""test"",    gender: ""female""   }   }  } } }) .then(console.log) .catch(console.error); Using Web SDK To update a Target profile, use the sendEvent command and set the data.__adobe.target property, prefixing the key names using profile. Example alloy(""sendEvent"", { renderDecisions: true, data: {  __adobe: {  target: {   ""profile.gender"": ""female"",   ""profile.age"": 30  }  } } }); How do I use Target Recommendations Using at.js Example 1 adobe.target.getOffer({ mbox: ""target-global-mbox"", params: {  ""entity.name"": ""T-shirt"",  ""entity.id"": ""1234"" }, success: console.log, error: console.error }); Example 2 adobe.target.getOffers({  request: {  execute: {   pageLoad: {   parameters: {    ""entity.name"": ""T-shirt"",    ""entity.id"": ""1234""   }   }  } } }) .then(console.log) .catch(console.error); Learn more Using Web SDK To send Recommendation data, use the sendEvent command and set the data.__adobe.target property, prefixing the key names using entity. Example alloy(""sendEvent"", { renderDecisions: true, data: {  __adobe: {  target: {   ""entity.name"": ""T-shirt"",   ""entity.id"": ""1234""  }  } } }); How do I use third party IDs Using at.js Using at.js there are multiple ways of sending mbox3rdPartyId, using getOffer or getOffers: Example 1 adobe.target.getOffer({ mbox:""test"", params:{  ""mbox3rdPartyId"": ""1234"" }, success: console.log, error: console.error }); Example 2 adobe.target.getOffers({  request: {  id:{   thirdPartyId: ""1234""  },  execute: {   pageLoad: {}  } } }) .then(console.log) .catch(console.error); Or there is a way to set up the mbox3rdPartyId either in targetPageParams or targetPageParamsAll. When setting it in targetPageParams, it will be sent in the requests for target-global-mbox also known as pag-lLoad. The recommendation is to be set using targetPageParamsAll as it will be sent in every target request. The advantage of using targetPageParamsAll is that you can define the mbox3rdPartyId on the page once and this will ensure that all the target requests have the right mbox3rdPartyId. window.targetPageParamsAll = function() {  return {   ""mbox3rdPartyId"": ""1234""  };  }; window.targetPageParams = function() { return {  ""mbox3rdPartyId"": ""1234"" }; }; Learn more Using Web SDK Web SDK supports Target Third Party ID. However, it requires a few more steps. Before diving into the solution, we should talk a little bit about identityMap. Identity Map allows the customers to send multiple identities. All the identities are namespaced. Each namespace can have one or more identities. A particular identity can be marked as primary. With this knowledge in mind we can see what are the necessary steps to set up web sdk to use Target Third Party ID. Set up the namespace that will contain the Target Third Party ID in the Data Stream Configuration view: Send that identity namespace in every sendEvent command like this: alloy(""sendEvent"", { ""renderDecisions"": true, ""xdm"": {  ""identityMap"": {  ""TGT3PID"": [   {   ""id"": ""1234"",   ""primary"": true   }  ]  } } }); How do I set property tokens Using at.js Using at.js there are 2 ways of setting up the property tokens, either using targetPageParams or targetPageParamsAll. Using targetPageParams adds the property token to the target-global-mbox call, but using targetPageParamsAll adds the token to all the target calls: Example 1 window.targetPageParamsAll = function() {  return {   ""at_property"": ""1234""  };  }; Example 2 window.targetPageParams = function() {  return {   ""at_property"": ""1234""  };  }; Using Web SDK Using Web SDK the customers are able to set up the property at a higher level, when setting up the Data Stream configuration, under Adobe Target namespace: This means every Target call for that specific Data Stream configuration is going to contain that property token. How do I prefetch mboxes Using at.js This functionality is available only in at.js 2.x. at.js 2.x has a new function named getOffers. getOffers allow customers to prefetch content for one or more mboxes. Here is an example: adobe.target.getOffers({  request: {  prefetch: {   mboxes: [{   index: 0,   name: ""test-mbox"",   parameters: {    ...   },   profileParameters: {    ...   }   }]  } } }) .then(console.log) .catch(console.error); NOTE: It is highly advised to ensure that every mbox in the mboxes array has its own index. Usually the first mbox has index=0, the next one index=1, etc. Using Web SDK This functionality is currently not supported in Web SDK. How do I debug my Target implementation Using at.js At.js exposes these debugging features: Mbox Disable - disable Target from fetching and rendering to check if the page is broken without Target interactions Mbox Debug - at.js logs every action Target Trace - with a mbox trace token generated in Bullseye a trace object with details that participated in the decisioning process is available under window.___target_trace object Note: All these debugging features are available with enhanced capabilities in Adobe Experience Platform Debugger Using Web SDK You have multiple debugging capabilities when using Web SDK: Using Griffon Web SDK debug enabled Use Web SDK monitoring hooks Use Adobe Experience Platform Debugger Target Trace  Business.Adobe.com resources   "
13,experienceleague.adobe.com docs experience platform edge data collection adobe analytics analytics overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge data collection adobe analytics analytics overview.html?lang=en.txt.  Using Adobe Analytics with Platform Web SDK The Adobe Experience Platform Web SDK can send data to Adobe Analytics. This works by translating xdm into a format the Adobe Analytics can use. Setup Adobe Analytics automatically picks up the data you are sending if you have a report suite mapped in the Customer Config UI. Here you can map one or more reportings to a given config. After a report suite is mapped, the data will automatically begin flowing. XDM field group To make it easier to capture the most common Adobe Analytics metrics, we provide an Analytics field group that you can use. For more details on this schema, see the documenation for the Adobe Analytics ExperienceEvent Full Extension schema field group Automatically mapped data The Adobe Experience Platform Edge Network automatically maps many XDM variables. The complete list of these variables is listed here. Manually mapped data Any data that is not automatically mapped by the Edge Network can be accessed via processing rules. The data is flattened using dot notation and available as contextData. If you had a schema that looked like this. { key:value, object:{  key1:value1,  key2:value2 }, array:[  ""v0"",  ""v1"",  ""v2"" ], arrayofobjects:[  {  obj1key:objval0  },  {  obj2key:objval1  } ] } Then these would be the context data keys available to you. a.x.key //value a.x.object.key1 //value1 a.x.object.key2 //value2 a.x.array.0 //v0 a.x.array.1 //v1 a.x.array.2 //v2 a.x.arrayofobjects.0.obj1key //objval0 a.x.arrayofobjects.1.obj2key //objval1 Here is an example of a processing rule that would use this data. NOTE With Experience Edge collection, all events are sent to Analytics as well as to any other services you have configured for your datastream. For example, if you have both Analytics and Target configured as services and you make separate calls for personalization and for Analytics, both events will be sent to Analytics as well as Target. These events will be recorded in Analytics reporting and can affect metrics like bounce rate.  Business.Adobe.com resources   "
14,experienceleague.adobe.com docs experience platform edge datastreams overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge datastreams overview.html?lang=en.txt.  Datastreams overview A datastream represents the server-side configuration when implementing the Adobe Experience Platform Web and Mobile SDKs. While the configure command in the SDK controls things that must be handled on the client (such as the edgeDomain), datastreams handle all other configurations for the SDK. When a request is sent to the Adobe Experience Platform Edge Network, the edgeConfigId is used to reference the datastream. This allows you to update the server-side configuration without having to make code changes on your website. You can create and manage datastreams by selecting Datastreams in the left navigation within the Adobe Experience Platform UI or Data Collection UI. For more information on how to configure a datastream in the UI, see the configuration guide. Handling sensitive data in datastreams IMPORTANT The content of this document is not legal advice and is not meant to substitute for legal advice. Please consult with your company’s legal department for advice concerning the handling of sensitive data. Corporate data stewardship policies and regulatory requirements are increasing restrictions on how sensitive customer data can be collected, processed, and used. This includes the collection, processing, and usage of Protected Health Data (PHI) which is subject to to regulations like the Health Insurance Portability and Accountability Act (HIPAA). Datastreams provides three methods to assist you with securely handling your sensitive data: Enhanced encryption Data governance Audit logs Enhanced encryption All data in transit though the Edge Network is conducted over secure, encrypted connections using HTTPS TLS 1.2. If the datastream is bringing data into Experience Platform, the data is then encrypted at rest in the Experience Platform data lake. See the document on data encryption in Experience Platform for more information. Data governance Datastreams leverages Experience Platform’s built-in data governance capabilities to prevent sensitive data from being sent to non-HIPAA-ready services. By labeling specific fields that contain sensitive data in your datastream schemas, you can take granular control over which data fields can be used for specific purposes. The following video provides a brief overview of how data usage restrictions are configured and enforced for datastreams in the UI: Your browser does not support the iframe element. In Experience Platform, you can apply sensitive data usage labels to schemas and fields containing data that your organization deems sensitive. For example, the RHD label is used to denote Protected Health Information (PHI), and the S1 label represents geolocation data. NOTE For details on how to apply data usage labels within the Schemas tab in the Experience Platform UI or Data Collection UI, see the schema labeling tutorial. When creating a new datastream, if the selected schema contains sensitive data usage labels, the datastream can only be configured to send that data to HIPAA-ready destinations. Currently, the only HIPAA-ready destination supported by datastreams is Adobe Experience Platform. Other destination services including Adobe Target, Adobe Analytics, Adobe Audience Manager, event forwarding, and edge destinations are disabled for datastreams containing sensitive data usage labels. If a schema is being used in an existing datastream with non-HIPAA-ready services, attempting to add a sensitive data usage label to the schema results in a policy violation message and the action is prevented. The message specifies which datastream triggered the violation and suggests to remove any non-HIPAA-ready services from the datastream to resolve the issue. Audit logs In Experience Platform, datastream activities can be monitored in the form of audit logs. An audit log tells who performed what action, and when, along with other contextual data that can help you troubleshoot issues related to datastreams to help your business comply with corporate data stewardship policies and regulatory requirements. Whenever a user creates, updates, or deletes a datastream, an audit log is created to record the action. The same occurs whenever a user creates, updates, or deletes a mapping through Data Prep for Data Collection. Regardless of whether it was a datastream or a mapping that was updated, the resulting audit log is categorized under the Datastreams resource type. See the documentation on audit logs for more information on how to interpret logs from datastreams and other supported services. Next steps This guide provided a high-level overview of datastreams and their use in Data Collection and the processing of sensitive data. For steps on how to set up a new datastream, see the datastream configuration guide. Business.Adobe.com resources   "
15,experienceleague.adobe.com docs experience platform edge data collection adobe analytics automatically mapped vars.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge data collection adobe analytics automatically mapped vars.html?lang=en.txt.  Analytics variable mapping in Adobe Experience Edge The following table shows the variables that the Adobe Experience Platform Edge Network automatically maps into Adobe Analytics. If you use these XDM Field Paths, no additional configuration is necessary to send data to Adobe Analytics. XDM Field Path Analytics dimension and description  application.isClose Helps define the mobile metric Crashes. application.isInstall Helps determine when to increase the mobile metric First Launches. application.isLaunch Helps determine when to increase the mobile metric First Launches. application.closeType Determines if a close event is a crash or not. Valid values include close (A lifecycle session ends and a pause event was received for the previous session) and unknown (A lifecycle session ends without a pause event). Helps set the Crashes metric. application.isInstall The mobile metric Installs. application.isLaunch The mobile metric Launches. application.name Helps set the mobile dimension App ID. application.isUpgrade The mobile metric Upgrades. application.version Helps set the mobile dimension App ID. application.sessionLength The mobile metric Previous Session Length. commerce.checkouts.id Applies event serialization to the Checkouts metric. commerce.checkouts.value Increments the Checkouts metric by the desired amount. commerce.order.currencyCode Sets the currencyCode configuration variable. commerce.order.purchaseID Sets the purchaseID page variable. commerce.order.transactionID Sets the transactionID page variable. commerce.productListAdds.id Applies event serialization to the Cart Additions metric. commerce.productListAdds.value Increments the Cart Additions metric. commerce.productListOpens.id Applies event serialization to the Carts metric. commerce.productListOpens.value Increments the Carts metric. commerce.productListRemovals.id Applies event serialization to the Cart Removals metric. commerce.productListRemovals.value Increments the Cart Removals metric. commerce.productListViews.id Applies event serialization to the Cart Views metric. commerce.productListViews.value Increments the Cart Views metric. commerce.productViews.id Applies event serialization to the Product Views metric. commerce.productViews.value Increments the Product Views metric. commerce.purchases.value Increments the Orders metric. device.model The mobile dimension Device Name. device.colorDepth Helps set the Color Depth dimension. device.screenHeight Helps set the Monitor Resolution dimension. device.screenWidth Helps set the Monitor Resolution dimension. device.type The mobile device type. environment.browserDetails.acceptLanguage Helps set the Language dimension. environment.browserDetails.cookiesEnabled Sets the Cookie Support dimension. Valid values include Y (the browser accepts cookies) and N (the browser rejects cookies). environment.browserDetails.javaEnabled Sets the Java enabled dimension. Valid values include Y (Java is enabled) and N (Java is disabled). environment.browserDetails.userAgent Used as a fallback unique visitor identification method. Typically populated using the User-Agent HTTP request header. You can map this field to an eVar if you would like to use it in reports. environment.browserDetails.viewportHeight Sets the Browser Height dimension. environment.browserDetails.viewportWidth Sets the Browser Width dimension. environment.carrier The mobile dimension Carrier Name. environment.connectionType Helps set the Connection type dimension. environment.ipV4 Used as a fallback unique visitor identification method. Typically populated using the X-Forwarded-For HTTP header. environment.language The mobile dimension Locale. environment.operatingSystem The mobile dimension Operating System. environment.operatingSystemVersion Helps set the Operating System Version dimension. _experience.analytics.customDimensions.eVars.eVar1 -_experience.analytics.customDimensions.eVars.eVar250 Sets the respective eVar dimension. _experience.analytics.customDimensions.hierarchies.hier1 -_experience.analytics.customDImensions.hierarchies.hier5 Sets the respective Hierarchy dimension. _experience.analytics.customDimensions.listProps.prop1.delimiter -_experience.analytics.customDimensions.listProps.prop75.delimiter List prop delimiter override. Using this field is not recommended, as the delimiter is automatically retrieved from Traffic variable admin under report suite settings. Using this field can create a mismatch between the delimiter used and the delimiter that Analytics expects. _experience.analytics.customDimensions.listProps.prop1.values -_experience.analytics.customDimensions.listProps.prop75.values A string array containing the respective List Prop values. _experience.analytics.customDimensions.lists.list1.list[].value -_experience.analytics.customDimensions.lists.list3.list[].value Concatenates all value strings in each respective list[] array to its respective List variable. Delimiter is automatically chosen based on the value set in Report suite settings. _experience.analytics.customDimensions.props.prop1 -_experience.analytics.customDimensions.props.prop75 Sets the respective Prop dimension. _experience.analytics.event1to100.event1.id -_experience.analytics.event901to1000.event1000.id Applies event serialization to the respective Custom events metric. _experience.analytics.event1to100.event1.value -_experience.analytics.event901to1000.event1000.value Increments the respective Custom events metric by the desired amount. identityMap.ECID[0].id The Adobe Experience Cloud Identity Service ID. marketing.trackingCode Sets the Tracking Code dimension. media.mediaTimed.completes.value The Media Analytics metric Content Complete. media.mediaTimed.dropBeforeStart.value c.a.media.view, c.a.media.timePlayed, c.a.media.play media.mediaTimed.federated.value The Media Analytics metric Federated Data. media.mediaTimed.firstQuartiles.value The Media Analytics metric Twenty-five % Progress Marker. media.mediaTimed.mediaSegmentView.value The Media Analytics metric Content Segment Views. media.mediaTimed.midpoints.value The Media Analytics metric Fifty % Progress Marker. media.mediaTimed.pauseTime.value The Media Analytics metric Total Pause Duration. media.mediaTimed.pauses.value The Media Analytics metric Pause Events. media.mediaTimed.primaryAssetReference.@id The Media Analytics dimension Asset ID. media.mediaTimed.primaryAssetReference.dc:title The Media Analytics dimension Video Name. media.mediaTimed.primaryAssetReference.iptc4xmpExt:Creator[N].iptc4xmpExt:Name The Media Analytics dimension Originator. media.mediaTimed.primaryAssetReference.iptc4xmpExt:Episode.iptc4xmpExt:Number The Media Analytics dimension Episode. media.mediaTimed.primaryAssetReference.iptc4xmpExt:Genre The Media Analytics dimension Genre. media.mediaTimed.primaryAssetReference.iptc4xmpExt:Rating[N].iptc4xmpExt:RatingValue The Media Analytics dimension Content Rating. media.mediaTimed.primaryAssetReference.iptc4xmpExt:Season.iptc4xmpExt:Number The Media Analytics dimension Season. media.mediaTimed.primaryAssetReference.iptc4xmpExt:Series.iptc4xmpExt:Identifier The Media Analytics dimension Content ID. media.mediaTimed.primaryAssetReference.iptc4xmpExt:Series.iptc4xmpExt:Name The Media Analytics dimension Show. media.mediaTimed.primaryAssetReference.showType The Media Analytics dimension Show Type. media.mediaTimed.primaryAssetReference.xmpDM:duration The Media Analytics dimension Video Length. media.mediaTimed.primaryAssetViewDetails.@id The Media Analytics dimension Media Session ID. media.mediaTimed.primaryAssetViewDetails.broadcastChannel The Media Analytics dimension Content Channel. media.mediaTimed.primaryAssetViewDetails.broadcastContentType The Media Analytics dimension Content Type. media.mediaTimed.primaryAssetViewDetails.broadcastNetwork The Media Analytics dimension Network. media.mediaTimed.primaryAssetViewDetails.mediaSegmentView.value The Media Analytics dimension Content Segment. media.mediaTimed.primaryAssetViewDetails.playerName The Media Analytics dimension Content Player Name. media.mediaTimed.primaryAssetViewDetails.playerSDKVersion.version The Media Analytics dimension SDK Version. media.mediaTimed.primaryAssetViewDetails.sourceFeed The Media Analytics dimension Media Feed Type. media.mediaTimed.primaryAssetViewDetails.streamFormat The Media Analytics dimension Stream Format. media.mediaTimed.progress10.value The Media Analytics metric Ten % Progress Marker. media.mediaTimed.progress95.value The Media Analytics metric Ninety-five % Progress Marker. media.mediaTimed.resumes.value The Media Analytics metric Content Resumes. media.mediaTimed.starts.value The Media Analytics metric Media Starts. media.mediaTimed.thirdQuartiles.value The Media Analytics metric Seventy-five % Progress Marker. media.mediaTimed.timePlayed.value The Media Analytics metric Content Time Spent. media.mediaTimed.totalTimePlayed.value The Media Analytics metric Media Time Spent. placeContext.geo.latitude The Mobile dimension Latitude. placeContext.geo.longitude The Mobile dimension Longitude. placeContext.geo.postalCode The Zip Code dimension. placeContext.geo.stateProvince The US States dimension. placeContext.localTime Helps populate Time Zones in Report & Analytics. Appears as t_time_info in Data feeds. productListItems[]._experience.analytics.customDimensions.eVars.eVar1 -productListItems[]._experience.analytics.customDimensions.eVars.eVar250 Applies product syntax merchandising to eVars. productListItems[]._experience.analytics.event1to100.event1.value -productListItems[]._experience.analytics.event901-1000.event1000.value Applies product syntax merchandising to events. productListItems[].lineItemId The Category dimension. See also the products page variable. productListItems[].name The Product dimension. See also the products page variable. If productListItems[].SKU and productListItems[].name both contain data, the value in productListItems[].SKU is used. productListItems[].priceTotal Helps determine the Revenue metric. See also the products page variable. productListItems[].quantity Helps determine the Units metric. See also the products page variable. productListItems[].SKU The Product dimension. See also the products page variable. If productListItems[].SKU and productListItems[].name both contain data, the value in productListItems[].SKU is used. web.webInteraction.URL The linkURL implementation variable. web.webInteraction.name The Custom link, Download link, or Exit link dimension, depending on the value in web.webInteraction.type web.webInteraction.type Determines the type of link clicked. Valid values include other (Custom links), download (Download links), and exit (Exit links). web.webPageDetails.URL The Page URL dimension. web.webPageDetails.isErrorPage Flag that helps determine the ‘Pages Not Found’ dimension and metric. web.webPageDetails.name The Page dimension. web.webPageDetails.server The Server dimension. web.webPageDetails.siteSection The Site Section dimension. web.webReferrer.URL The Referrer dimension.  Mapping other XDM fields to Analytics variables If there are any dimensions or metrics that you want to add to Adobe Analytics, you can do so through Context Data variables. Any XDM field elements that are not automatically mapped are sent to Adobe Analytics as Context Data with the prefix a.x. You can then map this context data variable to the desired Analytics variable using Processing rules. For example, if you send the following event: alloy(""event"",{  ""xdm"":{   ""_atag"":{    ""search"":{     ""term"":""Example search term""    }   }  } }) The Web SDK sends that data to Adobe Analytics as the context data variable a.x._atag.search.term. You can then use a processing rule to assign that context data variable value to the desired Analytics variable, such as an eVar:  Business.Adobe.com resources   "
16,experienceleague.adobe.com docs experience platform edge extension web sdk extension configuration.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge extension web sdk extension configuration.html?lang=en.txt.  Configure the Adobe Experience Platform Web SDK extension The Adobe Experience Platform Web SDK tag extension sends data to Adobe Experience Cloud from web properties through the Adobe Experience Platform Edge Network. The extension allows you to stream data into Platform, synchronize identities, process customer consent signals, and automatically collect context data. This document covers how to configure the extension in the UI. Getting started If the Platform Web SDK extension has already been installed for a property, open the property in the UI and select the Extensions tab. Under the Platform Web SDK, select Configure. If you have not installed the extension yet, select the Catalog tab. From the list of available extensions, find the Platform Web SDK extension and select Install. In both cases, you arrive at the configuration page for the Platform Web SDK. The sections below explain the extension’s configuration options. General configuration options The configuration options at the top of the page tell Adobe Experience Platform where to route the data and what configurations to use on the server. Name The Adobe Experience Platform Web SDK extension supports multiple instances on the page. The name is used to send data to multiple organizations with a tag configuration. The extension’s name defaults to “alloy”. However, you can change the instance name to any valid JavaScript object name. IMS Organization ID The IMS Organization ID is the organization that you would like the data sent to at Adobe. Most of the time, use the default value that is autopopulated. When you have multiple instances on the page, populate this field with the value of the second organization you want to send data to. Edge Domain The Edge Domain is the domain that the Adobe Experience Platform extension sends and receives data from. Adobe recommends using a 1st-party domain (CNAME) for this extension. The default 3rd-party domain works for development environments but is not suitable for production environments. Instructions on how to set up a first-party CNAME are listed here. Datastreams When a request is sent to the Adobe Experience Platform Edge Network, a datastream ID is used to reference the server-side configuration. You can update the configuration without having to make code changes on your website. See the guide on datastreams for more information. Privacy The Privacy section allows you to configure how the SDK handles user consent signals from your website. Specifically, it allows you to select the default level of consent that is assumed of a user if no other explicit consent preference has been provided. The default consent level is not saved to the user’s profile. The following table breaks down what each option entails: Default Consent Level Description  In Collect events that occur before the user provides consent preferences. Out Discard events that occur before the user provides consent preferences. Pending Queue events that occur before the user provides consent preferences. When consent preferences are provided, the events will be collected or discarded depending on the provided preferences. Provided by data element The default consent level is determined by a separate data element that you define. When using this option, you must specify the data element using the provided dropdown menu. Use Out or Pending if you require explicit user consent for your business operations. Identity Migrate ECID from VisitorAPI This option is enabled by default. When this feature is enabled, the SDK can read the AMCV and s_ecid cookies and set the AMCV cookie used by Visitor.js. This feature is important when migrating to Adobe Experience Platform Web SDK as some pages might still be using Visitor.js. It allows the SDK to continue to use the same ECID so that users are not identified as two separate users. Use third-party cookies This option enables the SDK to attempt to store a user identifier in a third-party cookie. If successful, the user is identified as a single user as they navigate across multiple domains, rather than being identified as a separate user on each domain. If this option is enabled, the SDK might still be unable to store the user identifier in a third-party cookie if the browser does not support third-party cookies or has been configured by the user to not allow third-party cookies. In this case, the SDK only stores the identifier in the first-party domain. Personalization If you would like to hide certain parts if your site while personalized content is loaded, you can specify the elements to hide in the prehiding style editor. You can then copy the default prehiding snippet provided to you and paste it inside the <head>element of your HTML site. Data Collection Callback function The callback function provided in the extension is also called the onBeforeEventSend function in the library. This function allows you to modify events globally before they’re sent to Adobe Edge Network. More detailed information on how to use this function can be found here. Click data collection The SDK can automatically collect link click information for you. By default, this feature is enabled but can be disabled using this option. Links are also labeled as download links if they contain one of the download expressions listed in the Download Link Qualifier textbox. Adobe provides you with some default download link qualifiers, but these can be edited at any time. Automatically collected context data By default, the SDK collects certain context data regarding device, web, environment, and place context. If you would like to see a list of the information Adobe collects, you can find it here. If you don’t want this data collected or you only want certain categories of data collected, you can change these options. Advanced Settings Edge base path Use this field if you need to change the base path that is used to interact with Adobe Edge Network. This shouldn’t require updating, but in the case that you participate on a beta or alpha, Adobe might ask you to change this field. Business.Adobe.com resources   "
17,experienceleague.adobe.com docs experience platform edge personalization adobe target spa implementation.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target spa implementation.html?lang=en.txt.  Single-page application implementation Adobe Experience Platform Web SDK provides rich features that equip your business to execute personalization on next-generation, client-side technologies such as single-page applications (SPAs). Traditional websites worked on “Page-to-Page” navigation models, otherwise known as Multi Page Applications, where website designs were tightly coupled to URLs and transitions from one webpage to another required a page load. Modern web applications, such as single-page applications, have instead adopted a model that propels rapid use of browser UI rendering, which is often independent of page reloads. These experiences can be triggered by customer interactions, such as scrolls, clicks, and cursor movements. As the paradigms of the modern web have evolved, the relevance of traditional generic events, such as a page load, to deploy personalization and experimentation no longer work. Benefits of Platform Web SDK for SPAs Here are some benefits to using Adobe Experience Platform Web SDK for your single-page applications: Ability to cache all offers on page-load to reduce multiple server calls to a single server call. Tremendously improve the user experience on your site because offers are shown immediately via the cache without lag time introduced by traditional server calls. A single line of code and one-time developer setup enables marketers to create and run A/B and Experience Targeting (XT) activities via the Visual Experience Composer (VEC) on your SPA. XDM Views and single-page applications The Adobe Target VEC for SPAs takes advantage of a concept called Views: a logical group of visual elements that together make up an SPA experience. A single-page application can, therefore, be considered as transitioning through Views, instead of URLs, based on user interactions. A View can typically represent a whole site or grouped visual elements within a site. To further explain what Views are, the following example uses a hypothetical online e-commerce site implemented in React to explore example Views. After navigating to the home site, a hero image promotes an Easter sale as well as the newest products available on the site. In this case, a View could be defined for the entire home screen. This View could simply be called “home”. As the customer becomes more interested in the products that the business is selling, they decide to click the Products link. Similar to the home site, the entirety of the products site can be defined as a View. This View could be named “products-all”. Since a View can be defined as a whole site or a group of visual elements on a site, the four products shown on the products site could be grouped and considered as a View. This view could be named “products.” When the customer decides to click the Load More button to explore more products on the site, the website URL does not change in this case, but a View can be created here to represent only the second row of products that are shown. The View name could be “products-page-2”. The customer decides to purchase a few products from the site and proceeds to the checkout screen. On the checkout site the customer is given options to choose normal delivery or express delivery. A View can be any group of visual elements on a site, so a View could be created for delivery preferences and be called, “Delivery Preferences”. The concept of Views can be extended much further than this. These are just a few examples of Views that can be defined on a site. Implementing XDM Views XDM Views can be leveraged in Adobe Target to empower marketers to run A/B and XT tests on SPAs via the Visual Experience Composer. This requires performing the following steps in order to complete a one-time developer setup: Install Adobe Experience Platform Web SDK Determine all XDM Views in your single-page application that you want to personalize. After defining the XDM Views, in order to deliver AB or XT VEC activities, implement the sendEvent() function with renderDecisions set to true and the corresponding XDM View in your Single Page Application. The XDM View must be passed in xdm.web.webPageDetails.viewName. This step allows marketers to leverage the Visual Experience Composer to launch A/B and XT tests for those XDM. alloy(""sendEvent"", { ""renderDecisions"": true, ""xdm"": {  ""web"": {  ""webPageDetails"": {  ""viewName"":""home""  }  } } });  NOTE On the first sendEvent() call, all XDM Views that should be rendered to the end-user will be fetched and cached. Subsequent sendEvent() calls with XDM Views passed in will be read from the cache and rendered without a server call. sendEvent() function examples This section outlines three examples showing how to invoke the sendEvent() function in React for a hypothetical e-commerce SPA. Example 1: A/B test home page The marketing team want to run A/B tests on the entire home page. To run A/B tests on the whole home site, sendEvent() must be invoked with the XDM viewName set to home: function onViewChange() { var viewName = window.location.hash; // or use window.location.pathName if router works on path and not hash viewName = viewName || 'home'; // view name cannot be empty // Sanitize viewName to get rid of any trailing symbols derived from URL if (viewName.startsWith('#') || viewName.startsWith('/')) {  viewName = viewName.substr(1); } alloy(""sendEvent"", {  ""renderDecisions"": true,  ""xdm"": {  ""web"": {   ""webPageDetails"": {   ""viewName"":""home""   }  }  } }); } // react router v4 const history = syncHistoryWithStore(createBrowserHistory(), store); history.listen(onViewChange); // react router v3 <Router history={hashHistory} onUpdate={onViewChange} > Example 2: Personalized products The marketing team want to personalize the second row of products by changing the price label color to red after a user clicks Load More. function onViewChange(viewName) { alloy(""sendEvent"", {  ""renderDecisions"": true,  ""xdm"": {  ""web"": {   ""webPageDetails"": {   ""viewName"": viewName   }  }  } }); } class Products extends Component { render() {  return (  <button type=""button"" onClick={this.handleLoadMoreClicked}>Load more</button>  ); } handleLoadMoreClicked() {  var page = this.state.page + 1; // assuming page number is derived from component’s state  this.setState({page: page});  onViewChange('PRODUCTS-PAGE-' + page); } } Example 3: A/B test delivery preferences The marketing team want to run an A/B test to see whether changing the color of the button from blue to red when Express Delivery is selected can boost conversions (as opposed to keeping the button color blue for both delivery options). To personalize content on the site depending on which delivery preference is selected, a View can be created for each delivery preference. When Normal Delivery is selected, the View can be named “checkout-normal”. If Express Delivery is selected, the View can be named “checkout-express”. function onViewChange(viewName) { alloy(""sendEvent"", {  ""renderDecisions"": true,  ""xdm"": {  ""web"": {   ""webPageDetails"": {   ""viewName"": viewName   }  }  } }); } class Checkout extends Component { render() {  return (  <div onChange={this.onDeliveryPreferenceChanged}>   <label>   <input type=""radio"" id=""normal"" name=""deliveryPreference"" value={""Normal Delivery""} defaultChecked={true}/>   <span> Normal Delivery (7-10 business days)</span>   </label>   <label>   <input type=""radio"" id=""express"" name=""deliveryPreference"" value={""Express Delivery""}/>   <span> Express Delivery* (2-3 business days)</span>   </label>  </div>  ); } onDeliveryPreferenceChanged(evt) {  var selectedPreferenceValue = evt.target.value;  onViewChange(selectedPreferenceValue); } } Using the Visual Experience Composer for a SPA When you have finished defining your XDM Views and implemented sendEvent() with those XDM Views passed in, the VEC will be able to detect these Views and allow users to create actions and modifications for A/B or XT activities. NOTE To use the VEC for your SPA, you must install and activate either the Firefox or Chrome VEC Helper Extension. Modifications Panel The Modifications panel captures the actions created for a particular View. All actions for a View are grouped under that View. Actions Clicking an action highlights the element on the site where this action will be applied. Each VEC action created under a View has the following icons: Information, Edit, Clone, Move, and Delete. These icons are explained in more detail in the table that follows.  Icon Description  Information Displays the details of the action. Edit Allows you to edit the properties of the action directly. Clone Clone the action to one or more Views that exist on the Modifications panel or to one or more Views that you have browsed and navigated to in the VEC. The action doesn’t have to necessarily exist in the Modifications panel.Note: After a clone operation is made, you must navigate to the View in the VEC via Browse to see whether the cloned action was a valid operation. If the action cannot be applied to the View, you will see an error. Move Moves the action to a Page Load Event or any other View that already exists in the modifications panel.Page Load Event: Any actions corresponding to the page load event are applied on the initial page load of your web application. Note: After a move operation is made, you must navigate to the View in the VEC via Browse to see whether the move was a valid operation. If the action cannot be applied to the View, you will see an error. Delete Deletes the action. Using the VEC for SPAs examples This section outlines three examples for using the Visual Experience Composer to create actions and modifications for A/B or XT activities. Example 1: Update “home” View Earlier in this document a View named “home” was defined for the entire home site. Now the marketing team want to update the “home” view in the following ways: Change the Add to Cart and Like buttons to a lighter share of blue. This should happen during page load because it involves changing components of the header. Change the Latest Products for 2019 label to Hottest Products for 2019 and change the text color to purple. To make these updates in the VEC, select Compose and apply those changes to the “home” view. Example 2: Change product labels For the “products-page-2” View, the marketing team would like to change the Price label to Sale Price and change the label color to red. To make these updates in the VEC, the following steps are required: Select Browse in the VEC. Select Products in the top navigation of the site. Select Load More once to view the second row of products. Select Compose in the VEC. Apply actions to change the text label to Sale Price and the color to red. Example 3: Personalize delivery preference styling Views can be defined at a granular level, such as a state or an option from a radio button. Earlier in this document Views were defined for delivery preferences, “checkout-normal” and “checkout-express”. The marketing team wants to change the button color to red for the “checkout-express” View. To make these updates in the VEC, the following steps are required: Select Browse in the VEC. Add products to the cart on the site. Select the cart icon in the top right corner of the site. Select Checkout your Order. Select the Express Delivery radio button under Delivery Preferences. Select Compose in the VEC. Change the Pay button color to red. NOTE The “checkout-express” View does not appear in the Modifications panel until the Express Delivery radio button is selected. This is because the sendEvent() function is executed when the Express Delivery radio button is selected, therefore the VEC is not aware of the “checkout-express” View until the radio button is selected.  Business.Adobe.com resources   "
18,experienceleague.adobe.com docs experience platform edge personalization hybrid personalization.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization hybrid personalization.html?lang=en.txt.  Hybrid personalization using Web SDK and Edge Network Server API Overview Hybdrid personalization describes the process of retrieving personalization content server-side, using the Edge Network Server API, and rendering it client-side, using the Web SDK. You can use hybrid personalization with personalization solutions like Adobe Target or Offer Decisioning, the difference being the contents of the Server API payload. Prerequisites Before implementing hybrid personalization on your web properties, make sure you meet the following conditions: You have decided what personalization solution you want to use. This will have an impact on the contents of the Server API payload. You have access to an application server which you can use to make the Server API calls. You have access to the Edge Network Server API. You have correctly configured and deployed Web SDK on the pages that you want to personalize. Flow diagram The flow diagram below describes the order of the steps taken to deliver hybrid personalization. Any existing cookies previously stored by the browser, prefixed with kndctr_, are included in the browser request. The client web browser requests the web page from your application server. When the application server receives the page request, it makes a POST request to the Server API interactive data collection endpoint to fetch personalization content. The POST request contains an event and a query. The cookies from the previous step, if available, are included in the meta>state>entries array. The Server API returns the personalization content to your application server. The application server returns an HTML response to the client browser, containing the identity and cluster cookies. On the client page, the Web SDK applyResponse command is called, passing in the headers and body of the Server API response from the previous step. The Web SDK renders page load Visual Experience Composer (VEC) offers automatically, because the renderDecisions flag is set to true. Form-based JSON offers are manually applied through the applyPersonalization method, to update the DOM based on the personalization offer. For form-based activities, display events must manually be sent, to indicate when the offer has been displayed. This is done via the sendEvent command. Cookies Cookies are used to persist user identity and cluster information. When using a hybrid implementation, the Web application server handles the storing and sending of these cookies during the request lifecycle. Cookie Purpose Stored by Sent by  kndctr_AdobeOrg_identity Contains user identity details. Application server Application server kndctr_AdobeOrg_cluster Indicates which Edge Network cluster should be used to fulfill the requests. Application server Application server Request placement Server API requests are required to get propositions and send a display notification. When using a hybrid implementation, the application server makes these requests to the Server API. Request Made by  Interact request to retrieve propositions Application server Interact request to send display notifications Application server Analytics implications When implementing hybrid personalization, you must pay special attention so that page hits are not counted multiple times in Analytics. When you configure a datastream for Analytics, events are automatically forwarded so that page hits are captured. The sample from this implementation uses two different datastreams: A datastream configured for Analytics. This datastream is used for Web SDK interactions. A second datastream without an Analytics configuration. This datastream is used for Server API requests. This way, the server-side request do not register any Analytics events, but the client-side requests do. This leads to Analytics requests being accurately counted. Server-side request The sample request below illustrates a Server API request that your application server could use to retrieve the personalization content. IMPORTANT This sample request uses Adobe Target as a personalization solution. Your request might vary according to your chosen personalization solution. API format POST /ee/v2/interact Request curl -X POST ""https://edge.adobedc.net/ee/v2/interact?dataStreamId={DATASTREAM_ID}"" -H ""Content-Type: text/plain"" -d '{ ""event"":{  ""xdm"":{   ""web"":{    ""webPageDetails"":{    ""URL"":""http://localhost/""    },    ""webReferrer"":{    ""URL"":""""    }   },   ""identityMap"":{    ""FPID"":[    {     ""id"":""xyz"",     ""authenticatedState"":""ambiguous"",     ""primary"":true    }    ]   },   ""timestamp"":""2022-06-23T22:21:00.878Z""  },  ""data"":{  } }, ""query"":{  ""identity"":{   ""fetch"":[    ""ECID""   ]  },  ""personalization"":{   ""schemas"":[    ""https://ns.adobe.com/personalization/default-content-item"",    ""https://ns.adobe.com/personalization/html-content-item"",    ""https://ns.adobe.com/personalization/json-content-item"",    ""https://ns.adobe.com/personalization/redirect-item"",    ""https://ns.adobe.com/personalization/dom-action""   ],   ""decisionScopes"":[    ""__view__"",    ""sample-json-offer""   ]  } }, ""meta"":{  ""state"":{   ""domain"":""localhost"",   ""cookiesEnabled"":true,   ""entries"":[    {    ""key"":""kndctr_XXX_AdobeOrg_identity"",    ""value"":""abc123""    },    {    ""key"":""kndctr_XXX_AdobeOrg_cluster"",    ""value"":""or2""    }   ]  } } }'  Parameter Type Required Description  dataStreamId String Yes. The ID of the datastream that you use to pass the interactions to the Edge Network. See the datastreams overview to learn how to configure a datastream. requestId String No A random ID for correlating internal server requests. If none is provided, the Edge Network will generate one and return it in the response. Server-side response The sample response below shows what the Server API response might look like. { ""requestId"":""5c539bd0-33bf-43b6-a054-2924ac58038b"", ""handle"":[  {   ""payload"":[    {    ""id"":""XXX"",    ""namespace"":{     ""code"":""ECID""    }    }   ],   ""type"":""identity:result""  },  {   ""payload"":[    {    ""...""    },    {    ""...""    }   ],   ""type"":""personalization:decisions"",   ""eventIndex"":0  } ] } Client-side request On the client page, the Web SDK applyResponse command is called, passing in the headers and body of the server-side response. alloy(""applyResponse"", {  ""renderDecisions"": true,  ""responseHeaders"": {   ""cache-control"": ""no-cache, no-store, max-age=0, no-transform, private"",   ""connection"": ""close"",   ""content-encoding"": ""deflate"",   ""content-type"": ""application/json;charset=utf-8"",   ""date"": ""Mon, 11 Jul 2022 19:42:01 GMT"",   ""server"": ""jag"",   ""strict-transport-security"": ""max-age=31536000; includeSubDomains"",   ""transfer-encoding"": ""chunked"",   ""vary"": ""Origin"",   ""x-adobe-edge"": ""OR2;9"",   ""x-content-type-options"": ""nosniff"",   ""x-konductor"": ""22.6.78-BLACKOUTSERVERDOMAINS:7fa23f82"",   ""x-rate-limit-remaining"": ""599"",   ""x-request-id"": ""5c539bd0-33bf-43b6-a054-2924ac58038b"",   ""x-xss-protection"": ""1; mode=block""  },  ""responseBody"": {   ""requestId"": ""5c539bd0-33bf-43b6-a054-2924ac58038b"",   ""handle"": [   {    ""payload"": [    {    ""id"": ""XXX"",    ""namespace"": {     ""code"": ""ECID""    }    }    ],    ""type"": ""identity:result""   },   {    ""payload"": [    {...},    {...}    ],    ""type"": ""personalization:decisions"",    ""eventIndex"": 0   }   ]  } } ).then(applyPersonalization(""sample-json-offer"")); Form-based JSON offers are manually applied through the applyPersonalization method, to update the DOM based on the personalization offer. For form-based activities, display events must manually be sent, to indicate when the offer has been displayed. This is done via the sendEvent command. function sendDisplayEvent(decision) {  const { id, scope, scopeDetails = {} } = decision;  alloy(""sendEvent"", {   xdm: {    eventType: ""decisioning.propositionDisplay"",    _experience: {     decisioning: {      propositions: [       {        id: id,        scope: scope,        scopeDetails: scopeDetails,       },      ],     },    },   },  }); } Sample application To help you experiment and learn more about this type of personalization, we provide a sample application which you can download and use for testing. You can download the application, along with detailed instructions on how to use it, from this GitHub repository. Business.Adobe.com resources   "
19,experienceleague.adobe.com docs experience platform edge fundamentals installing the sdk.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals installing the sdk.html?lang=en.txt.  Install the SDK There are three supported ways to use Adobe Experience Platform Web SDK: The preferred way to use Adobe Experience Platform Web SDK is via the Data Collection UI or Experience Platform UI. Adobe Experience Platform Web SDK is also available on a content delivery network (CDN) for you to use. Use the NPM library which exports EcmaScript 5 and EcmaScript 2015 (ES6) modules. Option 1: Installing the tag extension For documentation on the tag extension, see the Tags documentation Option 2: Installing the prebuilt standalone version The prebuilt version is available on a CDN. You can reference the library on the CDN directly on your page, or download and host it on your own infrastructure. It is available in minified and unminified formats. The unminified version is helpful for debugging purposes. URL structure: https://cdn1.adoberesources.net/alloy/[VERSION]/alloy.min.js OR alloy.js for the non-minified version. For example: Minified: https://cdn1.adoberesources.net/alloy/2.14.0/alloy.min.js Un-minified: https://cdn1.adoberesources.net/alloy/2.14.0/alloy.js Adding the code The prebuilt standalone version requires a “base code” added directly to the page. Copy and paste the following “base code” as high as possible in the <head> tag of your HTML: <script> !function(n,o){o.forEach(function(o){n[o]||((n.__alloyNS=n.__alloyNS|| []).push(o),n[o]=function(){var u=arguments;return new Promise( function(i,l){n[o].q.push([i,l,u])})},n[o].q=[])})} (window,[""alloy""]); </script> <script src=""https://cdn1.adoberesources.net/alloy/2.14.0/alloy.min.js"" async></script> The “base code” creates a global function named alloy. Use this function to interact with the SDK. If you would like to name the global function something else, change the alloy name as follows: <script> !function(n,o){o.forEach(function(o){n[o]||((n.__alloyNS=n.__alloyNS|| []).push(o),n[o]=function(){var u=arguments;return new Promise( function(i,l){n[o].q.push([i,l,u])})},n[o].q=[])})} (window,[""mycustomname""]); </script> <script src=""https://cdn1.adoberesources.net/alloy/2.14.0/alloy.min.js"" async></script> In this example, the global function is renamed mycustomname, instead of alloy. IMPORTANT To avoid potential problems, use a name containing at least one character that is not a digit and that doesn’t conflict with the name of a property already found on window. This base code, in addition to creating a global function, also loads additional code contained within an external file (alloy.js) hosted on a server. By default, this code is loaded asynchronously to allow your webpage to be as performant as possible. This is the recommended implementation. Supporting Internet Explorer This SDK uses promises, which are a method of communicating the completion of asynchronous tasks. The Promise implementation used by the SDK is natively supported by all target browsers except Internet Explorer. To use the SDK on Internet Explorer, you must have window.Promise polyfilled. To determine if you already have window.Promise polyfilled: Open your website in Internet Explorer. Open the browser’s debugging console. Type window.Promise into the console, then press Enter. If something other than undefined appears, you likely have already polyfilled window.Promise. Another way to determine if window.Promise is polyfilled is by loading your website after having completed the above installation instructions. If the SDK throws an error mentioning something about a promise, you likely have not polyfilled window.Promise. If you’ve determined you must polyfill window.Promise, include the following script tag above the previously provided base code: <script src=""https://cdn.jsdelivr.net/npm/promise-polyfill@8/dist/polyfill.min.js""></script> This tag loads a script that ensures that window.Promise is a valid Promise implementation. NOTE If you choose to load a different Promise implementation, be sure it supports Promise.prototype.finally. Loading the JavaScript file synchronously As explained in the section Adding the code, the base code you have copied and pasted into your website’s HTML loads an external file. The external file contains the core functionality of the SDK. Any command you attempt to execute while this file loads is queued and then processed after the file is loaded. Loading the file asynchronously is the most performant method of installation. Under certain circumstances, however, you might want to load the file synchronously (more details about these circumstances will be documented later). Doing so blocks the rest of the HTML document from being parsed and rendered by the browser until the external file has been loaded and executed. This additional delay before displaying primary content to users is typically discouraged, but can make sense depending on the circumstances. To load the file synchronously instead of asynchronously, remove the async attribute from the second script tag as shown below: <script> !function(n,o){o.forEach(function(o){n[o]||((n.__alloyNS=n.__alloyNS|| []).push(o),n[o]=function(){var u=arguments;return new Promise( function(i,l){n[o].q.push([i,l,u])})},n[o].q=[])})} (window,[""alloy""]); </script> <script src=""https://cdn1.adoberesources.net/alloy/2.14.0/alloy.min.js""></script> Option 3: Using the NPM package Adobe Experience Platform Web SDK is also available as an NPM package. NPM is the package manager for JavaScript. Installing the NPM package allows you to have control of the build process for the Adobe Experience Platform Web SDK JavaScript. The NPM package exposes EcmaScript version 5 modules or EcmaScript version 2015 (ES6) modules meant to be run in the browser. npm install @adobe/alloy The NPM package of the Adobe Experience Platform Web SDK exposes a createInstance function. This function is used to create an instance. The name option passed to the function controls the prefix used in logging. Below are examples of using the package. Using the package as an ECMAScript 2015 (ES6) module import { createInstance } from ""@adobe/alloy""; const alloy = createInstance({ name: ""alloy"" }); alloy(""config"", { ... }); alloy(""sendEvent"", { ... }); NOTE The NPM package relies on CommonJS modules; therefore, when using a bundler, make sure the bundler supports CommonJS modules. Some bundlers, such as Rollup, require a plugin that provides CommonJS support. Using the package as an ECMAScript 5 module var alloyLibrary = require(""@adobe/alloy""); var alloy = alloyLibrary.createInstance({ name: ""alloy"" }); alloy(""config"", { ... }); alloy(""sendEvent"", { ... }); Supporting Internet Explorer The Adobe Experience Platform SDK uses promises, which are a method of communicating the completion of asynchronous tasks. The Promise implementation used by the SDK is natively supported by all target browsers except Internet Explorer. To use the SDK on Internet Explorer, you must have window.Promise polyfilled. One library you could use to polyfill promise is promise-polyfill. See the promise-polyfill documentation for more information on how to install with NPM. NOTE If you choose to load a different Promise implementation, be sure it supports Promise.prototype.finally.  Business.Adobe.com resources  Email Optimization Customer Analytics Offer Management Omnichannel Marketing Customer Journey Analytics Identity Management "
20,experienceleague.adobe.com docs experience platform edge consent supporting consent.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge consent supporting consent.html?lang=en.txt.  Supporting customer consent preferences To respect your user’s privacy, you might want to ask for the user’s consent before allowing the SDK to use user-specific data for certain purposes. Currently, the SDK only allows users to opt in or out of all purposes, but in the future Adobe hopes to provide more granular control over specific purposes. If the user opts in to all purposes, the SDK is allowed to perform the following tasks: Send data to and from Adobe’s servers. Read and write cookies or web storage items. If the user opts out of all purposes, the SDK does not perform any of these tasks. Configuring consent By default the user is opted in to all purposes. To prevent the SDK from performing the above tasks until the user opts in, pass ""defaultConsent"": ""pending"" during SDK configuration as follows: alloy(""configure"", { ""edgeConfigId"": ""ebebf826-a01f-4458-8cec-ef61de241c93"", ""imsOrgId"": ""ADB3LETTERSANDNUMBERS@AdobeOrg"", ""defaultConsent"": ""pending"" }); When the default consent for the general purpose is set to pending, attempting to execute any commands that depend on user opt-in preferences (for example, the sendEvent command) results in the command being queued within the SDK. These commands are not processed until you have communicated the user’s opt-in preferences to the SDK. NOTE Commands are only queued in memory. They are not saved across page loads. If you do not want to collect events that occurred before the user’s opt-in preferences are set, you can pass ""defaultConsent"": ""out"" during SDK configuration. Attempting to execute any commands that depend on user opt-in preferences will have no effect until you have communicated the user’s opt-in preferences to the SDK. NOTE Currently, the SDK supports only a single all or nothing purpose. Although we plan to build out a more robust set of purposes or categories that will correspond to the different Adobe capabilities and product offerings, the current implementation is an all or nothing approach to opt-in. This only applies to Adobe Experience Platform Web SDK and NOT other Adobe JavaScript libraries. At this point, you might prefer to ask the user to opt in somewhere within your user interface. After the user’s preferences have been collected, communicate these preferences to the SDK. Communicating consent preferences via the Adobe Experience Platform standard The SDK supports versions 1.0 and 2.0 of the Adobe Experience Platform consent standard. Currently, the 1.0 and 2.0 standards only support automatic enforcement of an all or nothing consent preference. The 1.0 standard is being phased out in favor of the 2.0 standard. The 2.0 standard allows you to add additional consent preferences that can be used to manually enforce consent preference. Using the Adobe standard version 2.0 If you are using Adobe Experience Platform, you will need include a privacy schema field group to your profile schema. See Governance, privacy, and security in Adobe Experience Platform for more information on the Adobe standard version 2.0. You can add data inside the value object below corresponding to the schema of the consents field of the Consents and Preferences profile field group. If the user opts in, execute the setConsent command with the collect preference set to y as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""2.0"",  value: {   collect: {   val: ""y""   },   metadata: {   time: ""2021-03-17T15:48:42-07:00""   }  }  }] }); The time field should specify when the user last updated their consent preferences. If the user chooses to opt out, execute the setConsent command with the collect preference set to n as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""2.0"",  value: {   collect: {   val: ""n""   },   metadata: {   time: ""2021-03-17T15:51:30-07:00""   }  }  }] }); Using the Adobe standard version 1.0 If the user opts in, execute the setConsent command with the general option set to in as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""1.0"",  value: {   general: ""in""  }  }] }); If the user chooses to opt out, execute the setConsent command with the general option set to out as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""1.0"",  value: {   general: ""out""  }  }] }); Communicating consent preferences via the IAB TCF standard The SDK supports recording a user’s consent preferences provided through the Interactive Advertising Bureau Europe (IAB) Transparency and Consent Framework (TCF) standard. The consent string can be set through the same setConsent command as above like this: alloy(""setConsent"", {  consent: [{  standard: ""IAB TCF"",  version: ""2.0"",  value: ""CO1Z4yuO1Z4yuAcABBENArCsAP_AAH_AACiQGCNX_T5eb2vj-3Zdt_tkaYwf55y3o-wzhhaIse8NwIeH7BoGP2MwvBX4JiQCGBAkkiKBAQdtHGhcCQABgIhRiTKMYk2MjzNKJLJAilsbe0NYCD9mnsHT3ZCY70--u__7P3fAwQgkwVLwCRIWwgJJs0ohTABCOICpBwCUEIQEClhoACAnYFAR6gAAAIDAACAAAAEEEBAIABAAAkIgAAAEBAKACIBAACAEaAhAARIEAsAJEgCAAVA0JACKIIQBCDgwCjlACAoAAAAA.YAAAAAAAAAAA"",  gdprApplies: true  }] }); When the consent is set in this way, Real-Time Customer Profile is updated with the consent information. For this to work, the profile XDM schema needs to contain the Profile Privacy schema field group. When sending events, the IAB consent information needs to be added manually to the event XDM object. The SDK does not automatically include the consent information in the events. To send the consent information in events, the Experience Event Privacy field group needs to be added to the Experience Event schema. Sending multiple standards in one request The SDK also supports sending more than one consent object in a request. alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""2.0"",  value: {   collect: {   val: ""y""   },   metadata: {   time: ""2021-03-17T15:48:42-07:00""   }  }  },{  standard: ""IAB TCF"",  version: ""2.0"",  value: ""CO1Z4yuO1Z4yuAcABBENArCsAP_AAH_AACiQGCNX_T5eb2vj-3Zdt_tkaYwf55y3o-wzhhaIse8NwIeH7BoGP2MwvBX4JiQCGBAkkiKBAQdtHGhcCQABgIhRiTKMYk2MjzNKJLJAilsbe0NYCD9mnsHT3ZCY70--u__7P3fAwQgkwVLwCRIWwgJJs0ohTABCOICpBwCUEIQEClhoACAnYFAR6gAAAIDAACAAAAEEEBAIABAAAkIgAAAEBAKACIBAACAEaAhAARIEAsAJEgCAAVA0JACKIIQBCDgwCjlACAoAAAAA.YAAAAAAAAAAA"",  gdprApplies: true  }] }); Persistence of consent preferences After you have communicated user preferences to the SDK using the setConsent command, the SDK persists the user’s preferences to a cookie. The next time the user loads your website in the browser, the SDK will retrieve and use these persisted preferences to determine whether or not events can be sent to Adobe. You will need to store the user preferences independently to be able to show the consent dialog with the current preferences. There is no way to retrieve the user preferences from the SDK. To make sure that the user preferences stay in sync with the SDK, you can call the setConsent command on every page load. The SDK will only make a server call if the preferences have changed. Syncing identities while setting consent When the default consent is pending or out, the setConsent may be the first request that goes out and establishes identity. Because of this, it may be important to sync identities on the first request. The identity map can be added to setConsent command just like on the sendEvent command. See Retrieving Experience Cloud ID Business.Adobe.com resources   "
21,experienceleague.adobe.com docs experience platform edge web sdk faq.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge web sdk faq.html?lang=en.txt.  Frequently asked questions This guide provides answers to questions that are often asked about the Adobe Experience Platform Web SDK. What is Adobe Experience Platform Web SDK? Adobe Experience Platform Web SDK is a client-side JavaScript library that allows customers of Adobe Experience Cloud to interact with the various services in the Experience Cloud. It sends data in a solution-agnostic way (XDM) to Adobe Experience Platform Edge Network, which then maps the data to solution specific formats and destinations and sends it in real time. More information Adobe Summit presentation How does Adobe Experience Platform Web SDK differ from previous solutions? Prior to Adobe Experience Platform SDK Currently, you have to deploy different JavaScript libraries based on each individual solution. Each solution has its own JavaScript library, schema, and domain. None of these libraries were built to work with each other. Cross-solution and Adobe Experience Platform use cases require these disparate libraries to be interdependent, causing deployment friction. Although tags in Platform make it as easy as possible to deploy and manage these libraries, there are still issues with: Library size (too much Adobe code on a page) Performance (sites take too long to load) Multiple calls for a single use case Waiting for ECID return before personalization calls (causes lag) Fractured data collection (what is an evar?) Schema confusion between solutions (A4T) Lots of other less optimal things Also, there is currently no JavaScript library that sends data directly to Adobe Experience Platform. With Adobe Experience Platform Web SDK The new Web SDK sends data for the following solutions to a single destination (Adobe Experience Platform Edge Network) and solves for the most common aforementioned solution use cases. Adobe Analytics Adobe Audience Manager Adobe Target Visitor ID Adobe Experience Platform Other solutions will follow later this year. Adobe Experience Platform Web SDK can also send data directly to Adobe Experience Platform. This data is in XDM and is mapped to the server-side solution schema. What is the value of this new Web SDK? Performance: The web SDK is smaller than using all of the current Adobe libraries and provides significantly faster page loads. Simplicity: The combination of XDM, Web SDK, tags, Experience Edge, Adobe Experience Cloud solutions, and Adobe Experience Platform creates an easy-to-understand and simple-to-follow data collection story. XDM: The solution-agnostic schema you use to send data to Adobe. No more tagging for evars or mboxes. Adobe Experience Platform Web SDK: Makes it easy to send and receive data to Adobe Experience Platform Edge Network. Tags: Simplifies deployment and configuration of the Web SDK (and any other JavaScript tags) on a site. Experience Edge: Easily route the data to Adobe Experience Platform and solutions in the format they need. Adobe Experience Platform and Adobe solutions: Enable their value proposition. Control: Because all of the data is using a single and connected stream of data, you can logically follow and control what the data looks like at every millisecond of its journey, to and from applications. Modern and ready for the future: The Web SDK and its connection to the Experience Edge Network has enabled Adobe to significantly modernize how Adobe deals with data collection, personalization, consent and the future of 3rd party cookies. (It enables a first party domain, managed by Adobe.) Time-to-value: Adobe has worked hard (and will continue) to make it as easy as possible to deploy the Web SDK via tags and map client-side data to XDM. After that work is done, all other Adobe solutions and Adobe Experience Platform services can be turned on or off server-side. For example, if you are using this for Adobe Analytics and you want to turn on Target or Experience Platform, you can simply flip a toggle on the Datastream configuration and light up those use cases. What is Alloy? Alloy is the code name for Adobe Experience Platform Web SDK. It is used within the SDK’s source code and filename, though Adobe Experience Platform Web SDK is the official name. Do customers need to buy Adobe Experience Platform to use the Web SDK? No. Any Adobe Digital Experience customer can use the Adobe Experience Platform Web SDK free of charge. Customers who wish to use the Web SDK will need to configure the right permissions to create schemas, datasets, identity namespaces, and datastreams in the Data Collection UI or Experience Platform UI. For more information on configuring these permissions see our documentation on data collection permissions management. Who should use the Web SDK? Adobe Experience Platform Web SDK has been developed for the following people: Adobe Experience Platform users If you need to send data directly from a device to Adobe Experience Platform, this is the officially recommended way. Adobe is aware that using the Adobe Analytics connector is faster if the customer already has Adobe Analytics, but it is not the long-term strategy for data collection. Adobe Experience Cloud solution customers New Adobe Analytics, Adobe Audience Manager, and Adobe Target customers should start with the new Web SDK and not use legacy libraries. Existing customers who want to get the most optimized implementation possible should use the new Web SDK. How do I get access to start using Adobe Experience Platform Web SDK? The Web SDK is currently available to the general public and can be used to send data to Adobe Experience Cloud products. The ability to send data to third-party solutions is coming in the near future. The SDK is free, is hosted by Adobe for free, and can be downloaded so you can host it on your own servers, if desired, for free. Platform Web SDK requires access to Datastream configurations and the Adobe Experience Platform XDM schema builder, in order for Adobe’s servers to properly handle inbound data coming from the SDK. If you would like to get access, contact your Customer Success Manager (CSM) to start the request process. What use cases are currently supported by the Web SDK? The Web SDK is quickly evolving. More use cases are being worked on. You can find the list of use cases currently supported here. Do current customers have to retag their sites? It depends. Adobe Experience Platform Web SDK can be deployed in two different styles. A future migration document will provide additional details. Just another tag: If the site is already tagged for solutions and you can’t retag, but you want to send data to Adobe Experience Platform Edge Network for Experience Platform use cases or the upcoming event forwarding features (see below), you can add the alloy.js tag to the site, where it works as “just another tag.” The one and only tag: If you want to use the Web SDK for an Experience Cloud solution, you must use it for all of the solutions on that page. For example, if your site is already tagged for Adobe Analytics and you want to use it for Target, you need to use it for both, as well as for any others in the future. In other words, if you decide to use Adobe Experience Platform Web SDK for non-solution use cases, you can tag the site with alloy.js and move on as if it’s a new solution. If you want to use it for Adobe Analytics, Target, or Audience Manager, or for application use cases, you might have to remove any of the legacy code on your page. Can I migrate the ECIDs when I start using Alloy so my website visitors don’t start showing up as new visitors? Yes, Adobe Experience Platform Web SDK provides an Identity Migration feature. Follow the instructions for ID migration in the Platform Web SDK identity documentation for more details. How is the Web SDK different than tags? Tags in Experience Platform manage the device code. Use them to more easily deploy the code. They are free and powerful. Adobe Experience Platform Web SDK is the official name of the new code that would be deployed by tags for Adobe use cases. It is also free and powerful. alloy.js is the file name of the Adobe Experience Platform Web SDK code. Do I have to use tags to deploy the Web SDK? No. You can download the alloy.js file yourself. However: Adobe Experience Platform Web SDK requires something called a Datastream ID so the edge network can identify the stream and determine what to do with the data. This ID is created within Experience Platform. This doesn’t mean you have to use the UI to create properties or deploy the JavaScript code, but you do need to use tags to create a configuration ID. Tags are not only the best available tag and SDK manager, it makes it very easy to deploy alloy.js and map data to XDM schemas. If you decide not to use tags, you will have to manage deploying alloy.js, eventing, and mapping your data into XDM before sending it. This is a much more difficult process than using tags. It is recommended that you use tags to deploy alloy.js, even if it’s the only tag you use it for. What is event forwarding? If you use our SDKs and send XDM to the Experience Edge, these new features event forwarding allows you to install new server-side extensions and map that data to anything–and send it anywhere–from our edge network. Think of it as “data collection as a service”. This will be available for a cost, as well as being bundled as part of Adobe Experience Platform. What is a CNAME or First Party Domain and why does it matter? More information about a CNAME is available in the Adobe documentation Does the Adobe Experience Platform Web SDK use cookies? If so, what cookies does it use? Yes, currently the Web SDK uses anywhere between one to seven cookies depending on your implementation. Below is a list of the cookies that you might see with the Web SDK and the way that they are used: Name maxAge Friendly age Description  kndct_orgid_identity 34128000 395 days The identity cookie stores the ECID, as well as other information related to the ECID. kndctr_orgid_consent_check 7200 2 hours This cookie stores the user’s consent preference for the website. kndctr_orgid_consent 15552000 180 days This session-based cookie signals the server to look up the consent preferences server side. kndctr_orgid_cluster 1800 30 minutes This cookie stores the Experience Edge region that is serving the current user’s requests. The region is used in the URL path so that Experience Edge can route the request to the correct region. This cookie has a 30 minutes lifetime, so that if a user connects with a different IP address, the request can be routed to the closest region. mbox 63072000 2 years This cookie appears when the Target migration setting is set to true. This will allow the Target mbox cookie to be set by the Web SDK. mboxEdgeCluster 1800 30 minutes This cookie appears when the Target migration setting is set to true. This cookie allows the Web SDK to communicate the correct edge cluster to at.js so that Target profiles can stay in sync as users navigate across a site. AMCV_###@AdobeOrg 34128000 395 days This cookie only appears when ID migration on the Adobe Experience Platform Web SDK is enabled. This cookie helps when transitioning to Web SDK while some parts of the site are still using visitor.js. See the idMigrationEnabled documentation to read more about this setting. When using the Web SDK, the Edge Network sets one or more of the cookies above. The Edge Network sets all the cookies with the secure and sameSite=""none"" attributes. If you currently have both secure and non-secure sections on your website, this could interfere with user identification. When a user navigates from a secure section of the site to a non-secure section, the Edge Network generates a new ECID with the request. Which browsers does the Adobe Experience Platform Web SDK support? The Adobe Experience Platform Web SDK is designed to work optimally in the latest versions of Google Chrome, Safari, Firefox, Internet Explorer 11, and Microsoft Edge Chromium. You may have trouble using certain features on older versions of browsers. Where can I get more info about Adobe Experience Platform Web SDK? Documentation Source Code  Business.Adobe.com resources   "
22,experienceleague.adobe.com docs experience platform edge fundamentals executing commands.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals executing commands.html?lang=en.txt.  Execute commands After the base code has been implemented on your webpage, you can begin executing commands with the SDK. You do not need to wait for the external file (alloy.js) to be loaded from the server before executing commands. If the SDK has not finished loading, commands are queued and processed by the SDK as soon as possible. Commands are executed using the following syntax. alloy(""commandName"", options); The commandName tells the SDK what to do, while options are the parameters and data you would like to pass into a command. Because the available options depend on the command, please consult the documentation for more details about each command. A note on promises Promises are fundamental to how the SDK communicates with the code on your webpage. A promise is a common programming structure and is not specific to this SDK or even JavaScript. A promise acts as a proxy for a value that is not known when the promise is created. Once the value is known, the promise is “resolved” with the value. Handler functions can be associated with a promise, so that you can be notified when the promise has been resolved or when an error has occurred in the process of resolving the promise. To learn more about promises, please read this tutorial or any of the other resources on the web. Handling success or failure Each time a command is executed, a promise is returned. The promise represents the eventual completion of the command. In the example below, you can use then and catch methods to determine when the command has succeeded or failed. alloy(""commandName"", options) .then(function(result) {  // The command succeeded.  // ""value"" is whatever the command returned }) .catch(function(error) {  // The command failed.  // ""error"" is an error object with additional information }); If knowing when the command succeeds is not important to you, you may remove the then call. alloy(""commandName"", options) .catch(function(error) {  // The command failed.  // ""error"" is an error object with additional information }); Likewise, if knowing when the command fails is not important to you, you may remove the catch call. alloy(""commandName"", options) .then(function(result) {  // The command succeeded.  // ""value"" will be whatever the command returned }); Response objects All promises returned from commands are resolved with a result object. The result object will contain data depending on the command and the user’s consent. For example, library info is passed as a property of the results object in the following command. alloy(""getLibraryInfo"") .then(function(result) {  console.log(result.libraryInfo.version);  console.log(result.libraryInfo.commands);  console.log(result.libraryInfo.configs); }); Consent If a user has not given their consent for a particular purpose, the promise will still be resolved; however, the response object will only contain the information that can be provided in the context of what the user has consented to. Business.Adobe.com resources  Enterprise Governance Personalized Experiences Mobile Forms Digital Signage Data Connectors Cohort Analysis "
23,experienceleague.adobe.com docs experience platform edge fundamentals supported use cases.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals supported use cases.html?lang=en.txt.  Supported use cases The Adobe Experience Platform Web SDK powers a wide variety of personalization use cases, in conjunction with other Adobe solutions, such as Adobe Analytics, Audience Manager, Target, and Experience Platform. For detailed information on implementing supported use cases, check their corresponding documentation in the Web SDK use cases project page. Business.Adobe.com resources   "
24,experienceleague.adobe.com docs experience platform edge extension web sdk ext release notes.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge extension web sdk ext release notes.html?lang=en.txt.  Adobe Experience Platform Web SDK extension release notes This document covers the release notes for the Adobe Experience Platform Web SDK tag extension. For the latest release notes on the SDK itself, see the Platform Web SDK release notes. Version 2.15.1 - January 26, 2023 Fixed an issue where users without access to datastreams could not edit the extension configuration. Added support for surfaces in the sendEvent action. Contains version 2.14.0 of Adobe Experience Platform Web SDK. Version 2.14.1 - October 13, 2022 Fixed an issue where the Web SDK does not honor the ID from the Experience Cloud ID Service. Contains version 2.13.1 of the Adobe Experience Platform Web SDK Library. Version 2.14.0 - September 28, 2022 Added new targetMigrationEnabled configuration that enables page by page full migration. Added an apply response action to enable hybrid server-client implementations. Added high entropy user-agent client hints context option. Contains version 2.13.0 of the Adobe Experience Platform Web SDK Library. Version 2.13.0 - June 29, 2022 Fixed the sort order of numerical properties in the XDM Object data element such as eVars. Contains version 2.12.0 of the Adobe Experience Platform Web SDK Library. Version 2.12.0 - June 13, 2022 Updated the identityMap data element to populate the namespace options based on the sandboxes defined by the extension settings. Added Redirect with identity action to allow cross-domain identity sharing. Added documentation links to the sendEvent action. Upgraded React Spectrum UI library. Multiple user interface enhancements. Contains version 2.11.0 of the Adobe Experience Platform Web SDK Library. Version 2.11.2 - May 3, 2022 Contains version 2.10.1 of the Adobe Experience Platform Web SDK Library. Version 2.11.1 - April 22, 2022 Fixed configure command error from version 2.11.0. Contains version 2.10.0 of the Adobe Experience Platform Web SDK Library. Version 2.11.0 - April 22, 2022 Improved Tags UI performance. Add sandbox selectors to datastreams extension configuration. Contains version 2.10.0 of the Adobe Experience Platform Web SDK Library. Version 2.10.0 - March 10, 2022 Update the prehiding snippet that is available to copy on the configuration page to work with the updated Adobe Target VEC editor. Contains version 2.9.0 of the Adobe Experience Platform Web SDK library. Version 2.9.0 - January 19, 2022 Contains version 2.8.0 of the Adobe Experience Platform Web SDK library. Version 2.8.0 - October 26, 2021 Contains version 2.7.0 of the Adobe Experience Platform Web SDK library. Additional information from Experience Edge are available in the Send Event Complete event, including inferences and destinations. The format of these properties may change as these features are currently rolling out as part of a Beta. For more information, see Tracking Events. Version 2.7.3 - September 7, 2021 Contains version 2.6.4 of the Adobe Experience Platform Web SDK library. There’s no longer a deprecation warning for container.buildInfo.environment. Version 2.7.0 - August 16, 2021 Contains version 2.6.3 of the Adobe Experience Platform Web SDK library. When using the Identity Map data element type, identifiers whose IDs resolve to values that are not populated strings are now automatically removed from the identity map. Fixed an error that would occur when attempting to save a data element using the XDM Object data element type and no schema was selected. Improved user interface typography. Version 2.6.2 - August 4, 2021 Contains version 2.6.2 of the Adobe Experience Platform Web SDK library. Version 2.6.1 - July, 29, 2021 Contains version 2.6.1 of the Adobe Experience Platform Web SDK library. Version 2.6.0 - July 27, 2021 Contains version 2.6.0 of the Adobe Experience Platform Web SDK library. Labels, descriptions, and error messages using the term “edge configuration” have been changed to use the term “datastream” to align with the latest Adobe Experience Platform terminology. In the extension configuration view, support was added for handling large numbers of datastreams and datastream environments. In the XDM Object data element view, support was added for handling large numbers of schemas. A Send Event Complete event type has been added, which can be used to run a rule after an event has been sent to the server and a response received. More documentation will be available soon. The Decisions Received event type has been deprecated. Please use the Send Event Complete event type instead. The user interface and error handling has been generally improved. Version 2.5.0 - June 1, 2021 Contains version 2.5.0 of the Adobe Experience Platform Web SDK library. Added a data field to the Send Event action. Upcoming documentation will describe how this can be used in certain scenarios. On the XDM Object data element view, an issue was fixed where an error was thrown if the user had access to Adobe Experience Platform sandboxes but not to the sandbox configured as the default for the organization. On the XDM Object data element view, an issue was fixed where a required schema field would be considered invalid even if the parent object contained no values. Version 2.4.0 - March 9, 2021 Contains version 2.4.0 of the Adobe Experience Platform Web SDK library. Added “document unloading” checkbox to Send Event action UI. Added support for an out option when configuring default consent which drops all events until consent is received (the existing pending option queues events and sends them once consent is received). Added a tooltip to the default consent field. Added support for Adobe’s Consent 2.0 standard. A better error now displays in the XDM Object data element UI if the user’s access token is invalid or improperly provisioned. Fixed a cross-origin error (which does not affect the operation of the extension) that showed up on the browser developer console when viewing an XDM Object data element. Version 2.3.0 - November 4, 2020 Contains version 2.3.0 of the Adobe Experience Platform Web SDK library. Added support for using a data element when configuring default consent. Added ability to search for XDM schemas with the XDM Object data element type. Added cloning of XDM data within the Send Event action type to ensure any subsequent changes to the XDM data object will not be reflected in the request. Version 2.2.0 - October 1, 2020 When customers tried to create an XDM object from sandbox schemas, they were running into authentication issues. The API that calls Platform is now aware of environments so users are only presented with those schemas that they have access to edit. When using the identityMap data element, the namespaces is now pre-populated in a dropdown so you don’t have to fill this in manually. Revamped the UI for the xdmObject data element. In the new UI, you can see which fields have been populated without having to enter each item in the object. Version 2.1.1 - August 26, 2020 Fixes an issue where Adobe Experience Platform sandboxes on the XDM Object view displayed incorrectly. If, when using this version of the extension, an expected sandbox is not displayed in the list, the user should check with their Adobe Experience Platform administrator to ensure access permissions are set correctly. Version 2.1.0 - August 5, 2020 Breaking Change: Remove the syncIdentity action and support passing those IDs in the sendEvent action instead. Please disable any existing rule using this action before upgrading your extension. Update to Alloy v. 2.1.0 (Release Notes) Support IAB 2.0 Consent Standard in the setConsent action. Support overriding the dataset ID in the sendEvent action. Add a new Data Element of type IdentityMap which can be used to populate the identityMap entry in the XDM Object Data Element which is now enabled, and in the setConsent action. Support passing an identity map in the setConsent action. Support choosing an Platform sandbox in the XDM Object Data Element. Version 1.0.0 - May 26, 2020 Support selecting the environment from the Configuration Service. Version 0.1.2 - May 4, 2020 Renamed configId to edgeConfigId. Renamed viewStart to renderDecisions, set to false by default. If set to true, Personalization offers are fetched and auto-rendered. Changes related to Get Decisions: Removed the getDecisions command. Added a scopes option to the sendEvent command. Decisions are returned in the sendEvent resolved promise. Added a built-in __view__ scope which will result in returning page/view wide offers. (VEC offers in Target for example.) Those decisions return from the sendEvent command only if renderDecisions is set to false. Added a Decisions Received event, which fires when decisions become available. Combined multiple Personalization notifications under a single server call. Fixed issue in Event Merge ID where it was being reset every time the data element was referenced. Renamed the setCustomerIds action to syncIdentity. Added a getIdentity command. This can be consumed via custom code only for now. Enabling debug using _satellite now enables debugging in the Adobe Experience Platform Web SDK. Added support for typed values in the XDM Object: Booleans, Numbers and Decimals. Version 0.0.10 - March 16, 2020 Combined the concepts of Opt-In & Opt-Out under Consent, and added a new setConsent command. Added a new Data Element of type XDM Object which allows mapping from JavaScript/JSON to XDM. Version 0.0.7 - February 18, 2020 Removed idSyncContainerId, datasetId, schemaId, urlDestinationsEnabled, and cookieDestinationsEnabled options Added support for hyphens in edgeDomain option value Request made during ID migration is sent to demdex endpoint to improve cross-domain identification when demdex cookie is not set Request made during ID migration always expects a response to ensure identity cookie gets set When executing an invalid command, a list of valid command names will be logged in the console Added checkbox for toggling third-party cookie support to the tag extension. This disables calls to demdex.net Version 0.0.5 - December 20, 2019 Add Activity Tracker configs to tag extension Expose EventType and EventMergeId on event command Add onBeforeEventSend config to tag extension Add edgeBasePath config to tag extension Version 0.0.3 - November 25, 2019 New Merge ID and Type fields on the Send Event action. Merge ID maps to xdm.eventMergeID in the XDM schema and Type maps to xdm.eventType in the XDM schema. Version 0.0.2 - November 18, 2019 Initial release  Business.Adobe.com resources   "
25,experienceleague.adobe.com docs experience platform edge personalization adobe target a4t server side.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target a4t server side.html?lang=en.txt.  Server-side logging for A4T data in Platform Web SDK The Adobe Experience Platform Web SDK allows you to implement Adobe Analytics for Target (A4T) functionality on Platform Edge Network. When server-side logging is enabled, all Analytics hits sent through the Edge Network are augmented with Target details on the server side, without having to go through the hit stitching process. Server-side logging for Analytics is enabled when Analytics is enabled in the datastream configuration: The following diagram shows how data flows through the system when server-side Analytics Logging is enabled: Next steps This guide covered server-side logging for A4T data in the Web SDK. See the guide on client-side logging for more information on how to handle A4T data on the client side. Business.Adobe.com resources   "
26,experienceleague.adobe.com docs experience platform edge fundamentals tracking events.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals tracking events.html?lang=en.txt.  Track events To send event data to Adobe Experience Cloud, use the sendEvent command. The sendEvent command is the primary way to send data to the Experience Cloud, and to retrieve personalized content, identities, and audience destinations. Data sent to Adobe Experience Cloud falls into two categories: XDM data Non-XDM data Sending XDM data XDM data is an object whose content and structure matches a schema you have created within Adobe Experience Platform. Learn more about how to create a schema. Any XDM data that you would like to be part of your analytics, personalization, audiences, or destinations should be sent using the xdm option. alloy(""sendEvent"", { ""xdm"": {  ""commerce"": {  ""order"": {   ""purchaseID"": ""a8g784hjq1mnp3"",   ""purchaseOrderNumber"": ""VAU3123"",   ""currencyCode"": ""USD"",   ""priceTotal"": 999.98  }  } } }); Some time may pass between when the sendEvent command is executed and when the data is sent to the server (for example, if the Web SDK library has not fully loaded or consent has not yet been received). If you intend to modify any part of the xdm object after executing the sendEvent command, it is highly recommended that you clone the xdm object before executing the sendEvent command. For example: var clone = function(value) { return JSON.parse(JSON.stringify(value)); }; var dataLayer = { ""commerce"": {  ""order"": {  ""purchaseID"": ""a8g784hjq1mnp3"",  ""purchaseOrderNumber"": ""VAU3123"",  ""currencyCode"": ""USD"",  ""priceTotal"": 999.98  } } }; alloy(""sendEvent"", { ""xdm"": clone(dataLayer) }); // This change will not be reflected in the data sent to the // server for the prior sendEvent command. dataLayer.commerce = null; In this example, the data layer is cloned by serializing it to JSON, then deserializing it. Next, the cloned result is passed into the sendEvent command. Doing so ensures that the sendEvent command has a snapshot of the data layer as it existed when the sendEvent command was executed so that later modifications to the original data layer object will not be reflected in the data sent to the server. If you are using an event-driven data layer, cloning your data is likely already handled automatically. For example, if you are using the Adobe Client Data Layer, the getState() method provides a computed, cloned snapshot of all prior changes. This is also handled for you automatically if you are using the Adobe Experience Platform Web SDK tag extension. NOTE There is a 32 KB limit on the data that can be sent in each event in the XDM field. Sending non-XDM data Data that does not match an XDM schema should be sent using the data option of the sendEvent command. This feature is supported in versions 2.5.0 and higher of the Web SDK. This is useful if you need to update an Adobe Target profile or send Target Recommendations attributes. Read more about these Target features. In the future, you will be able to send your full data layer under the data option and map it to XDM server-side. How to send Profile and Recommendations attributes to Adobe Target: alloy(""sendEvent"", { data: {  __adobe: {  target: {   ""profile.gender"": ""female"",   ""profile.age"": 30,   ""entity.id"": ""123"",   ""entity.genre"": ""Drama""  }  } } }); Setting eventType In XDM ExperienceEvent schemas, there is an optional eventType field. This holds the primary event type for the record. Setting an event type can help you differentiate between the different events you will be sending in. XDM provides several predefined event types that you can use or you always create your own custom event types for your use cases. Refer to the XDM documentation for a list of all the predefined event types. These event types will be shown in a dropdown if using the tag extension or you can always pass them in without tags. They can be passed in as part of the xdm option. alloy(""sendEvent"", { ""xdm"": {  ""eventType"": ""commerce.purchases"",  ""commerce"": {  ""order"": {   ""purchaseID"": ""a8g784hjq1mnp3"",   ""purchaseOrderNumber"": ""VAU3123"",   ""currencyCode"": ""USD"",   ""priceTotal"": 999.98  }  } } }); Alternatively, the eventType can be passed into the event command using the type option. Behind the scenes, this is added to the XDM data. Having the type as an option allows you to more easily set the eventType without having to modify the XDM payload. var myXDMData = { ... }; alloy(""sendEvent"", { ""xdm"": myXDMData, ""type"": ""commerce.purchases"" }); Overriding the dataset ID In some use cases, you might want to send an event to a dataset other than the one configured in the Configuration UI. For that you need to set the datasetId option on the sendEvent command: var myXDMData = { ... }; alloy(""sendEvent"", { ""xdm"": myXDMData, ""type"": ""commerce.checkout"", ""datasetId"": ""YOUR_DATASET_ID"" }); Adding identity information Custom identity information can also be added to the event. See Retrieving Experience Cloud ID. Using the sendBeacon API It can be tricky to send event data just before the web page user has navigated away. If the request takes too long, the browser might cancel the request. Some browsers have implemented a web standard API called sendBeacon to allow data to be more easily collected during this time. When using sendBeacon, the browser makes the web request in the global browsing context. This means the browser makes the beacon request in the background and does not hold up the page navigation. To tell Adobe Experience Platform Web SDK to use sendBeacon, add the option ""documentUnloading"": true to the event command. Here is an example: alloy(""sendEvent"", { ""documentUnloading"": true, ""xdm"": {  ""commerce"": {  ""order"": {   ""purchaseID"": ""a8g784hjq1mnp3"",   ""purchaseOrderNumber"": ""VAU3123"",   ""currencyCode"": ""USD"",   ""priceTotal"": 999.98  }  } } }); Browsers have imposed limits to the amount of data that can be sent with sendBeacon at one time. In many browsers, the limit is 64K. If the browser rejects the event because the payload is too large, Adobe Experience Platform Web SDK falls back to using its normal transport method (for example, fetch). Handling responses from events If you want to handle a response from an event, you can be notified of a success or failure as follows: alloy(""sendEvent"", { ""renderDecisions"": true, ""xdm"": {  ""commerce"": {  ""order"": {   ""purchaseID"": ""a8g784hjq1mnp3"",   ""purchaseOrderNumber"": ""VAU3123"",   ""currencyCode"": ""USD"",   ""priceTotal"": 999.98  }  } } }).then(function(result) {  // Tracking the event succeeded. }) .catch(function(error) {  // Tracking the event failed. }); The result object The sendEvent command returns a promise that is resolved with a result object. The result object contains the following properties: propositions: The Personalization offers that the visitor has qualified for. Learn more about propositions. decisions: This property is deprecated. Please use propositions instead. destinations: Segments from Adobe Experience Platform that can be shared with external personalization platforms, content management systems, ad servers, and other applications that are running on customer websites. Learn more about destinations. WARNING destinations is currently in Beta. The documentation and functionality are subject to change. Modifying events globally If you want to add, remove, or modify fields from the event globally, you can configure an onBeforeEventSend callback. This callback is called every time an event is sent. This callback is passed in an event object with an xdm field. Modify content.xdm to change the data that is sent with the event. alloy(""configure"", { ""edgeConfigId"": ""ebebf826-a01f-4458-8cec-ef61de241c93"", ""orgId"": ""ADB3LETTERSANDNUMBERS@AdobeOrg"", ""onBeforeEventSend"": function(content) {  // Change existing values  content.xdm.web.webPageDetails.URL = xdm.web.webPageDetails.URL.toLowerCase();  // Remove existing values  delete content.xdm.web.webReferrer.URL;  // Or add new values  content.xdm._adb3lettersandnumbers.mycustomkey = ""value""; } }); xdm fields are set in this order: Values passed in as options to the event command alloy(""sendEvent"", { xdm: ... }); Automatically collected values. (See Automatic Information.) The changes made in the onBeforeEventSend callback. A few notes on the onBeforeEventSend callback: Event XDM can be modified during the callback. After the callback has returned, any modified fields and values of the content.xdm and content.data objects are sent with the event. onBeforeEventSend: function(content){ //sets a query parameter in XDM const queryString = window.location.search; const urlParams = new URLSearchParams(queryString); content.xdm.marketing.trackingCode = urlParams.get('cid') } If the callback throws an exception, processing for the event discontinues and the event is not sent. If the callback returns the boolean value of false, event processing discontinues, without an error, and the event is not sent. This mechanism allows for certain events to be easily ignored by examining the event data and returning false if the event should not be sent. NOTE Care should be taken to avoid returning false on the first event on a page. Returning false on the first event can negatively impact personalization.  onBeforeEventSend: function(content) {  // ignores events from bots  if (MyBotDetector.isABot()) {  return false;  } } Any return value other than the boolean false will allow the event to process and send after the callback. Events can be filtered by examining the event type (See Event Types.):  onBeforeEventSend: function(content) {  // augments XDM if link click event is to a partner website  if (   content.xdm.eventType === ""web.webinteraction.linkClicks"" &&   content.xdm.web.webInteraction.URL ===   ""http://example.com/partner-page.html""  ) {   content.xdm.partnerWebsiteClick = true;  } } Potential actionable errors When sending an event, an error might be thrown if the data being sent is too large (over 32KB for the full request). In this case, you need to reduce the amount of data being sent. Business.Adobe.com resources  Account Based Marketing Mobile Commerce Preference Centers Data Analytics Tv Advertising Video Advertising "
27,experienceleague.adobe.com docs experience platform edge fundamentals user agent client hints.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals user agent client hints.html?lang=en.txt.  User-Agent Client Hints Overview Every time a web browser makes a request to a web server, the header of the request includes information about the browser and the environment on which the browser is running. All this data is aggregated into a string, called the User-Agent string. Here is an example of what a User-Agent string looks like on a request coming from a Chrome browser running on a Mac OS device. NOTE Over the years, the amount of browser and device information included in the User-Agent string has grown and modified multiple times. The example below shows a selection of the most common User-Agent information. Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36`  Field Value  Software name Chrome Software version 105 Full software version 105.0.0.0 Layout engine name AppleWebKit Layout engine version 537.36 Operating system Mac OS X Operating system version 10.15.7 Device Intel Mac OS X 10_15_7 Use cases User-Agent strings have long been used to provide marketing and development teams with important insights into how browsers, operating systems and devices display site content, as well as how users interact with websites. User-Agent strings are also used to block spam and filter bots that crawl sites for a variety of additional purposes. User-Agent strings in Adobe Experience Cloud Adobe Experience Cloud solutions utilize the User-Agent strings in various ways. Adobe Analytics utilizes the User-Agent string to augment and derive additional information related to operating systems, browsers, and devices used to visit a website. Adobe Audience Manager and Adobe Target qualify end-users for segmentation and personalization campaigns, based on the information provided by the User-Agent string. Introducing User-Agent Client Hints In recent years, site owners and marketing vendors have used User-Agent strings along with other information included in request headers to create digital fingerprints. These fingerprints can be used as a means of identifying users without their knowledge. Despite the important purpose that User-Agent strings serve for site owners, browser developers have decided to change how User-Agent strings operate, to limit potential privacy issues for end-users. The solution they developed is called User-Agent Client Hints. Client hints still allow websites to collect necessary browser, operating system and device information, while also providing increased protection against covert tracking methods, such as fingerprinting. Client hints allow website owners to access much of the same information available in the User-Agent string, but in a more privacy-preserving way. When modern browsers send a user to a web server, the entire User-Agent string is sent on every request, regardless of whether it is required. Client hints, on the other hand, enforce a model where the server must ask the browser for the additional information it wants to know about the client. Upon receiving this request, the browser can apply its own policies or user configuration to determine what data is returned. Instead of exposing the entire User-Agent string by default on all requests, access is now managed in an explicit and auditable way. Browser support User-Agent Client Hints were introduced with Google Chrome version 89. Additional Chromium-based browsers support the Client Hints API, such as: Microsoft Edge Opera Brave Chrome for Android Opera for Android Samsung Internet Categories There are two categories of User-Agent Client Hints: Low entropy client hints High entropy client hints Low entropy client hints Low entropy client hints include basic information which cannot be used to fingerprint users. Information such as browser brand, platform, and whether the request is coming from a mobile device. Low entropy client hints are enabled by default in Web SDK, and are passed on every request. HTTP header JavaScript Included in User-Agent by default Included in client hints by default  Sec-CH-UA brands Yes Yes Sec-CH-UA-Platform platform Yes Yes Sec-CH-UA-Mobile mobile Yes Yes High entropy client hints High entropy client hints are more detailed information about the client device, such as platform version, architecture, model, bitness (64 bit or 32 bit platforms), or full operating system version. This information could potentially be used in fingerprinting. HTTP header JavaScript Included in User-Agent by default Included in Client Hints by default  Sec-CH-UA-Platform-Version platformVersion Yes No Sec-CH-UA-Arc architecture Yes No Sec-CH-UA-Model model Yes No Sec-CH-UA-Bitness Bitness Yes No Sec-CH-UA-Full-Version-List fullVersionList Yes No High entropy client hints are disabled by default in Web SDK. To enable them you must manually configure the Web SDK to request high entropy client hints. High entropy client hints impact on Experience Cloud solutions Some Adobe Experience Cloud solutions rely on information included in high entropy client hints when generating reports. If you do not enable high entropy client hints in your environment, the Adobe Analytics and Audience Manager reports and traits described below will not work. Adobe Analytics reports relying on high entropy client hints The Operating system dimension includes opertating system version which is stored as a high entropy client hint. If high entropy clients hints is not enabled, operating system version may be inaccurate for hits collected from Chromium browsers. Audience Manager traits relying on high entropy client hints Google has updated the Chrome browser functionality to minimize the information collected via the User-Agent header. As a result, Audience Manager customers using DIL will no longer receive reliable information for traits based on platform-level keys. Audience Manager customers who use platform-level keys for targeting must switch to Experience Platform Web SDK instead of DIL, and enable High Entropy Client Hints to continue receiving reliable trait data. Enabling high entropy client hints To enable high entropy client hints on your Web SDK deployment, you must include the additional highEntropyUserAgentHints context option, as described in the configuration documentation, alongside your existing configuration. For example, to retrieve high entropy client hints from web properties, your configuration would look like this: context: [""highEntropyUserAgentHints"", ""web""] Example Client hints contained in the headers of the first request made by the browser to a web server will contain the browser brand, the major version of the browser, and an indicator of whether the client is a mobile device. Each piece of data will have its own header value rather than being grouped into a single User-Agent string, as shown below: Sec-CH-UA: ""Chromium"";v=""101"", ""Google Chrome"";v=""101"", "" Not;A Brand"";v=""99"" Sec-CH-UA-Mobile: ?0 Sec-CH-UA-Platform: ""macOS The equivalent User-Agent header for the same browser would look like this: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.54 Safari/537.36 While the information is similar, the first request to the server contains client hints. These only include a subset of what is available in the User-Agent string. Missing from the request is the operating system architecture, full operating system version, layout engine name, layout engine version, and the full browser version. However, on subsequent requests, the Client Hints API allows web servers to ask for additional details about the device. When these values are requested, depending on browser policy or user settings, the browser response may include that information. Below is an example of the JSON object that is returned by the Client Hints API when high entropy values are requested: { ""architecture"":""x86"", ""bitness"":""64"", ""brands"":[  {   ""brand"":"" Not A;Brand"",   ""version"":""99""  },  {   ""brand"":""Chromium"",   ""version"":""100""  },  {   ""brand"":""Google Chrome"",   ""version"":""100""  } ], ""fullVersionList"":[  {   ""brand"":"" Not A;Brand"",   ""version"":""99.0.0.0""  },  {   ""brand"":""Chromium"",   ""version"":""100.0.4896.127""  },  {   ""brand"":""Google Chrome"",   ""version"":""100.0.4896.127""  } ], ""mobile"":false, ""model"":"""", ""platformVersion"":""12.2.1"" }  Business.Adobe.com resources   "
28,experienceleague.adobe.com docs experience platform edge release notes.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge release notes.html?lang=en.txt.  Release notes This document covers the release notes for the Adobe Experience Platform Web SDK. For the latest release notes on the Web SDK tag extension, see the Web SDK tag extension release notes. Version 2.14.0 - January 25, 2023 New features (Beta) Added support for AJO surfaces and propositions. Fixes and improvements Fixed an issue with Adobe Target VEC custom code actions where the code was injected into an alternate location than with at.js. Fixed an issue where in some edge cases the “referer” header was not set properly on requests to the Edge Network. Fixed an issue where user agent client hint properties could be set to an incorrect type. Fixed an issue where placeContext.localTime did not match the schema. Version 2.13.1 - October 13, 2022 Fixed an issue where visitor migration does not work if window.Visitor is defined after configure. This is especially an issue when running with Adobe Tags. Fixed an issue where device.screenWidth and device.screenHeight were populated as strings in some environments. Version 2.13.0 - September 28, 2022 New features Added support for Page by Page Full Migration. The Adobe Target profile will now be preserved as a visitor moves between at.js and Web SDK pages. Added configurable support for high entropy User-Agent Client Hints. Added support for the new applyResponse command. This enables hybrid personalization via the Edge Network Server API. QA mode links now work across multiple pages. Fixes and improvements Fixed an issue where personalization click tracking metrics were not updated when link tracking was disabled. Updated commands to throw a validation error when unknown options are specified. The _experience.decisioning.propositionEventType property is now populated when automatically sending display and interaction personalization events. Added duplicated namespace validation for the getIdentity command. Added duplicated decision scope validation for the sendEvent command. Version 2.12.0 - June 29, 2022 Change the requests to the Edge Network to use the cluster cookie location hint as part of the URL. This ensures that users who change their location (e.g. through a VPN or driving with mobile devices, etc) mid session hit the same edge and have the same personalization profile. Stringify configured functions in the getLibraryInfo command response. Version 2.11.0 - June 13, 2022 New features You can now deliver personalized experiences more accurately, by sharing visitor IDs between mobile apps and mobile web content, and across domains. See the dedicated documentation to learn more. You can now render or execute an array of propositions from Adobe Target into single-page applications, without incrementing the analytics metrics. This reduces reporting errors and increases analytics accuracy. See the dedicated documentation to learn more. Added additional information to the getLibraryInfo command including available commands and the final configuration for the instance. Fixes and improvements Updated cookie settings to use sameSite=""none"" and secure flag on HTTPS pages. Fixed an issue where personalized content was not applied correctly when using the eq pseudo selector. Fixed an issue where localTimezoneOffset could fail Experience Platform validation. Version 2.10.1 - May 3, 2022 Fixed an issue where multiple persistent iframes were created for ID syncs and segment destinations. Version 2.10.0 - April 22, 2022 Use a persistent iframe for all ID syncs and segment destinations. Fixed an issue where merged metrics propositions were duplicated in the sendEvent result. Version 2.9.0 - March 10, 2022 Added support for tracking control (default) Adobe Target experiences. Optimized the view-change events for single page applications. The display notification is now included with the view-change event when personalized experiences are rendered. Removed console warning when no eventType is present. Fixed an issue where the propositions property was only returned from a sendEvent command when experiences were requested or retrieved from the cache. The propositions property will now always be defined as an array. Fixed an issue where hidden containers were not shown when there was an error returned from the Adobe Experience Edge. Fixed an issue where the interact events were not being counted in Adobe Target. This was fixed by adding the view name to the XDM at web.webPageDetails.viewName. Fix broken documentation links in console messages. Version 2.8.0 - January 19, 2022 Support shadow DOM selectors for personalization. Renamed personalization event types. (display and click become decisioning.propositionDisplay and decisioning.propositionInteract) Fixed an issue where HTML offers with inline script tags added the script tags twice to the page even though the script was only run once. Version 2.7.0 - October 26, 2021 Expose additional information from Experience Edge in the return value from sendEvent, including inferences and destinations. The format of these properties may change as these features are currently rolling out as part of a Beta. For more information, see Tracking Events. Version 2.6.4 - September 7, 2021 Fixed an issue where set HTML Adobe Target actions applied to the head element were replacing the entire head content. Now set HTML actions applied to the head element are changed to append HTML. Version 2.6.3 - August 16, 2021 Fixed an issue where objects not intended for public use were exposed through the resolved promise from the configure command. Version 2.6.2 - August 4, 2021 Fixed an issue where a warning about the deprecation of result.decisions (provided by the sendEvent command) would be logged to the console even when the result.decisions property wasn’t being accessed. No warning will be logged when accessing the result.decisions property, but the property is still deprecated. Version 2.6.1 - July 29, 2021 Fixed an issue where rendering personalization for a single-page app view that has no personalization content would throw an error and cause the promise returned from the sendEvent command to be rejected. Version 2.6.0 - July 27, 2021 Provides more personalization content in the sendEvent resolved promise, including Adobe Target response tokens. When the sendEvent command is executed, a promise is returned, which is eventually resolved with a result object containing information received from the server. Previously, this result object included a property named decisions. This decisions property has been deprecated. A new property, propositions, has been added. This new property provides customers with access to more personalization content, including response tokens. Version 2.5.0 - June 2021 Added support for redirect personalization offers. Automatically collected viewport widths and heights that are negative values will no longer be sent to the server. When an event is canceled by returning false from an onBeforeEventSend callback, a message is now logged. Fixed an issue where specific pieces of XDM data intended for a single event was included across multiple events. Version 2.4.0 - March 2021 The SDK can now be installed as an npm package. Added support for an out option when configuring default consent, which drops all events until consent is received (the existing pending option queues events and sends them once consent is received). The onBeforeEventSend callback can now be used to prevent an event from being sent. Now uses an XDM schema field group instead of meta.personalization when sending events about personalized content being rendered or clicked. The getIdentity command now returns the edge region ID alongside the identity. Warnings and errors received from the server have been improved and are handled in a more appropriate fashion. Added support for Adobe’s Consent 2.0 standard. Consent preferences, when received, are hashed and stored in local storage for an optimized integration among CMPs, Platform Web SDK, and Platform Edge Network. If you are collecting consent preferences, we now encourage you to call setConsent on every page load. Two monitoring hooks, onCommandResolved and onCommandRejected, have been added. Bug Fix: Personalization interaction notification events would contain duplicate information about the same activity when a user navigated to a new single-page app view, back to the original view, and clicked an element qualifying for conversion. Bug Fix: If the first event sent by the SDK had documentUnloading set to true, sendBeacon would be used to send the event, resulting in an error regarding an identity not being established. Version 2.3.0 - November 2020 Added nonce support to allow for stricter content security policies. Added personalization support for single-page applications. Improved compatibility with other on-page JavaScript code that may be overwriting window.console APIs. Bug Fix: sendBeacon was not being used when documentUnloading was set to true or when link clicks were automatically tracked. Bug Fix: A link wouldn’t be automatically tracked if the anchor element contained HTML content. Bug Fix: Certain browser errors containing a read-only message property were not handled appropriately, resulting in a different error being exposed to the customer. Bug Fix: Running the SDK within an iframe would result in an error if the iframe’s HTML page was from a different subdomain than the parent window’s HTML page. Version 2.2.0 - October 2020 Bug Fix: The Opt-in object was blocking Alloy from making calls when idMigrationEnabled is true. Bug Fix: Make Alloy aware of requests that should return personalization offers to prevent a flickering issue. Version 2.1.0 - August 2020 Remove the syncIdentity command and support passing those IDs in the sendEvent command. Support IAB 2.0 Consent Standard. Support passing additional IDs in the setConsent command. Support overriding the datasetId in the sendEvent command. Support Alloy Monitors (Read more) Pass environment: browser in the implementation details context data.  Business.Adobe.com resources   "
29,experienceleague.adobe.com docs experience platform edge personalization manage flicker.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization manage flicker.html?lang=en.txt.  Manage flicker When trying to render personalization content, the SDK has to ensure there is no flicker. Flicker, also called FOOC (Flash of Original Content), is when an original content is briefly displayed before the alternative appears during testing/personalization. The SDK tries to apply CSS styles to elements of the page to ensure those elements are hidden until the personalization content is rendered successfully. The flicker management functionality has a few phases: Prehiding Preprocessing Rendering Prehiding During the prehiding phase, the SDK uses the prehidingStyle configuration option to create an HTML style tag and append it to the DOM to make sure that big portions of the page are hidden. If you are unsure which portions of the page will be personalized, it is recommended to set prehidingStyle to body { opacity: 0 !important }. This ensures that the whole page is hidden. This, however has the downside of leading to worse page rendering performance reported by tools like Lighthouse, Web Page Tests, etc. To have the best page rendering performance, it is recommended to set prehidingStyle to a list of container elements that contain the portions of the page that will be personalized. Assuming you have an HTML page like the one below and you know that only bar and bazz container elements will be ever personalized: <html> <head> </head> <body>  <div id=""foo"">  Foo foo foo  </div>  <div id=""bar"">  Bar bar bar  </div>  <div id=""bazz"">  Bazz bazz bazz  </div> </body> </html> Then the prehidingStyle should be set to something like #bar, #bazz { opacity: 0 !important }. Preprocessing The preprocessing phase kicks in once the SDK has received the personalized content from the server. During this phase, the response is preprocessed, making sure that elements that have to contain personalized content are hidden. After these elements are hidden, the HTML style tag that has been created based on the prehidingStyle configuration option is removed and the HTML body or the hidden container elements are shown. Rendering After all the personalization content has been rendered successfully, or if there was any error, all previously hidden elements are shown to make sure that there are no hidden elements on the page that were hidden by the SDK. Managing flicker when SDK is loaded asynchronously The recommendation is to always load the SDK asynchronously to get the best page rendering performance. However, this has some implications for the rendering of personalized content. When the SDK is loaded asynchronously, it is required to use the prehiding snippet. The prehiding snippet must be added before the SDK in the HTML page. Here is an example snippet that hides the entire body: <script> !function(e,a,n,t){  if (a) return;  var i=e.head;if(i){  var o=e.createElement(""style"");  o.id=""alloy-prehiding"",o.innerText=n,i.appendChild(o),  setTimeout(function(){o.parentNode&&o.parentNode.removeChild(o)},t)}}  (document, document.location.href.indexOf(""adobe_authoring_enabled"") !== -1, ""body { opacity: 0 !important }"", 3000); </script> To make sure that the HTML body or the container elements are not hidden for an extended period of time, the prehiding snippet uses a timer that by default removes the snippet after 3000 milliseconds. The 3000 milliseconds is the maximum wait time. If the response from the server has been received and processed sooner, then the prehiding HTML style tag is removed as soon as possible. Business.Adobe.com resources   "
30,experienceleague.adobe.com docs experience platform edge personalization ajo overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization ajo overview.html?lang=en.txt.  Using Adobe Journey Optimizer with the Platform Web SDK Adobe Experience Platform Web SDK can deliver and render personalized experiences managed in Adobe Journey Optimizer to the web channel. You can use a WYSIWYG editor, Adobe Journey Optimizer Web Campaign UI, to create, activate, and deliver your Journey Optimizer Web campaigns and personalization experiences. IMPORTANT Read the Adobe Journey Optimizer Web Channel documentation for information on getting started with Journey Optimizer Web experience authoring and reporting. Terminology Surface: A web surface is a web property identified by a URL where the Adobe Journey Optimizer experience content will be delivered. Propositions: In Adobe Journey Optimizer, propositions correlate to the experience selected from a Journey Optimizer Campaign. Enabling Adobe Journey Optimizer To start using Adobe Journey Optimizer, follow the steps below. Go through the prerequisites from the Adobe Journey Optimizer Web Experiences Guide, specifically: Set up Adobe Experience Cloud Visual Editing Helper. Enable Adobe Journey Optimizer in your datastream. Enable the Active-On-Edge Merge Policy option. Add the renderDecisions option to your events. Set renderDecisions to true for automatic rendering of delivered Journey Optimizer content propositions on your web page surfaces. alloy(""sendEvent"", {  ...,  ""renderDecisions"": true }) Optionally, specify additional surfaces in your events. By default, the Web SDK will automatically generate the web surface for the current web page and include it in the request to the Edge Network. If required, additional surfaces can be included in the request by specifying these in the personalization.surfaces option of the sendEvent command, or in the corresponding Surfaces Send event action configuration of the Web SDK Extension. alloy(""sendEvent"", {  ...  ""personalization"": {  ""surfaces"": [ ""web://my.site.com/about.html"", ""web://my.site.com/contact.html"" ]  } }) Event surfaces are included in the query.personalization.surfaces request field: { ""events"": [  {   ""query"": {    ""personalization"": {    ""schemas"": [     ...    ],    ""decisionScopes"": [     ""__view__""    ],    ""surfaces"": [     ""web://ajostage.weebly.com/""    ]    }   },   ...  } ] } Similar to other personalization features, you can add a prehiding snippet to hide only certain portions of the page while fetching experiences. Creating Adobe Journey Optimizer Web experiences Follow the web campaign authoring instructions from the Adobe Journey Optimizer Web Experiences Guide to create Journey Optimizer Web campaigns and experiences. Rendering personalized content See the documentation on rendering personalization content for more information. Adobe Journey Optimizer propositions for web surfaces are processed in a similar manner to the __view__ decision scope propositions. Specifically, when renderDecisions option is set to true in the sendEvent command these will be automatically rendered by the Web SDK. Sample Journey Optimizer content proposition: {  ""scope"": ""web://ajostage.weebly.com/"",  ""scopeDetails"": {   ""correlationID"": ""ccfaf19c-6360-4aea-b464-0cf924db5da7"",   ""characteristics"": {    ""eventToken"": ""eyJtZXNzYWdlRXhlY3V0aW9uIjp7Im1lc3NhZ2VFeGVjdXRpb25JRCI6ImEzNDYxYTMzLTc5MjktNGQyNS1hNmMxLTVkYzM2YWY1NzRmMyIsIm1lc3NhZ2VJRCI6ImNjZmFmMTljLTYzNjAtNGFlYS1iNDY0LTBjZjkyNGRiNWRhNyIsIm1lc3NhZ2VUeXBlIjoibWFya2V0aW5nIiwiY2FtcGFpZ25JRCI6IjEzN2JmMzllLWM1ODgtNGI1My1iODQxLTJiMWZiZDYxM2JkYiIsImNhbXBhaWduVmVyc2lvbklEIjoiMTA1NzY1MmEtZWYwNS00YjE3LWExMmUtY2FlOTQyOTFhMWFjIiwiY2FtcGFpZ25BY3Rpb25JRCI6ImViNTlmODQ4LTk5ZDYtNGE1OC05YmU4LTk4MjIxODU0NmYzNiIsIm1lc3NhZ2VQdWJsaWNhdGlvbklEIjoiYzg2NzFjZmItNDdjYS00YTVjLTg4Y2YtNzYwZDFlZjU1MzQyIn0sIm1lc3NhZ2VQcm9maWxlIjp7ImNoYW5uZWwiOnsiX2lkIjoiaHR0cHM6Ly9ucy5hZG9iZS5jb20veGRtL2NoYW5uZWxzL3dlYiIsIl90eXBlIjoiaHR0cHM6Ly9ucy5hZG9iZS5jb20veGRtL2NoYW5uZWwtdHlwZXMvd2ViIn0sIm1lc3NhZ2VQcm9maWxlSUQiOiI2YTViY2I3ZC02MmYxLTQ5NDItODRkMC02MzE5ZjM5Zjk1ZGUifX0=""   },   ""decisionProvider"": ""AJO"",   ""activity"": {    ""id"": ""137bf39e-c588-4b53-b841-2b1fbd613bdb#eb59f848-99d6-4a58-9be8-982218546f36""   }  },  ""id"": ""002321c0-dff5-4153-b171-a9dfb70b9750"",  ""items"": [   {    ""schema"": ""https://ns.adobe.com/personalization/dom-action"",    ""data"": {     ""uiData"": {      ""tagType"": ""Text"",      ""actionType"": ""changed""     },     ""content"": ""Welcome AJO!"",     ""prehidingSelector"": ""#wsite-content > DIV:nth-of-type(2) > DIV:nth-of-type(1) > DIV:nth-of-type(1) > DIV:nth-of-type(1) > DIV:nth-of-type(1) > DIV:nth-of-type(3) > FONT:nth-of-type(1) > SPAN:nth-of-type(1)"",     ""type"": ""setHtml"",     ""selector"": ""#wsite-content > DIV.wsite-section-wrap:eq(1) > DIV.wsite-section:eq(0) > DIV.wsite-section-content:eq(0) > DIV.container:eq(0) > DIV.wsite-section-elements:eq(0) > DIV.paragraph:eq(0) > FONT:nth-of-type(1) > SPAN:nth-of-type(1)""    },    ""id"": ""0a522f66-9e6a-4ded-b1d0-e9167f103290""   },   {    ""schema"": ""https://ns.adobe.com/personalization/dom-action"",    ""data"": {     ""uiData"": {      ""tagType"": ""Text"",      ""actionType"": ""changed""     },     ""content"": {      ""font-weight"": ""bold""     },     ""prehidingSelector"": ""#wsite-content > DIV:nth-of-type(2) > DIV:nth-of-type(1) > DIV:nth-of-type(1) > DIV:nth-of-type(1) > DIV:nth-of-type(1) > DIV:nth-of-type(3) > FONT:nth-of-type(1) > SPAN:nth-of-type(1)"",     ""type"": ""setStyle"",     ""selector"": ""#wsite-content > DIV.wsite-section-wrap:eq(1) > DIV.wsite-section:eq(0) > DIV.wsite-section-content:eq(0) > DIV.container:eq(0) > DIV.wsite-section-elements:eq(0) > DIV.paragraph:eq(0) > FONT:nth-of-type(1) > SPAN:nth-of-type(1)""    },    ""id"": ""66216ca5-5d0f-4239-a8c8-6bc4a5a7cbdb""   }  ] } Debugging To debug Adobe Journey Optimizer personalization implementations, use Web SDK debugging. Adobe Journey Optimizer debug traces are available when troubleshooting using Adobe Experience Platform Assurance. Check for events with the AJO: prefix.  Business.Adobe.com resources   "
31,experienceleague.adobe.com docs experience platform edge consent supporting consent.html?communicating consent preferences via the adobe standard=&lang=en.txt,"experienceleague.adobe.com docs experience platform edge consent supporting consent.html?communicating consent preferences via the adobe standard=&lang=en.txt.  Supporting customer consent preferences To respect your user’s privacy, you might want to ask for the user’s consent before allowing the SDK to use user-specific data for certain purposes. Currently, the SDK only allows users to opt in or out of all purposes, but in the future Adobe hopes to provide more granular control over specific purposes. If the user opts in to all purposes, the SDK is allowed to perform the following tasks: Send data to and from Adobe’s servers. Read and write cookies or web storage items. If the user opts out of all purposes, the SDK does not perform any of these tasks. Configuring consent By default the user is opted in to all purposes. To prevent the SDK from performing the above tasks until the user opts in, pass ""defaultConsent"": ""pending"" during SDK configuration as follows: alloy(""configure"", { ""edgeConfigId"": ""ebebf826-a01f-4458-8cec-ef61de241c93"", ""imsOrgId"": ""ADB3LETTERSANDNUMBERS@AdobeOrg"", ""defaultConsent"": ""pending"" }); When the default consent for the general purpose is set to pending, attempting to execute any commands that depend on user opt-in preferences (for example, the sendEvent command) results in the command being queued within the SDK. These commands are not processed until you have communicated the user’s opt-in preferences to the SDK. NOTE Commands are only queued in memory. They are not saved across page loads. If you do not want to collect events that occurred before the user’s opt-in preferences are set, you can pass ""defaultConsent"": ""out"" during SDK configuration. Attempting to execute any commands that depend on user opt-in preferences will have no effect until you have communicated the user’s opt-in preferences to the SDK. NOTE Currently, the SDK supports only a single all or nothing purpose. Although we plan to build out a more robust set of purposes or categories that will correspond to the different Adobe capabilities and product offerings, the current implementation is an all or nothing approach to opt-in. This only applies to Adobe Experience Platform Web SDK and NOT other Adobe JavaScript libraries. At this point, you might prefer to ask the user to opt in somewhere within your user interface. After the user’s preferences have been collected, communicate these preferences to the SDK. Communicating consent preferences via the Adobe Experience Platform standard The SDK supports versions 1.0 and 2.0 of the Adobe Experience Platform consent standard. Currently, the 1.0 and 2.0 standards only support automatic enforcement of an all or nothing consent preference. The 1.0 standard is being phased out in favor of the 2.0 standard. The 2.0 standard allows you to add additional consent preferences that can be used to manually enforce consent preference. Using the Adobe standard version 2.0 If you are using Adobe Experience Platform, you will need include a privacy schema field group to your profile schema. See Governance, privacy, and security in Adobe Experience Platform for more information on the Adobe standard version 2.0. You can add data inside the value object below corresponding to the schema of the consents field of the Consents and Preferences profile field group. If the user opts in, execute the setConsent command with the collect preference set to y as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""2.0"",  value: {   collect: {   val: ""y""   },   metadata: {   time: ""2021-03-17T15:48:42-07:00""   }  }  }] }); The time field should specify when the user last updated their consent preferences. If the user chooses to opt out, execute the setConsent command with the collect preference set to n as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""2.0"",  value: {   collect: {   val: ""n""   },   metadata: {   time: ""2021-03-17T15:51:30-07:00""   }  }  }] }); Using the Adobe standard version 1.0 If the user opts in, execute the setConsent command with the general option set to in as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""1.0"",  value: {   general: ""in""  }  }] }); If the user chooses to opt out, execute the setConsent command with the general option set to out as follows: alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""1.0"",  value: {   general: ""out""  }  }] }); Communicating consent preferences via the IAB TCF standard The SDK supports recording a user’s consent preferences provided through the Interactive Advertising Bureau Europe (IAB) Transparency and Consent Framework (TCF) standard. The consent string can be set through the same setConsent command as above like this: alloy(""setConsent"", {  consent: [{  standard: ""IAB TCF"",  version: ""2.0"",  value: ""CO1Z4yuO1Z4yuAcABBENArCsAP_AAH_AACiQGCNX_T5eb2vj-3Zdt_tkaYwf55y3o-wzhhaIse8NwIeH7BoGP2MwvBX4JiQCGBAkkiKBAQdtHGhcCQABgIhRiTKMYk2MjzNKJLJAilsbe0NYCD9mnsHT3ZCY70--u__7P3fAwQgkwVLwCRIWwgJJs0ohTABCOICpBwCUEIQEClhoACAnYFAR6gAAAIDAACAAAAEEEBAIABAAAkIgAAAEBAKACIBAACAEaAhAARIEAsAJEgCAAVA0JACKIIQBCDgwCjlACAoAAAAA.YAAAAAAAAAAA"",  gdprApplies: true  }] }); When the consent is set in this way, Real-Time Customer Profile is updated with the consent information. For this to work, the profile XDM schema needs to contain the Profile Privacy schema field group. When sending events, the IAB consent information needs to be added manually to the event XDM object. The SDK does not automatically include the consent information in the events. To send the consent information in events, the Experience Event Privacy field group needs to be added to the Experience Event schema. Sending multiple standards in one request The SDK also supports sending more than one consent object in a request. alloy(""setConsent"", {  consent: [{  standard: ""Adobe"",  version: ""2.0"",  value: {   collect: {   val: ""y""   },   metadata: {   time: ""2021-03-17T15:48:42-07:00""   }  }  },{  standard: ""IAB TCF"",  version: ""2.0"",  value: ""CO1Z4yuO1Z4yuAcABBENArCsAP_AAH_AACiQGCNX_T5eb2vj-3Zdt_tkaYwf55y3o-wzhhaIse8NwIeH7BoGP2MwvBX4JiQCGBAkkiKBAQdtHGhcCQABgIhRiTKMYk2MjzNKJLJAilsbe0NYCD9mnsHT3ZCY70--u__7P3fAwQgkwVLwCRIWwgJJs0ohTABCOICpBwCUEIQEClhoACAnYFAR6gAAAIDAACAAAAEEEBAIABAAAkIgAAAEBAKACIBAACAEaAhAARIEAsAJEgCAAVA0JACKIIQBCDgwCjlACAoAAAAA.YAAAAAAAAAAA"",  gdprApplies: true  }] }); Persistence of consent preferences After you have communicated user preferences to the SDK using the setConsent command, the SDK persists the user’s preferences to a cookie. The next time the user loads your website in the browser, the SDK will retrieve and use these persisted preferences to determine whether or not events can be sent to Adobe. You will need to store the user preferences independently to be able to show the consent dialog with the current preferences. There is no way to retrieve the user preferences from the SDK. To make sure that the user preferences stay in sync with the SDK, you can call the setConsent command on every page load. The SDK will only make a server call if the preferences have changed. Syncing identities while setting consent When the default consent is pending or out, the setConsent may be the first request that goes out and establishes identity. Because of this, it may be important to sync identities on the first request. The identity map can be added to setConsent command just like on the sendEvent command. See Retrieving Experience Cloud ID Business.Adobe.com resources   "
32,experienceleague.adobe.com docs experience platform edge consent iab tcf without launch.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge consent iab tcf without launch.html?lang=en.txt.  Integrate IAB TCF 2.0 support with the Platform Web SDK This guide shows how to integrate the Interactive Advertising Bureau Transparency & Consent Framework, version 2.0 (IAB TCF 2.0) with Adobe Experience Platform Web SDK without using tags. For an overview of integrating with IAB TCF 2.0, read the overview. For a guide on how to integrate with tags, read the IAB TCF 2.0 guide for tags. Getting started This guide uses the __tcfapi interface for accessing the consent information. It might be easier for you to integrate directly with your cloud management provider (CMP). However, the information in this guide might still be useful because the CMPs generally provide similar functionality to the TCF API. NOTE These examples assume that by the time the code is run, window.__tcfapi is defined on the page. CMPs can provide a hook where you could run these functions when the __tcfapi object is ready. To use IAB TCF 2.0 with tags and the Adobe Experience Platform Web SDK extension, you need to have an XDM schema available. If you have not set either of these up, start by viewing this page before proceeding. Additionally, this guide requires you to have a working understanding of Adobe Experience Platform Web SDK. For a quick refresher, please read the Adobe Experience Platform Web SDK overview and the Frequently asked questions documentation. Enabling default consent If you want to treat all unknown users the same, you can set the default consent to pending or out. This queues or discards Experience Events until consent preferences are received. For more information on default consent, refer to the default consent section in the Platform Web SDK configuration documentation. Setting the default consent based on gdprApplies Some CMPs provide the ability to determine whether General Data Protection Regulation (GDPR) applies to the customer. If you want to assume consent for customers where GDPR does not apply, you can use the gdprApplies flag in the TCF API call. The following example shows one way to do this: var alloyConfiguration = { ... }; window.__tcfapi('getTCData', 2, function (tcData, success) { if (success) {  alloyConfiguration.defaultConsent = tcData.gdprApplies ? ""pending"" : ""in"";  window.alloy(""configure"", alloyConfiguration); } }); In this example, the configure command is called after the tcData is obtained from the TCF API. If gdprApplies is true, default consent is set to pending. If gdprApplies is false, default consent is set to in. Be sure to fill in the alloyConfiguration variable with your configuration. NOTE When default consent is set to in, the setConsent command can still be used to record your customers consent preferences. Using the setConsent event IAB TCF 2.0 API provides an event for when the consent is updated by the customer. This occurs when the customer initially sets their preferences and when the customer updates their preferences. The following example shows one way to do this: const identityMap = { ... }; window.__tcfapi('addEventListener', 2, function (tcData, success) { if (success && tcData.eventStatus === 'useractioncomplete') {  window.alloy(""setConsent"", {  identityMap,  consent: [   {   standard: ""IAB TCF"",   version: ""2.0"",   value: tcData.tcString,   gdprApplies: tcData.gdprApplies   }  ]  }); } }); This code block listens for the useractioncomplete event and then sets the consent, passing the consent string and the gdprApplies flag. If you have custom identities for your customers, be sure to fill in the identityMap variable. Refer to the guide on supporting consent for more information on calling setConsent. Including consent information in sendEvent Within XDM schemas, you can store consent preference information from Experience Events. There are two ways to add this information to every event. First, you can provide the relevant XDM schema on every sendEvent call. The following example shows one way to do this: var sendEventOptions = { ... }; window.__tcfapi('getTCData', 2, function (tcData, success) { if (success) {  sendEventOptions.xdm.consentStrings = [{  consentStandard: ""IAB TCF""  consentStandardVersion: ""2.0""  consentStringValue: tcData.tcString,  gdprApplies: tcData.gdprApplies  }];  window.alloy(""sendEvent"", sendEventOptions); } }); This example gets the consent information for the TCF API, and then sends an event with the consent information added to the XDM schema. See the tracking events guide to understand what should be in the sendEvent command options. The other way to add the consent information to every request is with the onBeforeEventSend callback. Read the section on modifying events globally from within the tracking events documentation for more information on how to do this. Next steps Now that you have learned how to use IAB TCF 2.0 with the Platform Web SDK extension, you can also choose to integrate with other Adobe solutions such as Adobe Analytics or Adobe Real-Time Customer Data Platform. See the IAB Transparency & Consent Framework 2.0 overview for more information. Business.Adobe.com resources   "
33,experienceleague.adobe.com docs experience platform edge datastreams configure.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge datastreams configure.html?lang=en.txt.  Configure a datastream This document covers the steps for configuring a datastream in the UI. Access the Datastreams workspace You can create and manage datastreams in the Data Collection UI or Experience Platform UI by selecting Datastreams in the left navigation. The Datastreams tab displays a list of existing datastreams, including their friendly name, ID, and last modified date. Select the name of a datastream to view its details and configure services. Select the “more” icon (…) for a particular datastream to reveal more options. Select Edit to update the basic configuration for the datastream, or select Delete to remove the datastream. Create a new datastream To create a datastream, start by selecting New Datastream. The datastream creation workflow appears, starting at the configuration step. From here, you must provide a name and optional description for the datastream. If you are configuring this datastream for use in Experience Platform and are using the Platform Web SDK, you must also select an event-based Experience Data Model (XDM) schema to represent the data you plan on ingesting. Select Advanced Options to reveal additional controls to configure the datastream.  Setting Description  Geo Location Determines whether Geo lookups occur based on the user’s IP address. The default setting None disables any Geo lookups, while the City setting provides GPS coordinates to two decimal places. First Party ID Cookie When enabled, this setting tells the Edge Network to refer to a specified cookie when looking up a first-party device ID, rather than looking up this value in the Identity Map.When enabling this setting, you must provide the name of the cookie where the ID is expected to be stored. Third Party ID Sync ID syncs can be grouped into containers to allow different ID syncs to be run at different times. When enabled, this setting lets you specify which container of ID syncs is run for this datastream. Access Type Defines the authentication type that the Edge Network accepts for the datastream. Mixed Authentication: When this option is selected, the Edge Network accepts both authenticated and unauthenticated requests. Select this option when you plan to use the Web SDK or Mobile SDK, along with the Server API. Authenticated Only: When this option is selected, the Edge Network only accepts authenticated requests. Select this option when you plan to use only the Server API and want to prevent any unauthenticated requests from being processed by the Edge Network. From here, if you are configuring your datastream for Experience Platform, follow the tutorial on Data Prep for Data Collection to map your data to a Platform event schema before returning to this guide. Otherwise, select Save and continue to the next section. View datastream details After configuring a new datastream or selecting an existing one to view, the details page for that datastream appears. Here you can find further information about the datastream, including its ID. From the datastream details screen, you can add services to enable capabilities from the Adobe Experience Cloud products you have access to. You can also edit the datastream’s basic configuration, update its mapping rules, copy the datastream, or delete it entirely. Add services to a datastream On the details page of a datastream, select Add Service to start adding available services for that datastream. On the next screen, use the dropdown menu to select a service to configure for this datastream. Only the services that you have access to will appear in this list. Select the desired service, fill in the configuration options that appear, and then select Save to add the service to the datastream. All added services appear in the details view for the datastream. The subsections below describe the configuration options for each service. NOTE Each service configuration contains an Enabled toggle that is automatically activated when the service is selected. To disable the selected service for this datastream, select the Enabled toggle again. Adobe Analytics settings This service controls whether and how data is sent to Adobe Analytics. Additional details can be found in the guide on sending data to Analytics.  Setting Description  Report Suite ID (Required) The ID of the Analytics report suite that you want to send data to. This ID can be found in the Adobe Analytics UI under Admin > ReportSuites. If multiple report suites are specified, then data is copied to each report suite. Adobe Audience Manager settings This service controls whether and how data is sent to Adobe Audience Manager. All that is needed to send data to Audience Manager is to enable this section. The other settings are optional but encouraged.  Setting Description  Cookie Destinations Enabled Allows the SDK to share segment information via cookie destinations from Audience Manager. URL Destinations Enabled Allows the SDK to share segment information via URL destinations from Audience Manager. Adobe Experience Platform settings IMPORTANT When enabling a datastream for Platform, take note of the Platform sandbox that you are currently using, as displayed in the top ribbon of the UI. Sandboxes are virtual partitions in Adobe Experience Platform that allow you to isolate your data and implementations from others in your organization. Once a datastream is created, its sandbox cannot be changed. For more details about the role of sandboxes in Experience Platform, see the sandboxes documentation. This service controls whether and how data is sent to Adobe Experience Platform.  Setting Description  Event Dataset (Required) Select the Platform dataset that customer event data will be streamed to. This schema must use the XDM ExperienceEvent class. Profile Dataset Select the Platform dataset that customer attribute data will be sent to. This schema must use the XDM Individual Profile class. Offer Decisioning Select this checkbox to enable Offer Decisioning for a Platform Web SDK implementation. See the guide on using Offer Decisioning with the Platform Web SDK for more implementation details.For more information on Offer Decisioning capabilities, refer to the Adobe Journey Optimizer documentation. Edge Segmentation Select this checkbox to enable edge segmentation for this datastream. When the SDK sends data through an edge-segmentation-enabled datastream, any updated segment memberships for the profile in question are sent back in the response.This option can be used in combination with Personalization Destinations for next-page personalization use cases. Personalization Destinations When enabling this after enabling the Edge Segmentation checkbox, this option allows the datastream to connect to personalization destinations, such as Custom Personalization.Refer to the destinations documentation for specific steps on configuring personalization destinations. Adobe Journey Optimizer Select this checkbox to enable Adobe Journey Optimizer for this datastream. Enabling this option allows the datastream to return personalized content from web and app-based inbound campaigns in Adobe Journey Optimizer. This option requires Edge Segmentation to be active. If Edge Segmentation is unchecked, this option is greyed out. Adobe Target settings This service controls whether and how data is sent to Adobe Target.  Setting Description  Property Token Target allows customers to control permissions through the use of properties. For more information on properties, see the guide on configuring enterprise permissions in the Target documentation.The property token can be found in the Adobe Target UI under Setup > Properties. Target Environment ID Environments in Adobe Target help you manage your implementation through all stages of development. This setting specifies which environment you are going to use with this datastream.Best practice is to set this differently for each of your dev, stage, and prod datastream environments to keep things simple. However, if you already have Adobe Target environments defined, you can use those. Target Third Party ID namespace The identity namespace for the mbox3rdPartyId you want to use for this datastream. See the guide on implementing mbox3rdPartyId with the Web SDK for more information. Event Forwarding settings This service controls whether and how data is sent to event forwarding.  Setting Description  Launch Property (Required) The event forwarding property that you want to send data to. Launch Environment (Required) The environment within the selected property that you want to send data to.  NOTE You can select Manually enter IDs to type in the property and environment names instead of using the dropdown menus. Copy a datastream You can create a copy of an existing datastream and alter its details as needed. NOTE Datastreams can only be copied within the same sandbox. In other words, you cannot copy a datastream from one sandbox to another. From the main page in the Datastreams workspace, select the ellipsis (…) for the datastream in question, then select Copy. Alternatively, you can select Copy Datastream from the details view of a given datastream. A confirmation dialog appears, prompting you to provide a unique name for the new datastream to be created, along with details about the configuration options that will be copied over. When ready, select Copy. The main page of the Datastreams workspace reappears with the new datastream listed. Next steps This guide covered how to manage datastreams in the Data Collection UI. For more information on how to install and configure the Web SDK after setting up a datastream, refer to the Data Collection E2E guide. Business.Adobe.com resources   "
34,experienceleague.adobe.com docs experience platform edge data collection automatic information.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge data collection automatic information.html?lang=en.txt.  Automatically collected information The Adobe Experience Platform Web SDK collects a number of pieces of information automatically without any special configuration. However, this information can be disabled if needed using the context option in the configure command. See Configuring the SDK. Below is a list of those pieces of information. The name in parentheses indicates the string to use when configuring the context. Device (device) Information about the device. This does not include data that can be looked up server-side from the user agent string. Screen height Path in Payload: Example:  events[].xdm.device.screenHeight 900 The height of the screen (in pixels). Screen orientation Path in Payload: Possible Values:  events[].xdm.device.screenOrientation landscape or portrait The orientation of the screen. Screen width Path in Payload: Example:  events[].xdm.device.screenWidth 1440 The width of the screen (in pixels). Environment (environment) Details about the browser environment. Environment type Browser Path in Payload: Example:  events[].xdm.environment.type browser The type of environment through which the experience surfaced. Adobe Experience Platform Web SDK always sets this to browser. Viewport height Path in Payload: Example:  events[].xdm.environment.browserDetails.viewportHeight 679 The height of the browser’s content area (in pixels). Viewport width Path in Payload: Example:  events[].xdm.environment.browserDetails.viewportWidth 642 The width of the browser’s content area (in pixels). Implementation details Information about the SDK used to collect the event. Name Path in Payload: Example:  events[].xdm.implementationDetails.name https://ns.adobe.com/experience/alloy The software development kit (SDK) identifier. This field uses a URI to improve uniqueness among identifiers provided by different software libraries. When the standalone library is used, the value is https://ns.adobe.com/experience/alloy. When the library is used as part of the tag extension, the value is https://ns.adobe.com/experience/alloy+reactor. Version Path in Payload: Example:  events[].xdm.implementationDetails.version 0.11.0 When the standalone library is used, the value is simply the library version. When the library is used as part of the tag extension, this is the library version and the tag extension version joined with a “+”. For example, if the library version were 2.1.0, and the tag extension version were 2.1.3, the value would be 2.1.0+2.1.3. Environment Path in Payload: Example:  events[].xdm.implementationDetails.environment browser The environment where the data was collected. This is always set to browser. Place context (placeContext) Information about the location of the end user. Local time Path in Payload: Example:  events[].xdm.placeContext.localTime 2019-08-07T15:47:17.129-07:00 Local timestamp for the end user in simplified extended ISO format ISO 8601. Local timezone offset Path in Payload: Example:  events[].xdm.placeContext.localTimezoneOffset 360 Number of minutes the user is offset from GMT. Timestamp Path in Payload: Example:  events[].xdm.timestamp 2019-08-07T22:47:17.129Z The timestamp of the event. This part of context cannot be removed. UTC timestamp for the end user in simplified extended ISO format ISO 8601. Web details (web) Details about the page the user is on. Current page URL Path in Payload: Example:  events[].xdm.web.webPageDetails.URL https://somesite.com/somepage.html The URL of the current page. Referrer URL Path in Payload: Example:  events[].xdm.web.webReferrer.URL http://somereferrer.com/linkedpage.html The URL of the previous page visited. Business.Adobe.com resources   "
35,experienceleague.adobe.com docs experience platform edge data collection adobe analytics manually mapping variables.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge data collection adobe analytics manually mapping variables.html?lang=en.txt.  Manually mapping variables in Adobe Analytics Adobe Experience Platform Web SDK can map certain variables automatically but custom variables must be manually mapped. For XDM data that is not automatically mapped to Analytics, you can use context data to match your schema. Then it can be mapped into Analytics using processing rules to populate Analytics variables. Also, you can use a default set of actions and product lists to send or retrieve data with Adobe Experience Platform Web SDK. To do this, see Collect commerce and product information. Context data To be used by Analytics, XDM data is flattened using dot notation and made available as contextData. The following list of value pairs shows an example of what the context data looks like when it is flattened: { ""bh"": ""900"", ""bw"": ""1680"", ""c"": ""24"", ""c.a.d.key.[0]"": ""value1"", ""c.a.d.key.[1]"": ""value2"", ""c.a.d.object.key1"": ""value1"", ""c.a.d.object.key2.[0]"": ""value2"", ""c.a.x.environment.browserdetails.javascriptenabled"": ""true"", ""c.a.x.environment.type"": ""browser"", ""cust_hit_time_gmt"": ""1579781427"", ""g"": ""http://example.com/home"", ""gn"": ""home"", ""j"": ""1.8.5"", ""k"": ""Y"", ""s"": ""1680x1050"", ""tnta"": ""218287:1:0|0,218287:1:0|2,218287:1:0|1,218287:1:0|32767,218287:1:0|1,218287:1:0|0,218287:1:0|1,218287:1:0|0,218287:1:0|1"", ""user_agent"": ""Mozilla/5.0 AppleWebKit/537.36 Safari/537.36"", ""v"": ""Y"" } Processing rules All data collected by the edge network can be accessed via processing rules. In Analytics, you can use processing rules to incorporate context data into Analytics variables. For example, in the following rule, Adobe Analytics is set to populate Internal Search terms (eVar2) with the data associated with a.x._atag.search.term(Context Data). XDM schema Adobe Experience Platform uses schemas to describe the structure of data in a consistent and reusable way. By defining data consistently across systems, it becomes easier to retain meaning and, therefore, gain value from data. Analytics context data works with the structure defined by the schema. The following example shows how the event command can be used with the xdm option to send and retrieve data with Adobe Experience Platform Web SDK. In this example, the event command matches the ExperienceEvent Commerce Details Schema so that the productListItems name and SKU values are tracked: alloy(""event"",{ ""xdm"":{  ""commerce"":{  ""productViews"":{   ""value"":1  }  },  ""productListItems"":[  {   ""SKU"":""HT105"",   ""name"":""Large Field Hat"",  },  {   ""SKU"":""HT104"",   ""name"":""Small Field Hat"",  }  ] } }); For more information on tracking events with Adobe Experience Platform Web SDK, see Tracking events. Business.Adobe.com resources   "
36,experienceleague.adobe.com docs experience platform edge extension accessing the ecid.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge extension accessing the ecid.html?lang=en.txt.  Accessing the ECID The Experience Cloud Identity (ECID) is a persistent identifier for a visitor to your website. In certain circumstances, you might prefer to access the ECID (to send it to a third party, for example). To access the ECID within tags, Adobe recommends the following: Ensure your property is configured with rule component sequencing enabled. Create a new rule. Add a Library Loaded event to the rule. Add a Custom Condition action to the rule with the following code (assuming the name you’ve configured for the SDK instance is alloy): return alloy(""getIdentity"") .then(function(result) {  _satellite.setVar(""ECID"", result.identity.ECID); }); Save the rule. You should then be able to access the ECID in subsequent rules using %ECID% or _satellite.getVar(""ECID"") like you would any other data element. Business.Adobe.com resources   "
37,experienceleague.adobe.com docs experience platform edge home.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge home.html?lang=en.txt.  Adobe Experience Platform Web SDK overview Adobe Experience Platform Web SDK is a client-side JavaScript library that allows customers of Adobe Experience Cloud to interact with the various services in the Experience Cloud through the Adobe Experience Platform Edge Network. In addition to the JavaScript library, there is a tag extension to help with your Web SDK configurations. For a step by step guide to setting up the Web SDK with tags and sending data to the solutions please see our Implement Adobe Experience Cloud with Web SDK tutorial. IMPORTANT This product is constantly evolving and growing to support more and more use cases. To keep up with the latest and see what we currently support, see the supported use cases page. Adobe Experience Edge Adobe Experience Platform Web SDK is part of the collection that makes up the Adobe Experience Edge. Experience Edge consists of the following technologies: Adobe Experience Platform Web SDK: A JavaScript SDK and tag extension to dramatically simplify deploying Adobe technologies. Adobe Experience Platform Mobile SDK: An extension to the v5 mobile SDK to allow customers to use the new deployment methodology Adobe Experience Platform Edge Network: A global distributed network of servers that enable a new methodology of deploying Adobe products The Adobe Experience Edge is a new framework for low-latency data collection, pluggable computing and rapid data activation across all addressable channels. Adobe Experience Edge provides a single consolidated SDK for every channel (JavaScript, Mobile, Server-side), which sends data to a common Adobe domain (adobedc.net) and receives a single payload back for data and experience delivery. On the server-side, a unified edge gateway and a common platform services framework makes it easy to plug-in and deploy new capabilities into this real-time computing environment. This architecture: Decreases customer time to value Ends the need for “point” integrations Improves performance compared to the old libraries Decreases costs Increases the speed of innovation Creates sustained competitive advantages for Adobe customers A single consolidated edge system allows customers to manage their advertising, marketing or personalization campaigns across all channels as an integrated experience. It allows Adobe to deliver services with lower total cost of ownership for customers. It also helps increase the speed of product innovation by making the real-time edge pluggable and allowing Adobe and its customers to more rapidly add new capabilities and customer-defined logic to that real time system. Video overview The following video gives an overview of the Adobe Experience Platform Web SDK and Adobe Experience Platform Edge Network. Your browser does not support the iframe element. Libraries replaced by the Web SDK The Web SDK is not just a wrapper around existing libraries. It is a completely new library, written from the ground up to incorporate functionalities of existing libraries. Its purpose is to end challenges with tags having to fire in the right order, inconsistency with library versioning challenges, and better dependency management. It is a new way to implement the Experience Cloud and it is open source. The Web SDK replaces the following SDKs: Visitor.js AppMeasurement.js AT.js DIL.js In addition to a new library, there is a new endpoint that streamlines the HTTP requests to Adobe solutions. Before, Visitor.js sent a blocking call to the visitor ID service, then AT.js sent a call to Adobe Target, DIL.js sent a call to Adobe Audience Manager, and finally AppMeasurement.js sent a call to Adobe Analytics. This new library and endpoint can retrieve an ID, fetch a Target experience, send data to Audience Manager, and pass the data to Adobe Experience Platform in a single call. The following video demonstrates Adobe Experience Platform Web SDK and Adobe Experience Platform Edge Network in action. The video example uses a single call to Adobe which sends data to Experience Platform, Analytics, Audience Manager, and Target. Your browser does not support the iframe element. Migrating from existing libraries to Web SDK To simplify your migration from any of the existing libraries to Web SDK, Adobe offers a streamlined upgrade path, allowing you to migrate each individual page of your website to Web SDK, without the need of migrating your entire website at once. This means you can use Web SDK on a page and leave the existing libraries on the other pages, until you can migrate them as well. at.js to Web SDK migration considerations Before migrating pages that use at.js to Web SDK, make sure to enable the following Web SDK configuration options. This ensures the visitor profile is kept while navigating from pages with at.js to pages using Web SDK. idMigrationEnabled targetMigrationEnabled IMPORTANT The following Target features are not supported when migrating from at.js to Web SDK: Redirect offers CNAME and cross-domain support After migrating from at.js to Web SDK, you should remove the targetMigrationEnabled option from your configuration. Business.Adobe.com resources  Advertising Revenue Email Marketing Second Party Data Device Graph Data Explorer Tv Advertising "
38,experienceleague.adobe.com docs experience platform edge fundamentals prerequisite.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals prerequisite.html?lang=en.txt.  Prerequisites for using the Adobe Experience Platform Web SDK To use the Adobe Experience Platform Web SDK, you must first: Have the right permissions configured for users in your organization. All Experience Cloud customers have access to the Data Collection tools, each user in your organization will just need permissions to Schemas, Identities, and Datastreams. To read more on how to set up these permissions see our documentation on data collection permissions management. Having 1st-party domain (CNAME) enabled is recommended. If you already have a CNAME for Adobe Analytics, you should use that one. Testing in development works without a CNAME, but Adobe recommends having one before you go to production. Although a CNAME implementation does not provide any benefits in terms of cookie lifetime, it can prevent certain ad blockers and less-common browsers from blocking SDK requests. In those cases, using a CNAME might prevent your data collection from being disrupted for users employing these tools. IMPORTANT Please note that as of 11/10/20, 1st-party CNAME implementations have a 7-day expiry on all Safari browsers and mobile iOS devices. If your website is already using the Experience Cloud ID Service on your website–either through Visitor API or the Experience Cloud ID Service extension within Adobe Experience Platform Launch–and you would like to continue using it while migrating to Adobe Experience Platform Web SDK, you must be using the latest version of Visitor API or the Experience Cloud ID Service extension. See ID Migration for more information.  Business.Adobe.com resources   "
39,experienceleague.adobe.com docs experience platform edge consent iab tcf overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge consent iab tcf overview.html?lang=en.txt.  IAB TCF 2.0 support in the Adobe Experience Platform Web SDK The Adobe Experience Platform Web SDK has support for the Interactive Advertising Bureau Transparency & Consent Framework, version 2.0 (IAB TCF 2.0). This guide shows the requirements for supporting IAB TCF 2.0 through Adobe Experience Platform Web SDK integrating with Adobe Real-Time Customer Data Platform, Audience Manager, Experience Events, Adobe Analytics, and Experience Edge. Additionally, the following guides are available to assist in learning how to integrate IAB TCF 2.0 with and without tags. With tags Without tags Getting started In order to implement the Web SDK with IAB TCF 2.0, you are required to have a working understanding of the Experience Data Model (XDM) and Experience Events. Before you start, please review the following document: Experience Data Model (XDM) System overview: Standardization and interoperability are key concepts behind Adobe Experience Platform. Experience Data Model (XDM), driven by Adobe, is an effort to standardize customer experience data and define schemas for customer experience management. Experience Platform integration To send consent data to Adobe Experience Platform using the SDK, the following is required: A dataset whose schema is based on the XDM Individual Profile class and contains TCF 2.0 consent fields, enabled for use in Real-Time Customer Profile. A datastream set up with Platform and the Profile-enabled dataset mentioned above. Please refer to the guide on TCF 2.0 compliance for instructions on creating the required datasets and datastream. Audience Manager integration Adobe Audience Manager (AAM) includes support for IAB TCF 2.0, which enables you to evaluate, honor, and forward customer privacy choices to downstream partners. TIP To integrate with Audience Manager through Adobe Experience Platform Web SDK, make sure you have a datastream set up to forward to Adobe Audience Manager. Experience Events and Adobe Analytics integration Whereas the Real-Time CDP and Audience Manager’s audiences keep track of a customer’s current consent preferences, Experience Events can hold a customer’s consent preferences that were active when the event was collected. To collect consent information on events, the following is required: A dataset based on the XDM Experience Event class, with the Experience Event privacy schema field group. A datastream set up with the XDM Experience Event dataset above. For more information on how to convert an XDM Experience Event to an Analytics hit, start by reading the Analytics overview documentation. Adobe Experience Platform Web SDK integration The sections below describe the main integration points between IAB TCF 2.0 and Adobe Experience Platform Web SDK. NOTE Even without Real-Time CDP or Audience Manager set up, you can still integrate IAB TCF 2.0 with the Web SDK. The consent preferences can be used to control the collection of Experience Events and setting an identity cookie. Default consent Default consent is used when there is no consent preference already saved for a customer. This means the default consent options can control the behavior of Adobe Experience Platform Web SDK and change based on a customer’s region. For example, if you have a customer that is not within the jurisdiction of General Data Protection Regulation (GDPR), the default consent could be set to in, but inside the jurisdiction of GDPR, the default consent could be set to pending. Your Consent Management Platform (CMP) might detect the customer’s region and provide the flag gdprApplies to IAB TCF 2.0. This flag can be used to set the default consent. For more information on default consent, refer to the default consent section in the SDK configuration documentation. Setting consent when it changes Adobe Experience Platform Web SDK has a setConsent command, which communicates your customer’s consent preferences to all the Adobe services using IAB TCF 2.0. If you are integrating with Real-Time CDP, this updates your customer’s profile. If you are integrating with Audience Manager, this updates your customer’s information. Calling this also sets a cookie with an all-or-nothing consent preference that controls whether future Experience Events are allowed to be sent. It is intended that this action is called whenever consent changes. On future page loads, the Experience Edge consent cookie will be read to determine whether Experience Events can be sent, and whether an identity cookie can be set. Similar to Audience Manager’s IAB TCF 2.0 integration, Experience Edge gives consent when a customer has provided their explicit consent to the following purposes: Purpose 1: Store and/or access information on a device Purpose 10: Develop and improve products Special Purpose 1: Ensure security, prevent fraud, and debug. (Per IAB TCF regulations, this is always consented to) Adobe Vendor Permission: Consent for Adobe (Vendor 565) For more information on the setConsent command, read the documentation on Supporting Consent. Adding Consent to Experience Events Adobe Experience Platform Web SDK has a sendEvent command that collects an Experience Event. If you are integrating with Experience Events or Adobe Analytics and would like the consent preferences on every Experience Event, you should add the consent information to every sendEvent command. For more information on the sendEvent command, read the documentation on tracking events. Next steps Now that you have a basic understanding of the IAB Transparency & Consent Framework 2.0, please refer to either of the guides on using IAB TCF 2.0 with tags or without tags. Business.Adobe.com resources   "
40,experienceleague.adobe.com docs experience platform edge identity id sharing.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge identity id sharing.html?lang=en.txt.  Mobile-to-web and cross-domain ID sharing Overview The Adobe Experience Platform Web SDK supports visitor ID sharing capabilities that enable customers to deliver personalized experiences more accurately, between mobile apps and mobile web content, and across domains. Use cases Deliver consistent personalization between mobile apps and mobile websites A clothing company wants to personalize their customers’ experience based on their interests, and keep the personalization accurate in a mobile application that also loads WebViews. By using the mobile-to-web ID sharing feature, they can ensure that the most accurate offers are presented to customers, using the same visitor identifier in the app and mobile web content by passing the ECID to the mobile web URL. Deliver consistent personalization across domains A retailer with multiple online stores wants to personalize the shopper experience across their domains, based on customer interests. Using the Web SDK cross-domain ID sharing feature, the retailer can deliver accurate offers based on customer interests, across all of their domains. Enhance visitor activity reporting A technology retailer wants to improve their visitor activity reporting with information on when their visitors move from the mobile application to their mobile website, or to their other domains. Using the Web SDK cross-domain ID sharing feature, the marketing team can accurately track visitors across their web properties and generate activity reports. Prerequisites To use mobile-to-web and cross-domain ID sharing, you must use Web SDK version 2.11.0 or later. For Edge Network mobile implementations, this feature is supported in the Identity for Edge Network extension starting with version 1.1.0 (iOS and Android). This feature is also compatible with VisitorAPI.js version 1.7.0 or later. Mobile-to-web ID sharing Use the getUrlVariables API from the Identity for Edge Network extension to retrieve the identifiers as query parameters and attach them to your URL when opening webViews. No additional configuration is required for the Web SDK to accept ECID values in the query string. The query string parameter includes: MCID: The Experience Cloud ID (ECID) MCORGID: The Experience Cloud orgID that must match the orgID configured in the Web SDK. TS: A timestamp parameter that cannot be older than five minutes. Mobile-to-web ID sharing uses the adobe_mc parameter. When the adobe_mc parameter is present and valid, the ECID from the query string is automatically added to the identity map in the first request made to the Edge Network. All subsequent Edge Network interactions will use that ECID. For more information on how to pass visitor IDs from a mobile app to a WebView, see the documentation on handling WebViews. Cross-domain ID sharing For cross-domain ID sharing, Web SDK version 2.11.0 adds support for the appendIdentityToUrl command. When used, this command generates the adobe_mc query string parameter. The command accepts an object with one property, url, and returns an object with the property url. This command does not wait for any consent update. If consent has not been provided, the URL is returned unchanged. If an ECID is not provided, the /acquire endpoint will be called to generate an ECID. Below is an example of how a customer can implement cross-domain ID sharing on their website. This code adds an event listener for all the clicks on the page, and if the click was on a link to a matching domain (in this case adobe.com or behance.com), adds the identity to the URL and redirects the user there. document.addEventListener(""click"", event => { const anchor = event.target.closest(""a""); if (!anchor || !anchor.href) {  return; } const url = new URL(anchor.href); if (!url.hostname.endsWith(""adobe.com"") && !url.hostname.endsWith(""behance.com"")) {  return; } event.preventDefault(); alloy(""appendIdentityToUrl"", { url: anchor.href }).then(result => {  document.location = result.url; }); }); Using the Tags extension Similar to using the Web SDK, there is no additional configuration required in the Tags extension to use identities passed through the URL. To use mobile-to-web and cross-domain ID sharing through the Tags extension, you must use version 2.12.0 or later of the Tags extension. To share identities from the current page to other domains, there is a new action available in the Web SDK Tags extension. This action is designed to be used with a Core - Click event type and a value comparison condition. Follow the steps described here to create a rule with the following configuration: Event Configuration: Extension: Core Event Type: Click Select When the user clicks on > specific elements Type in the Selector: a[href]. This event will trigger any time an anchor tag is clicked on the page with a href property.  Condition Configuration Logic Type: Regular Extension: Core Condition Type: Value Comparison Left Operand: %this.hostname%. This is a special data element that works with Core - Click events and resolves to the hostname of the link that was clicked. Operator: Matches Regex Right Operand: Type a regular expression that matches the domains that you would like to share identities with. For example, to match links with hostnames ending with adobe.com or behance.com, use this regular expression: behance.com$|adobe.com$. The linked page needs to have the Web SDK or Visitor ID installed to accept the identity.  Action Configuration Extension: Adobe Experience Platform Web SDK Action Type: Redirect with identity Instance: Select your instance. In most cases, you will have only one instance configured. If you have multiple instances, select the one with the identity you would like to share.  The Redirect with identity action will stop the browser from navigating through to the link. Then, it will call the appendIdentityToUrl method on the Web SDK instance. Finally, it redirects the user to the URL with the adobe_mc query string parameter appended. Business.Adobe.com resources   "
41,experienceleague.adobe.com docs experience platform edge personalization adobe target target overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target target overview.html?lang=en.txt.  Using Adobe Target with the Platform Web SDK Adobe Experience Platform Web SDK can deliver and render personalized experiences managed in Adobe Target to the web channel. You can use a WYSIWYG editor, called the Visual Experience Composer (VEC), or a non-visual interface, the Form-based Experience Composer, to create, activate, and deliver your activities and personalization experiences. IMPORTANT The Adobe Target documentation includes topics containing information specific to the Platform Web SDK as it relates to Target features and functionality. The following features have been tested and are currently supported in Target: A/B Tests A4T Impression and conversion reporting Automated Personalization activities Experience Targeting activities Multivariate Tests (MVT) Recommendations activities Native Target impression and conversion reporting VEC Support Platform Web SDK system diagram The following diagram helps you understand the workflow of Target and Platform Web SDK edge decisioning.  Call Details  1 The device loads the Platform Web SDK. The Platform Web SDK sends a request to the edge network with XDM data, the Datastreams Environment ID, passed-in parameters, and the Customer ID (optional). Page (or containers) is pre-hidden. 2 The edge network sends the request to the edge services to enrich it with the Visitor ID, consent, and other visitor context info, such as geolocation and device-friendly names. 3 The edge network sends the enriched personalization request to the Target edge with the Visitor ID and passed-in parameters. 4 Profile scripts execute and then feed into Target profile storage. Profile storage fetches segments from the Audience Library (for example, segments shared from Adobe Analytics, Adobe Audience Manager, the Adobe Experience Platform). 5 Based on URL request parameters and profile data, Target determines which activities and experiences to display for the visitor for the current page view and for future prefetched views. Target then sends this back to the edge network. 6 a. The edge network sends the personalization response back to the page, optionally including profile values for additional personalization. Personalized content on the current page is revealed as quickly as possible without flicker of default content.b. Personalized content for views that are shown as a result of user actions in a Single Page Application (SPA) is cached so it can be instantly applied without an additional server call when the views are triggered. c. The edge network sends the Visitor ID and other values in cookies, such as consent, Session ID, identity, cookie check, personalization, and so forth. 7 The edge network forwards Analytics for Target (A4T) details (activity, experience, and conversion metadata) to the Analytics edge. Enabling Adobe Target To enable Target, do the following: Enable Target in your datastream with the appropriate client code. Add the renderDecisions option to your events. Then, optionally, you can also add the following options: decisionScopes: Retrieve specific activities (useful for activities created with the form-based composer) by adding this option to your events. Prehiding snippet: Hide only certain portions of the page. Using the Adobe Target VEC To use the VEC with a Platform Web SDK implementation, install and activate either the Firefox or Chrome VEC Helper Extension. For more information, see Visual Experience Composer helper extension in the Adobe Target guide. Rendering personalized content See Rendering personalization content for more information. Audiences in XDM When defining audiences for your Target activities that are delivered via the Platform Web SDK, XDM must be defined and used. After you define XDM schemas, classes, and schema field groups, you can create a Target audience rule defined by XDM data for targeting. Within Target, XDM data displays in the Audience Builder as a custom parameter. The XDM is serialized using dot notation (for example, web.webPageDetails.name). If you have Target activities with predefined audiences that use custom parameters or a user profile, they are not delivered correctly via the SDK. Instead of using custom parameters or the user profile, you must use XDM instead. However, there are out-of-the-box audience targeting fields supported via the Platform Web SDK that do not require XDM. These fields are available in the Target UI that do not require XDM: Target Library Geo Network Operating System Site Pages Browser Traffic Sources Time Frame For more information, see Categories for audiences in the Adobe Target guide. Response tokens Response tokens are mainly used to send metadata to third parties like Google, Facebook, etc. Response tokens are returned in the meta field within propositions -> items. Here is a sample: { ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiMTI2NzM2IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"", ""scope"": ""__view__"", ""scopeDetails"": ..., ""renderAttempted"": true, ""items"": [  {  ""id"": ""0"",  ""schema"": ""https://ns.adobe.com/personalization/dom-action"",  ""meta"": {   ""experience.id"": ""0"",   ""activity.id"": ""126736"",   ""offer.name"": ""Default Content"",   ""offer.id"": ""0""  }  } ] } To collect the response tokens, you have to subscribe to alloy.sendEvent promise, iterate through propositions and extract the details from items -> meta. Every proposition has a renderAttempted boolean field indicating whether the proposition was rendered or not. See the sample below: alloy(""sendEvent"", {  renderDecisions: true,  decisionScopes: [  ""hero-container""  ] }).then(result => {  const { propositions } = result;  // filter rendered propositions  const renderedPropositions = propositions.filter(proposition => proposition.renderAttempted === true);  // collect the item metadata that represents the response tokens  const collectMetaData = (items) => {  return items.filter(item => item.meta !== undefined).map(item => item.meta);  }  const pageLoadResponseTokens = renderedPropositions  .map(proposition => collectMetaData(proposition.items))  .filter(e => e.length > 0)  .flatMap(e => e); }); When automatic rendering is enabled, propositions array contains: On Page-Load: Form-Based Composer based propositions with renderAttempted flag set to false Visual Experience Composer based propositions with renderAttempted flag set to true Visual Experience Composer based propositions for a Single Page Application view with renderAttempted flag set to true On View - change (for cached views): Visual Experience Composer based propositions for a Single Page Application view with renderAttempted flag set to true When automatic rendering is disabled, propositions array contains: On Page-Load: Form-based Composer based propositions with renderAttempted flag set to false Visual Experience Composer based propositions with renderAttempted flag set to false Visual Experience Composer based propositions for a Single Page Application view with renderAttempted flag set to false On View - change (for cached views): Visual Experience Composer based propositions for a Single Page Application view with renderAttempted flag set to false Single profile update The Platform Web SDK lets you update the profile to the Target profile and to the Platform Web SDK as an experience event. To update a Target profile, ensure that the profile data is passed with the following: Under “data {“ Under “__adobe.target” Prefix “profile.” e.g. as below  Key Type Description  renderDecisions Boolean Instructs the personalization component whether it should interpret DOM actions decisionScopes Array <String> A list of scopes to retrieve decisions for xdm Object Data formatted in XDM that land in the Platform Web SDK as an experience event data Object Arbitrary key/value pairs sent to Target solutions under the target class. Typical Platform Web SDK code using this command looks like the following: sendEvent with profile data alloy(""sendEvent"", { renderDecisions: true|false, xdm: { // Experience Event XDM data }, data: { // Freeform data } }); How to send Profile attributes to Adobe Target: alloy(""sendEvent"", { renderDecisions: true, data: {  __adobe: {  target: {   ""profile.gender"": ""female"",   ""profile.age"": 30  }  } } }); Request recommendations The following table lists Recommendations attributes and whether each one is supported via the Platform Web SDK: Category Attribute Support Status  Recommendations – Default entity attributes entity.id Supported entity.name Supported entity.categoryId Supported entity.pageUrl Supported entity.thumbnailUrl Supported entity.message Supported entity.value Supported entity.inventory Supported entity.brand Supported entity.margin Supported entity.event.detailsOnly Supported Recommendations – Custom entity attributes entity.yourCustomAttributeName Supported Recommendations – Reserved mbox/page parameters excludedIds Supported cartIds Supported productPurchasedId Supported Page or item category for category affinity user.categoryId Supported How to send Recommendations attributes to Adobe Target: alloy(""sendEvent"", { renderDecisions: true, data: {  __adobe: {  target: {   ""entity.id"": ""123"",   ""entity.genre"": ""Drama""  }  } } }); Debugging mboxTrace and mboxDebug have been deprecated. Use Platform Web SDK debugging. Terminology Propositions: In Target, propositions correlate to the experience that is selected from an Activity. Schema: The schema of a decision is the type of offer in Target. Scope: The scope of the decision. In Target, the scope is the mBox. The global mBox is the __view__ scope. XDM: The XDM is serialized into dot notation and then put into Target as mBox parameters. Business.Adobe.com resources   "
42,experienceleague.adobe.com docs experience platform edge extension data element types.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge extension data element types.html?lang=en.txt.  Data element types After you set your action types in the Adobe Experience Platform Web SDK tag extension, configure your data element types. This page describes the available data element types. Event Merge ID This data element provides an event merge ID when used. No configuration is needed for this data element. The data element that is provided stays the same until the visitor leaves the page or until the “Reset Event Merge ID” action type is used. Identity Map An identity map allows you to establish identities for the visitor of your web page. An identity map consists of namespaces, like phone or email, with each namespace containing one or more identifiers. For example, if the individual on your website has provided two phone numbers, your phone namespace should contain two identifiers. In the Identity map data element, you will provide the following pieces of information for each identifier: ID: The value identifying the visitor. For example, if the identifier belongs to the phone namespace, the ID may be 555-555-5555. This value typically is derived from a JavaScript variable or some other piece of data on your page, so it’s best to create a data element that references the page data, then reference the data element in the ID field within the Identity map data element. If, when running on your page, the ID value is anything but a populated string, the identifier will be automatically removed from the identity map. Authenticated state: A selection indicating whether the visitor is authenticated. Primary: A selection indicating whether the identifier should be used as the primary identifier for the individual. If no identifier is marked as primary, the ECID will be used as the primary identifier. You should not provide an ECID when building an identity map. When using the SDK, an ECID is automatically generated on the server and included in the identity map. The identity map data element is often used in tandem with the XDM object data element type and the Set consent action type. Read more about Adobe Experience Platform Identity Service. XDM Object Use XDM format to send any data to the Adobe Experience Platform Web SDK. Formatting your data is easier with the XDM object data element. When you first open this data element, select the correct Adobe Experience Platform sandbox and schema. After you have selected your schema, you see the structure of your schema, which you can easily fill out. Notice that when you open certain fields of your schema, such as web.webPageDetails.URL, some items are automatically collected. Even though several items are automatically collected, you can overwrite any, if needed. All the values can be filled in manually or using other data elements. NOTE Only fill in the pieces of information you are interested in collecting. Anything that is not filled in is omitted when the data is sent to the solutions.  Business.Adobe.com resources   "
43,experienceleague.adobe.com docs experience platform edge personalization rendering personalization content.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization rendering personalization content.html?lang=en.txt.  Render personalized content Adobe Experience Platform Web SDK supports retrieving personalized content from Adobe personalization solutions, including Adobe Target, Offer Decisioning and Adobe Journey Optimizer. Additionally, the Web SDK powers same-page and next-page personalization capabilies through Adobe Experience Platform personalization destinations, such as Adobe Target and the custom personalization connection. To learn how to configure Experience Platform for same-page and next-page personalization, see the dedicated guide. Content created within Adobe Target’s Visual Experience Composer and Adobe Journey Optimizer’s Web Campaign UI can be retrieved and rendered automatically by the SDK. Content created within Adobe Target’s Form-based Experience Composer or Offer Decisioning cannot be rendered automatically by the SDK. Instead, you must request this content using the SDK and then manually render the content yourself. Automatically rendering content When sending events to the server, you may set the renderDecisions option to true. Doing so forces the SDK to automatically render any personalized content that’s eligible for automatic rendering. alloy(""sendEvent"", { ""renderDecisions"": true, ""xdm"": {  ""commerce"": {  ""order"": {   ""purchaseID"": ""a8g784hjq1mnp3"",   ""purchaseOrderNumber"": ""VAU3123"",   ""currencyCode"": ""USD"",   ""priceTotal"": 999.98  }  } } }); Rendering personalized content is asynchronous, so you should not make assumptions regarding when a particular piece of content will have completed rendering. Manually rendering content To access any personalization content, you may provide a callback function, which will be called after the SDK receives a successful response from the server. Your callback is provided a result object, which may contain a propositions property containing any returned personalization content. Below is an example of how you would provide a callback function when sending an event. alloy(""sendEvent"", {  xdm: {} }).then(function(result) {  if (result.propositions) {  // Manually render propositions and send ""display"" event  } }); In this example, result.propositions, if it exists, is an array containing personalization propositions related to the event. By default, it only includes propositions that are eligible for automatic rendering. The propositions array may look similar to this example: [ {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223344"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">An HTML proposition.</h2>"",   ""selector"": ""#hero"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""scopeDetails"": {  ...  },  ""renderAttempted"": false }, {  ""id"": ""AT:PyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ8"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223345"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">Another HTML proposition.</h2>"",   ""selector"": ""#sidebar"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""scopeDetails"": {  ...  },  ""renderAttempted"": false } ] In the example, the renderDecisions option was not set to true when the sendEvent command was executed, so the SDK did not attempt to automatically render any content. The SDK still automatically retrieved the content eligible for automatic rendering, however, and provided this to you to manually render if you would like to do so. Notice that each proposition object has its renderAttempted property set to false. If you would have instead set the renderDecisions option to true when sending the event, the SDK would have attempted to render any propositions eligible for automatic rendering (as described previously). As a consequence, each of the proposition objects would have its renderAttempted property set to true. There would be no need to manually render these propositions in this case. So far, we’ve only discussed personalization content that is eligible for automatic rendering (that is, any content created in Adobe Target’s Visual Experience Composer or Adobe Journey Optimizer’s Web Campaign UI). To retrieve any personalization content not eligible for automatic rendering, you need to request the content by populating the decisionScopes option when sending the event. A scope is a string that identifies a particular proposition you would like to retrieve from the server. Here is an example: alloy(""sendEvent"", {  xdm: {},  decisionScopes: ['salutation', 'discount'] }).then(function(result) {  if (result.propositions) {  // Manually render propositions and send ""display"" event  } }); In this example, if propositions are found on the server matching the salutation or discount scope, they are returned and included in the result.propositions array. Be aware that propositions qualifying for automatic rendering will continue to be included in the propositions array, regardless of how you configure renderDecisions or decisionScopes options. The propositions array, in this case, would look similar to this example: [ {  ""id"": ""AT:cZJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ2"",  ""scope"": ""salutation"",  ""items"": [  {   ""schema"": ""https://ns.adobe.com/personalization/json-content-item"",   ""data"": {   ""id"": ""4433221"",   ""content"": {    ""salutation"": ""Welcome, esteemed visitor!""   }   },   ""meta"": {}  }  ],  ""scopeDetails"": {  ""id"": ""AT:cZJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ2"",  ""activity"": {   ""id"": ""384456""  }  },  ""renderAttempted"": false }, {  ""id"": ""AT:FZJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ0"",  ""scope"": ""discount"",  ""items"": [  {   ""schema"": ""https://ns.adobe.com/personalization/html-content-item"",   ""data"": {   ""id"": ""4433222"",   ""content"": ""<div>50% off your order!</div>"",   ""format"": ""text/html""   },   ""meta"": {}  }  ],  ""scopeDetails"": {  ""id"": ""AT:FZJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ0"",  ""activity"": {   ""id"": ""384457""  }  },  ""renderAttempted"": false }, {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223344"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">An HTML proposition.</h2>"",   ""selector"": ""#hero"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""scopeDetails"": {  ""id"": ""AT:PyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ8"",  ""activity"": {   ""id"": ""384459""  }  },  ""renderAttempted"": false }, {  ""id"": ""AT:PyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ8"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223345"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">Another HTML proposition.</h2>"",   ""selector"": ""#sidebar"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""scopeDetails"": {  ""id"": ""AT:PyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ8"",  ""activity"": {   ""id"": ""384459""  }  },  ""renderAttempted"": false } ] At this point, you can render proposition content as you see fit. In this example, the proposition matching the discount scope is an HTML proposition built using Adobe Target’s Form-based Experience Composer. Assuming you have an element on your page with the ID of daily-special and wish to render the content from the discount proposition into the daily-special element, do the following: Extract propositions from the result object. Loop through each proposition, looking for the proposition with a scope of discount. If you find a proposition, loop through each item in the proposition, looking for the item that is HTML content. (It’s better to check than to assume.) If you find an item containing HTML content, find the daily-special element on the page and replace its HTML with the personalized content. After the content is rendered, send a display event. Your code would look as follows: alloy(""sendEvent"", { xdm: {}, decisionScopes: ['salutation', 'discount'] }).then(function(result) { var propositions = result.propositions; var discountProposition; if (propositions) {  // Find the discount proposition, if it exists.  for (var i = 0; i < propositions.length; i++) {  var proposition = propositions[i];  if (proposition.scope === ""discount"") {   discountProposition = proposition;   break;  }  } } var discountHtml; if (discountProposition) {  // Find the item from proposition that should be rendered.  // Rather than assuming there a single item that has HTML  // content, find the first item whose schema indicates  // it contains HTML content.  for (var j = 0; j < discountProposition.items.length; j++) {  var discountPropositionItem = discountProposition.items[i];  if (discountPropositionItem.schema === ""https://ns.adobe.com/personalization/html-content-item"") {   discountHtml = discountPropositionItem.data.content;   // Render the content   var dailySpecialElement = document.getElementById(""daily-special"");   dailySpecialElement.innerHTML = discountHtml;   // For this example, we assume there is only a signle place to update in the HTML.   break;  }  }  // Send a ""display"" event  alloy(""sendEvent"", {  xdm: {   eventType: ""decisioning.propositionDisplay"",   _experience: {   decisioning: {    propositions: [    {     id: discountProposition.id,     scope: discountProposition.scope,     scopeDetails: discountProposition.scopeDetails    }    ]   }   }  }  }); } }); TIP If you use Adobe Target, scopes correspond to mboxes on the server, except they are all requested at once instead of individually. The global mbox is always returned. Manage flicker The SDK provides facilities to manage flicker during the personalization process. Render propositions in single-page applications without incrementing metrics The applyPropositions command allows you to render or execute an array of propositions from Target into single-page applications, without incrementing the Analytics and Target metrics. This increases reporting accuracy. IMPORTANT If propositions for the __view__ scope (or a web surface) were rendered on page load, their renderAttempted flag will be set to true. The applyPropositions command will not re-render the __view__ scope (or web surface) propositions that have the renderAttempted: true flag. Use case 1: Re-render single-page application view propositions The use case described in the sample below re-renders the previously fetched and rendered cart view propositions without sending display notifications. In the example below, the sendEvent command is triggered upon a view change, and saves the resulting object in a constant. Next, when the view or a component gets updated, the applyPropositions command is called, with the propositions from the previous sendEvent command, to re-render the view propositions. var cartPropositions = alloy(""sendEvent"", {  renderDecisions: true,  xdm: {   web: {    webPageDetails: {     viewName: ""cart""    }   }  } }).then(function(result) {  var propositions = result.propositions;  // Collect response tokens, etc.  return propositions; }); // Call applyPropositions to re-render the view propositions from the previous sendEvent command. alloy(""applyPropositions"", {  propositions: cartPropositions }); Use case 2: Render propositions that do not have a selector This use case applies to activity offers authored using the Target Form-based Experience Composer. You must provide the selector, action, and scope in the applyPropositions call. Supported actionTypes are: setHtml replaceHtml appendHtml // Retrieve propositions for salutation and discount scopes alloy(""sendEvent"", {  decisionScopes: [""salutation"", ""discount""] }).then(function(result) {  var retrievedPropositions = result.propositions;  // Render propositions on the page by providing additional metadata  return alloy(""applyPropositions"", {   propositions: retrievedPropositions,   metadata: {    salutation: {     selector: ""#first-form-based-offer"",     actionType: ""setHtml""    },    discount: {     selector: ""#second-form-based-offer"",     actionType: ""replaceHtml""    }   }  }).then(function(applyPropositionsResult) {   var renderedPropositions = applyPropositionsResult.propositions;   // Send the display notifications via sendEvent command   alloy(""sendEvent"", {    xdm: {     eventType: ""decisioning.propositionDisplay"",     _experience: {      decisioning: {       propositions: renderedPropositions      }     }    }   });  }); }); If you provide no metadata for a decision scope, the associated propositions will not be rendered. Business.Adobe.com resources   "
44,experienceleague.adobe.com docs experience platform edge extension event types.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge extension event types.html?lang=en.txt.  Event types This page describes the Adobe Experience Platform event types provided by the Adobe Experience Platform Web SDK tag extension. These are used to build rules and should not be confused with the eventType field in XDM. Send event complete Typically, your property would have one or more rules using the Send event action to send events to Adobe Experience Platform Edge Network. Each time an event is sent to Edge Network, a response is returned to the browser with useful data. Without the Send event complete event type, you wouldn’t have access to this returned data. To access the returned data, create a separate rule, then add a Send event complete event to the rule. This rule is triggered each time a successful response is received from the server as a result of a Send event action. When a Send event complete event triggers a rule, it provides data returned from the server that may be useful to accomplish certain tasks. Typically, you will add a Custom code action (from the Core extension) to the same rule that contains the Send event complete event. In the Custom code action, your custom code will have access to a variable named event. This event variable will contain the data returned from the server. Your rule for handling data returned from Edge Network might look something like this: Below are some examples of how to perform certain tasks using the Custom code action in this rule. Manually render personalized content In the Custom Code action, which is in the rule for handling response data, you can access personalization propositions that were returned from the server. To do so, you would type the following custom code: var propositions = event.propositions; If event.propositions exists, it is an array containing personalization proposition objects. The propositions included in the array are determined, in large part, by how the event was sent to the server. For this first scenario, assume you have not checked the Render decisions checkbox and have not provided any decision scopes inside the Send event action responsible for sending the event. In this example, the propositions array only contains propositions related to the event that are eligible for automatic rendering. The propositions array might look similar to this example: [ {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223344"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">An HTML proposition.</h2>"",   ""selector"": ""#hero"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""renderAttempted"": false }, {  ""id"": ""AT:PyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ8"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223345"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">Another HTML proposition.</h2>"",   ""selector"": ""#sidebar"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""renderAttempted"": false } ] When sending the event, the Render decisions checkbox was not checked, so the SDK did not attempt to automatically render any content. The SDK still automatically retrieved the content eligible for automatic rendering, however, and provided it to you to manually render if you would like to do so. Notice that each proposition object has its renderAttempted property set to false. If you would have instead checked the Render decisions checkbox when sending the event, the SDK would have attempted to render any propositions eligible for automatic rendering. As a consequence, each of the proposition objects would have its renderAttempted property set to true. There would be no need to manually render these propositions in this case. So far, you’ve only looked at personalization content that is eligible for automatic rendering (for example, any content created in Adobe Target’s Visual Experience Composer). To retrieve any personalization content not eligible for automatic rendering, request the content by providing decision scopes using the Decision scopes field in the Send event action. A scope is a string that identifies a particular proposition you would like to retrieve from the server. The Send event action would look as follows: In this example, if propositions are found on the server matching the salutation or discount scope, they are returned and included in the propositions array. Be aware that propositions qualifying for automatic rendering will continue to be included in the propositions array, regardless of how you configure the Render decisions or Decision scopes fields in the Send event action. The propositions array, in this case, would look similar to this example: [ {  ""id"": ""AT:cZJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ2"",  ""scope"": ""salutation"",  ""items"": [  {   ""schema"": ""https://ns.adobe.com/personalization/json-content-item"",   ""data"": {   ""id"": ""4433221"",   ""content"": {    ""salutation"": ""Welcome, esteemed visitor!""   }   },   ""meta"": {}  }  ],  ""renderAttempted"": false }, {  ""id"": ""AT:FZJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ0"",  ""scope"": ""discount"",  ""items"": [  {   ""schema"": ""https://ns.adobe.com/personalization/html-content-item"",   ""data"": {   ""id"": ""4433222"",   ""content"": ""<div>50% off your order!</div>"",   ""format"": ""text/html""   },   ""meta"": {}  }  ],  ""renderAttempted"": false }, {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223344"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">An HTML proposition.</h2>"",   ""selector"": ""#hero"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""renderAttempted"": false }, {  ""id"": ""AT:PyJhY3Rpdml0eUlkIjoiMTI3MDE5IiwiZXhwZXJpZW5jZUlkIjoiMCJ8"",  ""scope"": ""__view__"",  ""items"": [  {   ""id"": ""11223345"",   ""schema"": ""https://ns.adobe.com/personalization/dom-action"",   ""data"": {   ""content"": ""<h2 style=\""color: yellow\"">Another HTML proposition.</h2>"",   ""selector"": ""#sidebar"",   ""type"": ""setHtml""   },   ""meta"": {}  }  ],  ""renderAttempted"": false } ] At this point, you can render proposition content as you see fit. In this example, the proposition matching the discount scope is an HTML proposition built using Adobe Target’s Form-based Experience Composer. Assume you have an element on your page with the ID of daily-special and wish to render the content from the discount proposition into the daily-special element. Do the following: Extract propositions from the event object. Loop through each proposition, looking for the proposition with a scope of discount. If you find a proposition, loop through each item in the proposition, looking for the item that is HTML content. (It’s better to check than to assume.) If you find an item containing HTML content, find the daily-special element on the page and replace its HTML with the personalized content. Your custom code within the Custom code action might appear as follows: var propositions = event.propositions; var discountProposition; if (propositions) { // Find the discount proposition, if it exists. for (var i = 0; i < propositions.length; i++) {  var proposition = propositions[i];  if (proposition.scope === ""discount"") {  discountProposition = proposition;  break;  } } } var discountHtml; if (discountProposition) { // Find the item from proposition that should be rendered. // Rather than assuming there a single item that has HTML // content, find the first item whose schema indicates // it contains HTML content. for (var j = 0; j < discountProposition.items.length; j++) {  var discountPropositionItem = discountProposition.items[i];  if (discountPropositionItem.schema === ""https://ns.adobe.com/personalization/html-content-item"") {  discountHtml = discountPropositionItem.data.content;  break;  } } } if (discountHtml) { // Discount HTML exists. Time to render it. var dailySpecialElement = document.getElementById(""daily-special""); dailySpecialElement.innerHTML = discountHtml; } Accessing Adobe Target response tokens Personalization content returned from Adobe Target includes response tokens, which are details about the activity, offer, experience, user profile, geo information, and more. These details can be shared with third-party tools or used for debugging. Response tokens can be configured in the Adobe Target user interface. In the Custom Code action, which is in the rule for handling response data, you can access personalization propositions that were returned from the server. To do so, type the following custom code: var propositions = event.propositions; If event.propositions exists, it is an array containing personalization proposition objects. See Manually render personalized content for more information on the content of result.propositions. Assume you would like to gather all activity names from all propositions that were automatically rendered by the web SDK and push them into a single array. You could then send the single array to a third party. In this case, write custom code inside the Custom code action to: Extract propositions from the event object. Loop through each proposition. Determine if the SDK rendered the proposition. If so, loop through each item in the proposition. Retrieve the activity name from the meta property, which is an object containing response tokens. Push the activity name into an array. Send the activity names to a third party. var propositions = event.propositions; if (propositions) { var activityNames = []; propositions.forEach(function(proposition) {  if (proposition.renderAttempted) {  proposition.items.forEach(function(item) {   if (item.meta) {   // item.meta contains the response tokens.   var activityName = item.meta[""activity.name""];   // Ignore duplicates   if (activityNames.indexOf(activityName) === -1) {    activityNames.push(activityName);   }   }  });  } }); // Now that activity names are in an array, // you can send them to a third party or use // them in some other way. }  Business.Adobe.com resources   "
45,experienceleague.adobe.com docs experience platform edge personalization offer decisioning offer decisioning overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization offer decisioning offer decisioning overview.html?lang=en.txt.  Using Offer Decisioning with the Platform Web SDK NOTE The use of Offer Decisioning in Adobe Experience Platform Web SDK is available in early access to select users. This functionality is not available to all IMS organizations. Adobe Experience Platform Web SDK can deliver and render personalized offers that are managed in Offer Decisioning. You can create your offers and other related objects using the Offer Decisioning user interface (UI) or APIs. Prerequisites IMS organization is enabled for edge decisioning Offers, Activities created Datastream is published Terminology It is important to understand the following terminology when working with Offer Decisioning. For more information and to view additional terms, please visit the Offer Decisioning glossary. Container: A container is an isolation mechanism to keep different concerns apart. The container ID is the first path element for all repository APIs. All decisioning objects reside within a container. Decision Scopes: For Offer Decisioning, decision scopes are the Base64 encoded strings of JSON containing the activity and placement IDs you want the offer decisioning service to use to propose offers. Decision scope JSON: { ""activityId"":""xcore:offer-activity:11cfb1fa93381aca"", ""placementId"":""xcore:offer-placement:1175009612b0100c"" } Decision scope Base64 encoded string: ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ=="" TIP You can copy the decision scope value from the Activity Overview page in the UI.  Datastreams: For more information, please read the datastreams documentation. Identity: For more information, please read this documentation outlining how Platform Web SDK uses Identity Service. Enabling Offer Decisioning To enable Offer Decisioning, perform the following steps: Enabled Adobe Experience Platform in your datastream and check the “Offer Decisioning” box Follow the instructions to install the SDK (The SDK can be installed standalone or through the UI. See the tags quick start guide) for more information. Configure the SDK for Offer Decisioning. Additional Offer Decisioning specific steps are provided below. Install the standalone SDK Configure the “sendEvent” action with your decisionScopes alloy(""sendEvent"", {  ...  ""decisionScopes"": [   ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTIxYWIwOWMxM2JkZDIyNCIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjEyMWFiMDZhODRkMDViMTEifQ=="",   ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTIxYWIyNWI5NTUwNWIxZiIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjEyMWFiMjFmOTQzMDE0MmIifQ==""  ] })  Install the SDK through tags Create a tag property Add the embed code Install and configure the Platform Web SDK extension with the Datastream you created by selecting the configuration from the “Datastream” dropdown. See the documentation on extensions.  Create the necessary Data Elements. At the bare minimum, you must create a Platform Web SDK Identity Map and a Platform Web SDK XDM Object data element.  Create your Rules. Add a Platform Web SDK Send Event action and add the relevant decisionScopes to that action’s configuration  Create and publish a library containing all the relevant Rules, Data Elements, and Extensions you have configured  Sample requests and responses One decisionScopes value Request { ""events"": [  {  ""xdm"": {   ""identityMap"": {   ""ECID"": [    {    ""id"": ""91133425615229052182584359620783097099""    }   ]   }  },  ""query"": {   ""personalization"": {   ""decisionScopes"": [    ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ==""   ]   }  }  } ] }  Property Required Description Limits Example  identityMap Yes Refer to this Identity Service documentation. One identity per request. { ""identityMap"": { ""ECID"": [ { ""id"": ""91133425615229052182584359620783097099"" } ] } }. Note: Users don’t need to include the ECID parameter in the API call. This parameter is automatically added to the call if needed. decisionScopes Yes An array of Base64 encoded strings of JSON containing the activity and placement IDs. Maximum 30 decisionScopes per request. ""decisionScopes"": [""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ==""] Response { ""requestId"": ""94c4f2f1-9218-43ce-afd3-eb0d853c5174"", ""handle"": [  {  ""payload"": [   {   ""id"": ""2862bb89-5df2-4bc6-85c2-d8f7e1a091de"",   ""scope"": ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ=="",   ""activity"": {    ""id"": ""xcore:offer-activity:11cfb1fa93381aca"",    ""etag"": ""2""   },   ""placement"": {    ""id"": ""xcore:offer-placement:1175009612b0100c"",    ""etag"": ""1""   },   ""items"": [    {    ""id"": ""xcore:personalized-offer:124cc332095cfa74"",    ""schema"": ""https://ns.adobe.com/experience/offer-management/content-component-html"",    ""etag"": ""1"",    ""data"": {     ""id"": ""xcore:personalized-offer:124cc332095cfa74"",     ""format"": ""text/html"",     ""language"": [     ""en-US""     ],     ""content"": ""<p>20% Off on shipping</p>"",     ""characteristics"": {     ""foo"": ""bar"",     ""foo1"": ""bar1""     }    }    }   ]   }  ],  ""type"": ""personalization:decisions"",  ""eventIndex"": 0  } ] }  Property Description Example  scope The decision scope that resulted in the proposed offers. ""scope"": ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ=="" activity.id The unique ID of the offer activity. ""id"": ""xcore:offer-activity:11cfb1fa93381aca"" placement.id The unique ID of the offer placement. ""id"": ""xcore:offer-placement:1175009612b0100c"" items.id The ID of the proposed offer. ""id"": ""xcore:personalized-offer:124cc332095cfa74"" schema The schema of the content associated with the proposed offer. ""schema"": ""https://ns.adobe.com/experience/offer-management/content-component-html"" data.id The ID of the proposed offer. ""id"": ""xcore:personalized-offer:124cc332095cfa74"" format The format of the content associated with the proposed offer. ""format"": ""text/html"" language An array of languages associated with the content from the proposed offer. ""language"": [ ""en-US"" ] content Content associated with the proposed offer in the format of a string. ""content"": ""<p style=""color:red;"">20% Off on shipping</p>"" deliveryUrl Image content associated with the proposed offer in the format of a URL. ""deliveryURL"": ""https://image.jpeg"" characteristics Characteristics associated with the proposed offer in the format of a JSON object. ""characteristics"": { ""foo"": ""bar"", ""foo1"": ""bar1"" } Multiple decisionScopes values Request { ""events"": [  {  ""xdm"": {   ""identityMap"": {   ""ECID"": [    {    ""id"": ""91133425615229052182584359620783097099""    }   ]   }  },  ""query"": {   ""personalization"": {   ""decisionScopes"": [    ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ=="",    ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTIyMjA4YjNhODc0MDU1OCIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjEyMjIwNDUyOTUxNGEyYzAifQ=="",    ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTIyYzkxMzg1Mjc2MDE4YyIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjEyMzMxZjU2MTYyYWEyZjcifQ==""   ]   }  }  } ] }  Property Required Description Limits Example  identityMap Yes Refer to this Identity Service documentation. One identity per request. { ""identityMap"": { ""ECID"": [ { ""id"": ""91133425615229052182584359620783097099"" } ] } }. Note: Users don’t need to include the ECID parameter in the API call. This parameter is automatically added to the call if needed. decisionScopes Yes An array of Base64 encoded strings of JSON containing the activity and placement IDs. Maximum 30 decisionScopes per request. ""decisionScopes"":[""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ=="", ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTIyMjA4YjNhODc0MDU1OCIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjEyMjIwNDUyOTUxNGEyYzAifQ=="" Response { ""requestId"": ""94c4f2f1-9218-43ce-afd3-eb0d853c5174"", ""handle"": [  {  ""payload"": [   {   ""id"": ""a2804dfb-a0ec-4df9-8311-59d3ecdeb642"",   ""scope"": ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MTEyMyIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDExMjMifQ=="",   ""activity"": {    ""id"": ""xcore:offer-activity:11cfb1fa93381123"",    ""etag"": ""1""   },   ""placement"": {    ""id"": ""xcore:offer-placement:1175009612b01123"",    ""etag"": ""3""   },   ""items"": [    {    ""id"": ""xcore:personalized-offer:11e36d4a22954123"",    ""schema"": ""https://ns.adobe.com/experience/offer-management/content-component-text"",    ""etag"": ""2"",    ""data"": {     ""id"": ""xcore:personalized-offer:11e36d4a22954123"",     ""format"": ""text/text"",     ""language"": [     ""en""     ],     ""content"": ""20% Off on shipping"",     ""characteristics"": {     ""foo2"": ""bar2""     }    }    }   ]   },   {   ""id"": ""a2804dfb-a0ec-4df9-8311-59d3ecdeb642"",   ""scope"": ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ=="",   ""activity"": {    ""id"": ""xcore:offer-activity:11cfb1fa93381aca"",    ""etag"": ""2""   },   ""placement"": {    ""id"": ""xcore:offer-placement:1175009612b0100c"",    ""etag"": ""1""   },   ""items"": [    {    ""id"": ""xcore:personalized-offer:11e36d4a2295415d"",    ""schema"": ""https://ns.adobe.com/experience/offer-management/content-component-imagelink"",    ""etag"": ""1"",    ""data"": {     ""id"": ""xcore:personalized-offer:11e36d4a2295415d"",     ""format"": ""image/png"",     ""language"": [     ""en""     ],     ""deliveryURL"": ""https://image.jpeg"",     ""characteristics"": {     ""foo"": ""bar"",     ""foo1"": ""bar1""     }    }    }   ]   }  ],  ""type"": ""personalization:decisions"",  ""eventIndex"": 0  } ] }  Property Description Example  scope The decision scope that resulted in the proposed offers. ""scope"": ""eyJhY3Rpdml0eUlkIjoieGNvcmU6b2ZmZXItYWN0aXZpdHk6MTFjZmIxZmE5MzM4MWFjYSIsInBsYWNlbWVudElkIjoieGNvcmU6b2ZmZXItcGxhY2VtZW50OjExNzUwMDk2MTJiMDEwMGMifQ=="" activity.id The unique ID of the offer activity. ""id"": ""xcore:offer-activity:11cfb1fa93381123"" placement.id The unique ID of the offer placement. ""xcore:offer-placement:1175009612b01123"" items.id The ID of the proposed offer. ""id"": ""xcore:personalized-offer:11e36d4a22954123"" schema The schema of the content associated with the proposed offer. ""schema"": ""https://ns.adobe.com/experience/offer-management/content-component-text"" data.id The ID of the proposed offer. ""id"": ""xcore:personalized-offer:11e36d4a22954123"" format The format of the content associated with the proposed offer. ""format"": ""text/text"" language An array of languages associated with the content from the proposed offer. ""language"": [ ""en-US"" ] content Content associated with the proposed offer in the format of a string. ""content"": ""<p style=""color:red;"">20% Off on shipping</p>"" deliveryUrl Image content associated with the proposed offer in the format of a URL. ""deliveryURL"": ""https://image.jpeg"" characteristics Characteristics associated with the proposed offer in the format of a JSON object. ""characteristics"": { ""foo"": ""bar"", ""foo1"": ""bar1"" } Limitations Some offer constraints are currently not supported with the mobile Experience Edge workflows, for example Capping. The Capping field value specifies the number of times an offer can be presented across all users. For more details, see Offer eligibility rules and constraints documentation. Business.Adobe.com resources   "
46,experienceleague.adobe.com docs experience platform edge fundamentals configuring the sdk.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge fundamentals configuring the sdk.html?lang=en.txt.  Configure the Platform Web SDK Configuration for the SDK is done with the configure command. IMPORTANT configure is always the first command called. alloy(""configure"", { ""edgeConfigId"": ""ebebf826-a01f-4458-8cec-ef61de241c93"", ""orgId"":""ADB3LETTERSANDNUMBERS@AdobeOrg"" }); There are many options that can be set during configuration. All options can be found below, grouped by category. General options edgeConfigId NOTE Edge Configurations have been rebranded to Datastreams. A datastream ID is the same as a configuration ID.  Type Required Default Value  String Yes None Your assigned configuration ID, which links the SDK to the appropriate accounts and configuration. When configuring multiple instances within a single page, you must configure a different edgeConfigId for each instance. context Type Required Default Value  Array of Strings No [""web"", ""device"", ""environment"", ""placeContext"", ""highEntropyUserAgentHints""] Indicates which context categories to collect automatically as described in Automatic Information. If this configuration is not specified, all categories are used by default. IMPORTANT All context properties, with the exception of highEntropyUserAgentHints, are enabled by default. If you specified context properties manually in your Web SDK configuration, you must enable all context properties to continue collecting the needed information. To enable high entropy client hints on your Web SDK deployment, you must include the additional highEntropyUserAgentHints context option, alongside your existing configuration. For example, to retrieve high entropy client hints from web properties, your configuration would look like this: context: [""highEntropyUserAgentHints"", ""web""] debugEnabled Type Required Default Value  Boolean No false Indicates whether debugging is enabled. Setting this config to true enables the following features: Feature Function  Console logging Enables debugging messages to be displayed in the browser’s JavaScript console edgeDomain Populate this field with your first-party domain. For more details, please see the documentation. The domain is similar to data.{customerdomain.com} for a website at www.{customerdomain.com}. edgeBasePath Path after the edgeDomain used to communicate and interact with Adobe services. Often this would only change when not using the default production environment. Type Required Default Value  String No ee orgId Type Required Default Value  String Yes None Your assigned Experience Cloud organization ID. When configuring multiple instances within a page, you must configure a different orgId for each instance. Data collection clickCollectionEnabled Type Required Default Value  Boolean No true Indicates whether data associated with link clicks are automatically collected. See Automatic Link Tracking for more information. Links are also labeled as download links if they include a download attribute or if the link ends with a file extension. Download link qualifiers can be configured with a regular expression. The default value is ""\\.(exe|zip|wav|mp3|mov|mpg|avi|wmv|pdf|doc|docx|xls|xlsx|ppt|pptx)$"" onBeforeEventSend Type Required Default Value  Function No () => undefined Configure a callback that is called for every event just before it is sent. An object with the field xdm is sent in to the callback. To change what is sent, modify the xdm object. Inside the callback, the xdm object already has the data passed in the event command, and the automatically collected information. For more information on the timing of this callback and an example, see Modifying Events Globally. Privacy options defaultConsent Type Required Default Value  Object No ""in"" Sets the user’s default consent. Use this setting when there is no consent preference already saved for the user. The other valid values are ""pending"" and ""out"". This default value is not persisted to the user’s profile. The user’s profile is updated only when setConsent is called. ""in"": When this setting is set or no value is provided, work proceeds without user consent preferences. ""pending"": When this setting is set, work is queued until the user provides consent preferences. ""out"": When this setting is set, work is discarded until the user provides consent preferences. After the user’s preferences have been provided, work either proceeds or is aborted based on the user’s preferences. See Supporting Consent for more information. Personalization options prehidingStyle Type Required Default Value  String No None Used to create a CSS style definition that hides content areas of your web page while personalized content is loaded from the server. If this option is not provided, the SDK does not attempt to hide any content areas while personalized content is loaded, potentially resulting in “flicker”. For example, if an element on your web page has an ID of container, whose default content you want to hide while personalized content is loaded from the server, use the following prehiding style: prehidingStyle: ""#container { opacity: 0 !important }"" targetMigrationEnabled This option should be used when migrating individual pages from at.js to Web SDK. Use this option to enable the Web SDK to read and write the legacy mbox and mboxEdgeCluster cookies that are used by at.js. This helps you keep the visitor profile while moving from a page that uses the Web SDK to a page that uses the at.js library and vice versa. Type Required Default Value  Boolean No false Audiences options cookieDestinationsEnabled Type Required Default Value  Boolean No true Enables Audience Manager cookie destinations, which allows the setting of cookies based on segment qualification. urlDestinationsEnabled Type Required Default Value  Boolean No true Enables Audience Manager URL destinations, which allows the firing of URLs based on segment qualification. Identity options idMigrationEnabled Type Required Default Value  Boolean No true If true, the SDK reads and sets old AMCV cookies. This option helps with transitioning to using Adobe Experience Platform Web SDK while some parts of the site might still use Visitor.js. If Visitor API is defined on the page, the SDK queries Visitor API for the ECID. This option enables you to dual-tag pages with the Adobe Experience Platform Web SDK and still have the same ECID. thirdPartyCookiesEnabled Type Required Default Value  Boolean No true Enables the setting of Adobe third-party cookies. The SDK can persist the visitor ID in a third-party context to enable the same visitor ID to be used across sites. Use this option if you have multiple sites or you want to share data with partners; however, sometimes this option is not desired for privacy reasons. Business.Adobe.com resources  Content Intelligence Third Party Data Data Ingestion Marketing Analytics Search Marketing Management Programmatic Advertising "
47,experienceleague.adobe.com docs experience platform edge datastreams data prep.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge datastreams data prep.html?lang=en.txt.  Data Prep for Data Collection Data Prep is an Adobe Experience Platform service that allows you to map, transform, and validate data to and from Experience Data Model (XDM). When configuring a Platform-enabled datastream, you can use Data Prep capabilities to map your source data to XDM when sending it to the Platform Edge Network. NOTE For comprehensive guidance on all Data Prep capabilities, including transformation functions for calculated fields, refer to the following documentation: Data Prep overview Data Prep mapping functions Handling data formats with Data Prep This guide covers how to map your data within the UI. To follow along with the steps, start the process of creating a datastream up to (and including) the basic configuration step. For a quick demonstration of the Data Prep for Data Collection process, refer to the following video: Your browser does not support the iframe element. Select data Select Save and Add Mapping after completing the basic configuration for a datastream, and the Select data step appears. From here, you must provide a sample JSON object that represents the structure of the data that you plan on sending to Platform. To capture properties directly from your data layer, the JSON object must have a single root property data. The sub-properties of the data object should then be constructed in a way that maps to the data layer properties that you want to capture. Select the section below to view an example of a properly formatted JSON object with a data root.  Sample JSON file with data root{ ""data"": {  ""eventMergeId"": ""cce1b53c-571f-4f36-b3c1-153d85be6602"",  ""eventType"": ""view:load"",  ""timestamp"": ""2021-09-30T14:50:09.604Z"",  ""web"": {  ""webPageDetails"": {   ""siteSection"": ""Product section"",   ""server"": ""example.com"",   ""name"": ""product home"",   ""URL"": ""https://www.example.com""  },  ""webReferrer"": {   ""URL"": ""https://www.adobe.com/index2.html"",   ""type"": ""external""  }  },  ""commerce"": {  ""purchase"": 1,  ""order"": {   ""orderID"": ""1234""  }  },  ""product"": [  {   ""productInfo"": {   ""productID"": ""123""   }  },  {   ""productInfo"": {   ""productID"": ""1234""   }  }  ],  ""reservation"": {  ""id"": ""anc45123xlm"",  ""name"": ""Embassy Suits"",  ""SKU"": ""12345-L"",  ""skuVariant"": ""12345-LG-R"",  ""priceTotal"": ""112.99"",  ""currencyCode"": ""USD"",  ""adults"": 2,  ""children"": 3,  ""productAddMethod"": ""PDP"",  ""_namespace"": {   ""test"": 1,   ""priceTotal"": ""112.99"",   ""category"": ""Overnight Stay""  },  ""freeCancellation"": false,  ""cancellationFee"": 20,  ""refundable"": true  } } } To capture properties from an XDM object data element, the same rules apply to the JSON object, but the root property must be keyed as xdm instead. Select the section below to view an example of a properly formatted JSON object with an xdm root.  Sample JSON file with xdm root{ ""xdm"": {  ""environment"": {  ""type"": ""browser"",  ""browserDetails"": {   ""userAgent"": ""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_7_5) AppleWebkit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36"",   ""javaScriptEnabled"": true,   ""javaScriptVersion"": ""1.8.5"",   ""cookiesEnabled"": true,   ""viewportHeight"": 900,   ""viewportWidth"": 1680,   ""javaEnabled"": true  },  ""domain"": ""adobe.com"",  ""colorDepth"": 24,  ""viewportHeight"": 1050,  ""viewportWidth"": 1680  },  ""device"": {  ""screenHeight"": 1050,  ""screenWidth"": 1680  } } } You can select the option to upload the object as a file, or paste the raw object into the provided textbox instead. If the JSON is valid, a preview schema is displayed in the right panel. Select Next to continue. Mapping The Mapping step appears, allowing you to map the fields in your source data to that of the target event schema in Platform. From here, you can configure the mapping in two ways: Create new mapping rules for this datastream through a manual process. Import mapping rules from an existing datastream. Create a new mapping To get started, select Add new mapping to create a new mapping row. Select the source icon (), and in the dialog that appears select the source field that you want to map in the provided canvas. Once you have chosen a field, use the Select button to continue. Next, select the schema icon () to open a similar dialog for the target event schema. Choose the field that you want to map the data to before confirming with Select. The mapping page reappears with the completed field mapping shown. The Mapping progress section updates to reflect the total number of fields that have been successfully mapped. TIP If you want to map an array of objects (in the source field) to an array of different objects (in the target field), add [*] after the array name in the source and destination field paths, as shown below. Import existing mapping rules If you have previously created a datastream, you can re-use its configured mapping rules for a new datastream. WARNING Importing mapping rules from another datastream will overwrite any field mappings you might have added before the import. To start, select Import Mapping. In the dialog that appears, select the datastream whose mapping rules you want to import. Once the datastream is chosen, select Preview. NOTE Datastreams can only be imported within the same sandbox. In other words, you cannot import a datastream from one sandbox to another. The next screen shows a preview of the saved mapping rules for the selected datastream. Make sure that the displayed mappings are what you expect, and then select Import to confirm and add the mappings to the new datastream. NOTE If any source fields in the imported mapping rules are not included in the sample JSON data that you provided earlier, those field mappings will not be included in the import. Complete the mapping Continue following the above steps to map the rest of the fields to the target schema. While you do not have to map all available source fields, any fields in the target schema that are set as required must be mapped in order to complete this step. The Required fields counter indicates how many required fields are not yet mapped in the current configuration. Once the required fields count reaches zero and you are satisfied with your mapping, select Save to finalize your changes. Next steps This guide covered how to map your data to XDM when setting up a datastream in the UI. If you were following general datastreams tutorial, you can now return to the step on viewing datastream details. Business.Adobe.com resources   "
48,experienceleague.adobe.com docs experience platform edge data collection collect commerce data.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge data collection collect commerce data.html?lang=en.txt.  Collect commerce and product information If you have products on your site, then this is a default set of things you might want to send to enable the most capabilities from Adobe. Though this is a suggestion, it provides a very strong set of data right from the start. This document uses the ExperienceEvent Commerce Details schema field group. The commerce field group is broken into two parts: the commerce object and the productListItems array. The commerce object lets you indicate which actions are happening to the productListItems array. TIP If you are familiar with Adobe Analytics, The commerce is most closely related to the events variable. The productListItems is more closely related to the products variable. Actions related to products Below is a list of measures available in the commerce object. TIP A measure has two fields: id and value. Most of the time, you will use the value field only (for example, 'value':1). The id field allows you to set a unique identifier that you can use to keep track of when the measure was sent. See the XDM documentation for Measure.  Measure Recommendation Description  cartAbandons Optional A cart is no longer accessible or purchasable by the user. checkouts Highly Recommended A user is no longer browsing for products but is in the process of purchasing a product. productListAdds Highly Recommended A product is added to a list. Be sure to set the product in the productListItems at the same time. productListOpens Optional A new product list is created. (For example, a new shopping cart is created.) productListRemovals Highly Recommended A product is removed from a product list. productListReopens Optional A product list is reactivated by the user. This often happens in remarketing campaigns. productListViews Highly Recommended A list of products is viewed. productViews Highly Recommended A view of a product occured. Be sure to set the product viewed in the productListItems. purchases Highly Recommended An order is accepted. Must have a product list. saveForLaters Optional A product is saved for future use. Here is an example of how you would set these Measures in the SDK. alloy(""sendEvent"", { ""xdm"":{  ""commerce"":{  ""productViews"":{   ""value"":1  }  } } }); The commerce object also has a special field for collecting order details called order. Order Option Recommendation Description  currencyCode The ISO 4217 currency for the order total. payments[paymentItems] The list of payments on an order. A paymentItem includes the following. currencyCode Optional The ISO 4217 currency for this payment method. paymentAmount Highly Recommended The value of the payment in the currency code specified. paymentType Highly Recommended The type of payment (for example, credit_card, gift_card, paypal). See the list of known values for details. transactionID Optional A unique ID for this payment transaction. priceTotal Highly Recommended The total for this order after all discounts and taxes have been applied. purchaseID Highly Recomended The unique identifier assigned by the seller for this purchase. purchaseOrderNumber Optional A unique identifier assigned by the purchaser for this purchase. Here is an example of a typical purchase in the SDK. alloy(""sendEvent"",{ ""xdm"":{  ""commerce"":{  ""order"":{   ""purchaseID"":""123456789"",   ""currencyCode"":""USD"",   ""priceTotal"":39.98,   ""payments"":[   {    ""transactionID"":""amx12345"",    ""paymentAmount"":39.98,    ""paymentType"":""credit_card"",    ""currencyCode"":""USD""   }   ]  }  },  ""productListItems"":[  {   ""SKU"":""HT105"",   ""name"":""The Big Floppy Hat"",   ""priceTotal"":29.99,   ""quantity"":1  },  {   ""SKU"":""HT104"",   ""name"":""The Small Floppy Hat"",   ""priceTotal"":9.99,   ""quantity"":1  }  ] } }); Lists of products The product list indicates which products are related to the corresponding action. It is a list of productListItems. Each product has a number of optional fields. Field Recommendation Description  currencyCode Optional The ISO 4217 currency for for the product. This is only useful when you can have products with different currency codes and when it applies. For example, when there is a purchase or add to cart. priceTotal Highly Recommended Should only be set when applicable. For example, it might not be possible to set on productView event because different variations of the product can have different prices but on a productListAdds event. product Highly Recommended The XDM ID for the product. productAddMethod Highly Recommended The method that was used to add a product item to the list by the visitor. Set with productListAdds measures, and should only be used when a product is added to the list. Examples include add to cart button, quick add, and upsell. productName Highly Recommended This is set to the display name or human-readable name of the product. quantity Highly Recommended The number of units the customer has indicated they require of the product. Should be set on productListAdds, productListRemoves, purchases, saveForLaters, and so on. SKU Highly Recommended Store Keeping Unit. It is the unique identifier for the product. Examples productViews event alloy(""sendEvent"",{ ""xdm"":{  ""commerce"":{  ""productViews"":{   ""value"":1  }  },  ""productListItems"":[  {   ""SKU"":""HT105"",   ""name"":""The Big Floppy Hat"",  },  {   ""SKU"":""HT104"",   ""name"":""The Small Floppy Hat"",  }  ] } }); productListAdds event alloy(""sendEvent"",{ ""xdm"":{  ""commerce"":{  ""productListAdds"":{   ""value"":1  }  },  ""productListItems"":[  {   ""SKU"":""HT105"",   ""name"":""The Big Floppy Hat"",   ""quantity"":1,   ""priceTotal"":29.99,   ""productAddMethod"":""Add to Cart Button""  },  {   ""SKU"":""HT104"",   ""name"":""The Small Floppy Hat"",   ""quantity"":1,   ""priceTotal"":9.99,   ""productAddMethod"":""Add-on""  }  ] } }); checkouts event alloy(""sendEvent"",{ ""xdm"":{  ""commerce"":{  ""checkouts"":{   ""value"":1  }  },  ""productListItems"":[  {   ""SKU"":""HT105"",   ""name"":""The Big Floppy Hat"",   ""quantity"":1,   ""priceTotal"":29.99  },  {   ""SKU"":""HT104"",   ""name"":""The Small Floppy Hat"",   ""quantity"":1,   ""priceTotal"":9.99  }  ] } }); order event alloy(""sendEvent"",{ ""xdm"":{  ""commerce"":{  ""order"":{   ""purchaseID"":""123456789"",   ""currencyCode"":""USD"",   ""priceTotal"":39.98,   ""payments"":[   {    ""transactionID"":""amx12345"",    ""paymentAmount"":39.98,    ""paymentType"":""credit_card"",    ""currencyCode"":""USD""   }   ]  }  },  ""productListItems"":[  {   ""SKU"":""HT105"",   ""name"":""The Big Floppy Hat"",   ""priceTotal"":29.99,   ""quantity"":1  },  {   ""SKU"":""HT104"",   ""name"":""The Small Floppy Hat"",   ""priceTotal"":9.99,   ""quantity"":1  }  ] } });  Business.Adobe.com resources   "
49,experienceleague.adobe.com docs experience platform edge data collection adobe analytics sending data to analytics.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge data collection adobe analytics sending data to analytics.html?lang=en.txt.  Sending data to Adobe Analytics Whereas in the past there were different functions to distinguish between a page view and a link (for example, s.t(), s.tl()), in the Web SDK there is just the sendEvent command. The data you send with an event determines whether it should be a page view or a link. Learn more about tracking links. Sending a page view You can specify a page view by setting the the web.webPageDetails.pageViews.value=1 variable. alloy(""sendEvent"", { ""xdm"": {  ""web"": {  ""webPageDetails"": {   ""pageViews"": {    ""value"":1   }  }  } } }); Although Analytics technically records a page view even if this variable is not set, it is a best practice to set this variable whenever you want to record a page view to be explicit in your data and to future proof your implementation. Business.Adobe.com resources   "
50,experienceleague.adobe.com docs experience platform edge identity first party device ids.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge identity first party device ids.html?lang=en.txt.  First-party device IDs in the Platform Web SDK The Adobe Experience Platform Web SDK assigns Adobe Experience Cloud IDs (ECIDs) to website visitors through the use of cookies, in order to track user behavior. To account for browser restrictions on cookie lifespans, you can opt to set and manage your own device identifiers instead. These are referred to as first-party device IDs (FPIDs). NOTE First-party device ID support is only available when sending data to the Platform Edge Network via the Platform Web SDK. This document covers how to configure first-party device IDs for your Platform Web SDK implementation. Prerequisites This guide assumes you are familiar with how identity data works for the Platform Web SDK, including the role of ECIDs and identityMap. See the overview on identity data in the Web SDK for more information. Using FPIDs FPIDs track visitors through the use of first-party cookies. First-party cookies are most effective when they are set using a server that leverages a DNS A record (for IPv4) or AAAA record (for IPv6), as opposed to a DNS CNAME or JavaScript code. IMPORTANT A records or AAAA records are only supported for setting and tracking cookies. The primary method for data collection is through a DNS CNAME. In other words, FPIDs are set using an A record or AAAA record, and are then sent to Adobe using a CNAME. The Adobe-Managed Certificate Program is also still supported for first-party data collection. Once an FPID cookie is set, its value can be fetched and sent to Adobe as event data is collected. Collected FPIDs are used as seeds to generate ECIDs, which continue to be the primary identifiers in Adobe Experience Cloud applications. To send an FPID for a website visitor to the Platform Edge Network, you must include the FPID in the identityMap for that visitor. See the section later in this document on using FPIDs in identityMap for more information. ID formatting requirements The Platform Edge Network only accepts IDs that comply with the UUIDv4 format. Device IDs that are not in UUIDv4 format will be rejected. Generation of a UUID will almost always result in a unique, random ID, with the probability of a collision occurring being negligible. UUIDv4 cannot be seeded using IP addresses or any other personal identifiable information (PII). UUIDs are ubiquitous and libraries can be found for virtually every programming language to generate them. Setting a cookie using your own server When setting a cookie using a server that you own, a variety of methods can be used to prevent the cookie from being restricted due to browser policies: Generate cookies using server-side scripting languages Set cookies in response to an API request made to a sub-domain or other endpoint on the site Generate cookies using a CMS Generate cookies using a CDN IMPORTANT Cookies set using JavaScript’s document.cookie method will almost never be protected from browser policies that restrict cookie durations. When to set the cookie The FPID cookie should ideally be set before making any requests to the Edge Network. However, in scenarios where that is not possible, an ECID is still generated using existing methods and acts as the primary identifier as long as the cookie exists. Assuming the ECID is eventually impacted by a browser deletion policy, but the FPID is not, the FPID will become the primary identifier on the next visit and will be used to seed the ECID on each subsequent visit. Setting the expiration for the cookie Setting the expiration of a cookie is something that should be carefully considered as you implement the FPID functionality. When making this decision, you should take into account the countries or regions in which your organization operates along with the laws and policies in each one of those regions. As part of this decision, you may want to adopt a company-wide cookie setting policy or one that varies for users in each locale where you operate. Regardless of the setting you choose for the initial expiration of a cookie, you must ensure you include logic that extends the expiration of the cookie each time a new visit to the site occurs. Impact of cookie flags There are a variety of cookie flags that impact the how cookies are treated across different browsers: HTTPOnly Secure SameSite HTTPOnly Cookies set using the HTTPOnly flag cannot be accessed using client-side scripts. This means that if you set an HTTPOnly flag when setting the FPID, you must leverage a server-side scripting language to read the cookie value for inclusion in the identityMap. If you choose to have the Platform Edge Network read the value of the FPID cookie, setting the HTTPOnly flag will ensure the value is not accessible by any client-side scripts but will not have any negative impact on the Platform Edge Network’s ability to read the cookie. NOTE Use of the HTTPOnly flag does not have an impact on the cookie policies that may restrict cookie lifetime. However, it is still something you should consider as you set and read the value of the FPID. Secure Cookies set with the Secure attribute are only sent to the server with an encrypted request over the HTTPS protocol. Using this flag can help ensure man-in-the-middle attackers cannot easily access the value of the cookie. When possible, it is always a good idea to set the Secure flag. SameSite The SameSite attribute lets servers determine whether cookies are sent with cross-site requests. The attribute provides some protection against cross-site forgery attacks. Three possible values exist: Strict, Lax and None. Please consult your internal team to determine which setting is right for your organization. If no SameSite attribute is specified, the default setting for some browsers is now SameSite=Lax. Using FPIDs in identityMap Below is an example of how you would set an FPID on it’s own in the identityMap: { ""identityMap"": {  ""FPID"": [  {   ""id"": ""123e4567-e89b-42d3-9456-426614174000"",   ""authenticatedState"": ""ambiguous"",   ""primary"": true  }  ] } } As with other identity types, you can include the FPID with other identities within identityMap. The following is an example of the FPID included with an Authenticated CRM ID: { ""identityMap"": {  ""FPID"": [  {   ""id"": ""123e4567-e89b-42d3-9456-426614174000"",   ""authenticatedState"": ""ambiguous"",   ""primary"": true  }  ],  ""EMAIL"": [  {   ""id"": ""email@mail.com"",   ""authenticatedState"": ""authenticated"",   ""primary"": true  }  ] } } If the FPID is contained in a cookie being read by the Edge Network when first-party data collection is enabled, you should capture only the authenticated CRM ID: { ""identityMap"": {  ""EMAIL"": [  {   ""id"": ""email@mail.com"",   ""authenticatedState"": ""authenticated"",   ""primary"": true  }  ] } } The following identityMap would result in an error response from the Edge Network since it is missing the primary indicator for the FPID. At last one of the IDs present in identityMap must be marked as primary. { ""identityMap"": {  ""FPID"": [  {   ""id"": ""123e4567-e89b-12d3-a456-426614174000"",   ""authenticatedState"": ""ambiguous""  }  ],  ""EMAIL"": [  {   ""id"": ""email@mail.com"",   ""authenticatedState"": ""authenticated""  }  ] } } The error response returned by Experience Edge in this case would be similar to the following: {  ""type"": ""https://ns.adobe.com/aep/errors/EXEG-0306-400"",  ""status"": 400,  ""title"": ""No primary identity set in request (event)"",  ""detail"": ""No primary identity found in the input event. Update the request accordingly to your schema and try again."",  ""report"": {   ""requestId"": ""{REQUEST_ID}"",   ""configId"": ""{CONFIG_ID}"",   ""orgId"": ""{ORG_ID}""  } } ID hierarchy When both an ECID and FPID are present, the ECID will be prioritized in identifying the user. This will ensure that when an existing ECID is present in the browser cookie store, it will continue to be the primary identifier and existing visitor counts do not risk being affected. For existing users, the FPID will not become the primary identity until the ECID expires or is deleted as a result of a browser policy or manual process. Identities are prioritized in the following order: ECID included in the identityMap ECID stored in a cookie FPID included in the identityMap FPID stored in a cookie Migrating to first-party device IDs If you are migrating to using FPIDs from a previous implementation, it may be difficult to visualize what the transition might look like at a low level. To help illustrate this process, consider a scenario that involves a customer who has previously visited your site and what impact an FPID migration would have on how that customer is identified in Adobe solutions.  Visit Description  First Visit Assume you have not yet started setting the FPID cookie. The ECID contained in the AMCV cookie will be the identifier used to identify the visitor. Second Visit Rollout of the First-Party Device ID solution has started. The existing ECID is still present and continues to be the primary identifier for visitor identification. Third Visit Between the second and third visit, a sufficient amount of time has elapsed that the ECID has been deleted due to browser policy. However, because the FPID was set using a DNS A-record, the FPID persists. The FPID is now considered the primary ID and used to seed the ECID, which is written to the end-user device. The user would now be considered a new visitor in the Adobe Experience Platform and Experience Cloud solutions. Fourth Visit Between the third and fourth visits, a sufficient amount of time has elapsed that the ECID has been deleted due to browser policy. Like the previous visit, the FPID remains due to the manner in which it was set. This time, the same ECID is generated as the previous visit. The user is seen throughout the Experience Platform and Experience Cloud solutions as the same user as the previous visit. Fifth Visit Between the fourth and fifth visits, the end-user cleared all the cookies in their browser. A new FPID is generated and used to seed the creation of a new ECID. The user would now be considered a new visitor in the Adobe Experience Platform and Experience Cloud solutions. FAQ The following is a list of answers to frequently asked questions about first-party device IDs. How is seeding an ID different from simply generating an ID? The concept of seeding is unique in that the FPID passed to Adobe Experience Cloud is converted to an ECID using a deterministic algorithm. Each time the same FPID is sent the Adobe Experience Platform Edge Network, the same ECID is seeded from the FPID. When should the first-party device ID be generated? To reduce potential visitor inflation, the FPID should be generated prior to making your first request using the Platform Web SDK. However, if you are unable to do this, an ECID will still be generated for that user and will be used as the primary identifier. The FPID that was generated will not become the primary identifier until the ECID is no longer present. Which data collection methods support first-party device IDs? Currently only the Platform Web SDK supports FPIDs. Are FPIDs stored on any Platform or Experience Cloud solutions? Once the FPID has been used to seed an ECID, it is dropped from the identityMap and replaced with the ECID that has been generated. The FPID is not stored in any Adobe Experience Platform or Experience Cloud solutions. Business.Adobe.com resources   "
51,experienceleague.adobe.com docs experience platform edge datastreams data enrichment weather.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge datastreams data enrichment weather.html?lang=en.txt.  Use weather data from The Weather Channel Adobe has partnered with The Weather Company to bring the additional context of United States weather to the data collected via datastreams. You can use this data for analytics, targeting and segment creation in Experience Platform. There are 3 types of data that are available from The Weather Channel: Current Weather: The current weather conditions of the user, based on their location. This include current temperature, percipitation, cloud coverage, and more. Forecasted Weather: The forecast includes the 1,2,3,5,7 and 10 day forecast for the user location. Triggers: Triggers are specific combinations that map to different semantic weather conditions. There are three different types of weather triggers: Weather Triggers: Semantically meaningful conditions, such as cold or rainy weather. These can differ in their definitions between various climates. Product Triggers: Conditions that would lead to the purchase of different types of products. For example: cold weather forecasts could mean that purchases of rain coats are more likely. Severe Weather Triggers: Severe weather warnings, like winter storm or hurricane warnings. Prerequisites Before you use weather data, make sure you meet the following prerequisites: You must license the weather data that you will use, from The Weather Channel. They will then enable it on your account. Weather data is available only through datastreams. To use weather data, you must use Web SDK, Mobile Edge Extension or the Server API to leverage this data. Your datastream must have Geo Location enabled. Add the weather field group to the schema you are using. Provisioning Once you have licensed the data from The Weather Channel, they will enable your account to access the data. Next, you must reach out to Adobe Customer Care to have the data enabled on your datastream. Once enabled, the data will automatically be appended. You can validate that it is being added by running an edge trace with the debugger or by using Assurance to trace a hit through the Edge Network. Schema configuration You must add the weather field groups to your Experience Platform schema corresponding to the event dataset you are using in your datastream. There are five field groups available: Forecasted Weather Current Weather Product Triggers Relative Triggers Severe Weather Triggers Access the weather data Once your data is licensed and available, you can access it in a variety of ways throughout the Adobe services. Adobe Analytics In Adobe Analytics, the weather data is available to map via processing rules, along with the rest of your XDM schema. You can find the list of fields that you can map in the weather reference page. As with all XDM schemas, the keys are prefixed with a.x. For example, a field named weather.current.temperature.farenheit would show up in Analytics as a.x.weather.current.temperature.farenheit. Adobe Customer Journey Analytics In Adobe Customer Journey Analytics, the weather data is available in the dataset that is specified in the datastream. As long as the weather attributes are added to your schema, they will be available to add to a data view in Customer Journey Analytics. Real-Time Customer Data Platform Weather data is available in the Real-Time Customer Data Platform, for use in segments. Weather data is attached to events. Since weather conditions change often, Adobe recommends that you set time constraints on the segments, as shown in the example above. Having a cold day in the last day or two is much more impactful than having a cold day 6 months ago. See the weather reference for the available fields. Adobe Target In Adobe Target, you can use weather data to drive personalization in real-time. Weather data is passed to Target as mBox parameters and you can access it via a custom mBox parameter. The parameter is the XDM path to a specific field. See the weather reference for the available fields and their corresponding paths. Next steps After reading this document, you now have a better understanding of how you can use weather data across various Adobe solutions. To learn more about the weather data field mapping, see the field mapping reference. Business.Adobe.com resources   "
52,experienceleague.adobe.com docs experience platform edge personalization adobe target a4t client side.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target a4t client side.html?lang=en.txt.  Client-side logging for A4T data in the Platform Web SDK Overview The Adobe Experience Platform Web SDK allows you to collect Adobe Analytics for Target (A4T) data on the client side of your web application. Client-side logging means that relevant Target data is returned on the client side, allowing you to collect it and share it with Analytics. This option should be enabled if you intend to manually send data to Analytics using the Data Insertion API. NOTE A method for performing this using AppMeasurement.js is currently under development and will be available in the near future. This document covers the steps for setting up client-side A4T logging for the Web SDK and provides some implementation examples for common use cases. Prerequisites This tutorial assumes that you are familiar with the fundamental concepts and processes related to using the Web SDK for personalization purposes. Please review the following documentation if you require an introduction: Configuring the Web SDK Sending events Rendering personalization content Set up Analytics client-side logging The following subsections outline how to enable Analytics client-side logging for your Web SDK implementation. Enable Analytics client-side logging To consider Analytics client-side logging enabled for your implementation, you must disable the Adobe Analytics configuration in your datastream. Retrieve A4T data from the SDK and send it to Analytics In order for this reporting method to work properly, you must send the A4T related data retrieved from the sendEvent command in the Analytics hit. When Target Edge computes a propositions response, it checks if Analytics client-side logging is enabled (i.e. if Analytics is disabled in your datastream). If client-side logging is enabled, the system adds an Analytics token to each proposition in the response. The flow looks similar to this: The following is an example of an interact response when Analytics client-side logging is enabled. If the proposition is for an activity that has Analytics reporting, it will have a scopeDetails.characteristics.analyticsToken property. { ""requestId"": ""1234"", ""handle"": [  {  ""payload"": [   {   ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",   ""scope"": ""a4t-test"",   ""scopeDetails"": {    ""decisionProvider"": ""TGT"",    ""activity"": {    ""id"": ""434689""    },    ""experience"": {    ""id"": ""0""    },    ""strategies"": [    {     ""algorithmID"": ""0"",     ""trafficType"": ""0""    }    ],    ""characteristics"": {    ""eventToken"": ""2lTS5KA6gj4JuSjOdhqUhGqipfsIHvVzTQxHolz2IpTMromRrB5ztP5VMxjHbs7c6qPG9UF4rvQTJZniWgqbOw=="",    ""analyticsToken"": ""434689:0:0|2,434689:0:0|1""    }   },   ""items"": [    {    ""id"": ""1184844"",    ""schema"": ""https://ns.adobe.com/personalization/html-content-item"",    ""meta"": {     ""geo.state"": ""bucuresti"",     ""activity.id"": ""434689"",     ""experience.id"": ""0"",     ""activity.name"": ""a4t test form based activity"",     ""offer.id"": ""1184844"",     ""profile.tntId"": ""04608610399599289452943468926942466370-pybgfJ""    },    ""data"": {     ""id"": ""1184844"",     ""format"": ""text/html"",     ""content"": ""<div> analytics impressions </div>""    }    }   ]   },   {   ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",   ""scope"": ""a4t-test"",   ""scopeDetails"": {    ""decisionProvider"": ""TGT"",    ""activity"": {    ""id"": ""434689""    },    ""characteristics"": {    ""eventToken"": ""E0gb6q1+WyFW3FMbbQJmrg=="",    ""analyticsToken"": ""434689:0:0|32767""    }   },   ""items"": [    {    ""id"": ""434689"",    ""schema"": ""https://ns.adobe.com/personalization/measurement"",    ""data"": {     ""type"": ""click"",     ""format"": ""application/vnd.adobe.target.metric""    }    }   ]   }  ],  ""type"": ""personalization:decisions"",  ""eventIndex"": 0  } ] } Propositions for Form-based Experience Composer activities can contain both content and click metric items under the same proposition. Thus, instead of having a single analytics token for content display in scopeDetails.characteristics.analyticsToken property, these can have both a display and a click analytics token specified in scopeDetails.characteristics.analyticsDisplayToken and scopeDetails.characteristics.analyticsClickToken properties, correspondingly. { ""requestId"": ""1234"", ""handle"": [  {  ""payload"": [   {   ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",   ""scope"": ""a4t-test"",   ""scopeDetails"": {    ""decisionProvider"": ""TGT"",    ""activity"": {    ""id"": ""434689""    },    ""experience"": {    ""id"": ""0""    },    ""strategies"": [    {     ""algorithmID"": ""0"",     ""trafficType"": ""0""    }    ],    ""characteristics"": {    ""displayToken"": ""2lTS5KA6gj4JuSjOdhqUhGqipfsIHvVzTQxHolz2IpTMromRrB5ztP5VMxjHbs7c6qPG9UF4rvQTJZniWgqbOw=="",    ""clickToken"": ""E0gb6q1+WyFW3FMbbQJmrg=="",    ""analyticsDisplayToken"": ""434689:0:0|2,434689:0:0|1"",    ""analyticsClickToken"": ""434689:0:0|32767""    }   },   ""items"": [    {    ""id"": ""1184844"",    ""schema"": ""https://ns.adobe.com/personalization/html-content-item"",    ""meta"": {     ""geo.state"": ""bucuresti"",     ""activity.id"": ""434689"",     ""experience.id"": ""0"",     ""activity.name"": ""a4t test form based activity"",     ""offer.id"": ""1184844"",     ""profile.tntId"": ""04608610399599289452943468926942466370-pybgfJ""    },    ""data"": {     ""id"": ""1184844"",     ""format"": ""text/html"",     ""content"": ""<div> analytics impressions </div>""    }    },    {    ""id"": ""434689"",    ""schema"": ""https://ns.adobe.com/personalization/measurement"",    ""data"": {     ""type"": ""click"",     ""format"": ""application/vnd.adobe.target.metric""    }    }   ]   }  ],  ""type"": ""personalization:decisions"",  ""eventIndex"": 0  } ] } All the values from scopeDetails.characteristics.analyticsToken, as well as scopeDetails.characteristics.analyticsDisplayToken (for displayed content) and scopeDetails.characteristics.analyticsClickToken (for click metrics) are the A4T payloads that need to be collected and included as tnta tag in the Data Insertion API call. IMPORTANT The analyticsToken, analyticsDisplayToken, analyticsClickToken properties can contain multiple tokens, concatenated as a single comma-delineated string. In the implementation examples provided in the next section, multiple Analytics tokens are being collected iteratively. To concatenate an array of Analytics tokens, use a function similar this: var concatenateAnalyticsPayloads = function concatenateAnalyticsPayloads(analyticsPayloads) { if (analyticsPayloads.size > 1) {  return [].concat(analyticsPayloads).join(','); } return [].concat(analyticsPayloads).join(); }; Implementation examples The following subsections demonstrate how to implement Analytics client-side logging for common use cases. Form-Based Experience Composer activities You can use the Web SDK to control the execution of propositions from Adobe Target Form-Based Experience Composer activities. When you request propositions for a specific decision scope, the proposition returned contains its appropriate Analytics token. Best practice is to chain the Platform Web SDK sendEvent command and iterate through the returned propositions to execute them while collecting the Analytics tokens at the same time. You can trigger a sendEvent command for a Form-Based Experience Composer activity scope like this: alloy(""sendEvent"", {  ""decisionScopes"": [""a4t-test""],  ""xdm"": {  ""web"": {   ""webPageDetails"": {   ""name"": ""Home Page""   }  }  } } ).then(function(results) { for (var i = 0; i < results.propositions.length; i++) {  //Execute the propositions and collect the Analytics payload } }); From here, you must implement code to execute the propositions and construct a payload that will ultimately be sent to Analytics. This is an example of what results.propositions might contain: [ {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""a4t-test"",  ""scopeDetails"": {  ""decisionProvider"": ""TGT"",  ""activity"": {   ""id"": ""434689""  },  ""experience"": {   ""id"": ""0""  },  ""strategies"": [   {   ""algorithmID"": ""0"",   ""trafficType"": ""0""   }  ],  ""characteristics"": {   ""eventToken"": ""2lTS5KA6gj4JuSjOdhqUhGqipfsIHvVzTQxHolz2IpTMromRrB5ztP5VMxjHbs7c6qPG9UF4rvQTJZniWgqbOw=="",   ""analyticsToken"": ""434689:0:0|2,434689:0:0|1""  }  },  ""items"": [  {   ""id"": ""1184844"",   ""schema"": ""https://ns.adobe.com/personalization/html-content-item"",   ""meta"": {   ""geo.state"": ""bucuresti"",   ""activity.id"": ""434689"",   ""experience.id"": ""0"",   ""activity.name"": ""a4t test form based activity"",   ""offer.id"": ""1184844"",   ""profile.tntId"": ""04608610399599289452943468926942466370-pybgfJ""   },   ""data"": {   ""id"": ""1184844"",   ""format"": ""text/html"",   ""content"": ""<div> analytics impressions </div>""   }  }  ] }, {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""a4t-test"",  ""scopeDetails"": {  ""decisionProvider"": ""TGT"",  ""activity"": {   ""id"": ""434689""  },  ""characteristics"": {   ""eventToken"": ""E0gb6q1+WyFW3FMbbQJmrg=="",   ""analyticsToken"": ""434689:0:0|32767""  }  },  ""items"": [  {   ""id"": ""434689"",   ""schema"": ""https://ns.adobe.com/personalization/measurement"",   ""data"": {   ""type"": ""click"",   ""format"": ""application/vnd.adobe.target.metric""   }  }  ] }, {  ""id"": ""AT:eyJhY3Rpdml0eUlkIjoiNDM0Njg5IiwiZXhwZXJpZW5jZUlkIjoiMCJ9"",  ""scope"": ""a4t-test"",  ""scopeDetails"": {  ""decisionProvider"": ""TGT"",  ""activity"": {   ""id"": ""434688""  },  ""experience"": {   ""id"": ""0""  },  ""strategies"": [   {   ""algorithmID"": ""0"",   ""trafficType"": ""0""   }  ],  ""characteristics"": {   ""displayToken"": ""91TS5KA6gj4JuSjOdhqUhGqipfsIHvVzTQxHolz2IpTMromRrB5ztP5VMxjHbs7c6qPG9UF4rvQTJZniWgqgEt=="",   ""clickToken"": ""Tagb6q1+WyFW3FMbbQJrtg=="",   ""analyticsDisplayTokens"": ""434688:0:0|2,434688:0:0|1"",   ""analyticsClickTokens"": ""434688:0:0|32767""   }  }  },  ""items"": [  {   ""id"": ""1184845"",   ""schema"": ""https://ns.adobe.com/personalization/html-content-item"",   ""meta"": {   ""geo.state"": ""bucuresti"",   ""activity.id"": ""434688"",   ""experience.id"": ""0"",   ""activity.name"": ""a4t test form based activity 1"",   ""offer.id"": ""1184845""   },   ""data"": {   ""id"": ""1184845"",   ""format"": ""text/html"",   ""content"": ""<div> analytics impressions 1</div>""   }  },  {   ""id"": ""434688"",   ""schema"": ""https://ns.adobe.com/personalization/measurement"",   ""data"": {   ""type"": ""click"",   ""format"": ""application/vnd.adobe.target.metric""   }  }  ] } ] To extract the Analytics token from a proposition with content items, you can implement a function similar to the following: function getDisplayAnalyticsPayload(proposition) { if (!proposition || !proposition.scopeDetails || !proposition.scopeDetails.characteristics) {  return; } var characteristics = proposition.scopeDetails.characteristics; if (characteristics.analyticsDisplayToken) {  return characteristics.analyticsDisplayToken; } return characteristics.analyticsToken; } A proposition can have different types of items, as indicated by the schema property of the item in question. There are four proposition item schemas supported for Form-Based Experience Composer activities: var HTML_SCHEMA = ""https://ns.adobe.com/personalization/html-content-item""; var MEASUREMENT_SCHEMA = ""https://ns.adobe.com/personalization/measurement""; var JSON_SCHEMA = ""https://ns.adobe.com/personalization/json-content-item""; var REDIRECT_SCHEMA = ""https://ns.adobe.com/personalization/redirect-item""; HTML_SCHEMA and JSON_SCHEMA are the schemas that reflect the type of the offer, while MEASUREMENT_SCHEMA reflects the metrics that should be attached to a DOM element. Analytics payloads for click metrics should be collected and sent to Analytics separately from content items, at the moment when the visitor actually clicks on the previously displayed content. The following helper function for getting the click metric A4T payloads will come in handy in this case: function getClickAnalyticsPayload(proposition) { if (!proposition || !proposition.scopeDetails || !proposition.scopeDetails.characteristics) {  return; } var characteristics = proposition.scopeDetails.characteristics; if (characteristics.analyticsClickToken) {  return characteristics.analyticsClickToken; } return characteristics.analyticsToken; } Implementation summary In summary, the following steps must be executed when applying Form-Based Experience Composer activities with the Platform Web SDK: Send an event that fetches Form-Based Experience Composer activity offers; Apply the content changes to the page; Send the decisioning.propositionDisplay notification event; Collect the Analytics display tokens from the SDK response and construct a payload for the Analytics hit; Send the payload to Analytics using the Data Insertion API; If there are any click metrics in delivered propositions, click listeners should be setup so that when a click is performed, it sends the decisioning.propositionInteract notification event. The onBeforeEventSend handler should be configured so that when intercepting decisioning.propositionInteract events, the following actions happen: Collecting the click Analytics tokens from xdm._experience.decisioning.propositions Sending the click Analytics hit with the collected Analytics payload via Data Insertion API; alloy(""sendEvent"", {  ""decisionScopes"": [""a4t-test""],  ""xdm"": {  ""web"": {   ""webPageDetails"": {   ""name"": ""Home Page""   }  }  } } ).then(function(results) { var analyticsPayload = new Set(); results.propositions.forEach(function (proposition) {  proposition.items.forEach(function (item) {  if (item.schema === HTML_SCHEMA) {   // 1. Apply offer   // 2. Collect executed propositions and send the decisioning.propositionDisplay notification event   // 3. Collect the display Analytics tokens  }  if (item.schema === MEASUREMENT_SCHEMA) {   // Setup click listener, so that when clicked:   // 1. Collect clicked propositions and send the decisioning.propositionInteract notification event   // Note: onBeforeEventSend handler should be configured, so that when intercepting decisioning.propositionInteract events:   // 1. Collect the click Analytics tokens from xdm._experience.decisioning.propositions   // 2. Send the click Analytics hit with the collected Analytics payload via Data Insertion API  }  }); }); // Send the page view Analytics hit with the collected display Analytics payload via Data Insertion API }); Visual Experience Composer activities The Web SDK allows you to handle offers that were authored using Visual Experience Composer (VEC). NOTE The steps for implementing this use case are very similar to the steps for Form-Based Experience Composer activities. Please review the previous section for further details. When auto rendering is enabled, you can collect the Analytics tokens from the propositions that were executed on the page. Best practice is to chain the Platform Web SDK sendEvent command and iterate through the returned propositions to filter those that the Web SDK has attempted to render. Example alloy(""sendEvent"", {  ""renderDecisions"": true,  ""xdm"": {  ""web"": {   ""webPageDetails"": {   ""name"": ""Home Page""   }  }  } } ).then(function (results) { var analyticsPayloads = new Set(); for (var i = 0; i < results.propositions.length; i++) {  var proposition = propositions[i];  var renderAttempted = proposition.renderAttempted;  if (renderAttempted === true) {  var analyticsPayload = getDisplayAnalyticsPayload(proposition);  if (analyticsPayload !== undefined) {   analyticsPayloads.add(analyticsPayload);  }  } } var analyticsPayloadsToken = concatenateAnalyticsPayloads(analyticsPayloads); // Send the page view Analytics hit with collected Analytics payload via Data Insertion API }); Using onBeforeEventSend to handle page metrics Using Adobe Target activities, you can set up different metrics on the page, either manually attached to the DOM or automatically attached to the DOM (VEC authored Activities). Both types are a delayed end-user interaction on the web page. To account for this, the best practice is to collect Analytics payloads using the onBeforeEventSend Adobe Experience Platform Web SDK hook. The onBeforeEventSend hook should be configured using the configure command, and will be reflected across all events that are sent through the datastream. The following is an example of how onBeforeEventSent can be configured to trigger Analytics hits: alloy(""configure"", { edgeConfigId: ""datastream configuration ID"", orgId: ""adobe ORG ID"", onBeforeEventSend: function(options) {  const xdm = options.xdm;  const eventType = xdm.eventType;  if (eventType === ""decisioning.propositionInteract"") {  const analyticsPayloads = new Set();  const propositions = xdm._experience.decisioning.propositions;  for (var i = 0; i < propositions.length; i++) {   var proposition = propositions[i];   analyticsPayloads.add(getClickAnalyticsPayload(proposition));  }  // Trigger the Analytics hit  } } }); Next steps This guide covered client-side logging for A4T data in the Web SDK. See the guide on server-side logging for more information on how to handle A4T data on the Edge Network. Business.Adobe.com resources   "
53,experienceleague.adobe.com docs experience platform edge personalization adobe target a4t overview.html?lang=en.txt,"experienceleague.adobe.com docs experience platform edge personalization adobe target a4t overview.html?lang=en.txt.  Adobe Analytics for Target (A4T) logging in the Platform Web SDK When using Adobe Target for personalization, you can choose which system you want to use for performance measurement. Each Target activity allows you to select between Target reporting and Adobe Analytics reporting. If you are using Analytics reporting, Adobe Target has to communicate the following to Analytics: Which Adobe Target activity your visitors have entered Which experience they have seen Which conversion has been reached The Adobe Experience Platform Web SDK supports two types of Analytics logging for Analytics for Target (A4T) use cases: Logging method Description  Server-side Analytics logging All Analytics hits sent through the Edge Network are augmented with Target details on the server side, without having to go through the hit stitching process. Client-side Analytics logging Target data is returned on the client side, allowing you to manually augment and send data to Analytics using the Data Insertion API. The logging method is determined by whether you have Adobe Analytics enabled on your configured datastream: Next steps This document provided a brief introduction to the different logging methods for A4T data in the Web SDK. For more detailed information on each of these methods, refer to the following documentation: Server-side logging for A4T data in the Platform Web SDK Client-side logging for A4T data in the Platform Web SDK  Business.Adobe.com resources   "
